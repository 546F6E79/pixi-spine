{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/FlipXTimeline.js","src/SpineRuntime/FlipYTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/SkinnedMeshAttachment.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","Atlas","atlasText","baseUrl","crossOrigin","lastIndexOf","pages","regions","texturesLoading","resolution","utils","getResolutionOfUrl","reader","tuple","page","line","readLine","trim","region","rotate","readValue","readTuple","x","parseInt","y","width","height","v","u2","v2","abs","splits","pads","originalWidth","originalHeight","offsetX","offsetY","format","Format","minFilter","TextureFilter","magFilter","direction","uWrap","TextureWrap","clampToEdge","vWrap","repeat","rendererObject","BaseTexture","fromImage","findRegion","dispose","destroy","updateUVs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","SkinnedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","regionU","regionV","regionU2","regionV2","regionRotate","newSkinnedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./SkinnedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","skinnedmesh",12,"Bone","boneData","parent","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","m00","m01","worldX","m10","m11","worldY","worldRotation","worldScaleX","worldScaleY","worldFlipX","worldFlipY","updateWorldTransform","inheritScale","inheritRotation","skeletonFlipX","skeletonFlipY","radians","degRad","cos","sin","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","px","py","./AttachmentType",15,"ColorTimeline","g","b","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline","frame",21,"FfdTimeline","frameVertices","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"FlipXTimeline","boneIndex","flip","bones",23,"FlipYTimeline",24,"IkConstraint","bendDirection","findBone","apply1","apply2","targetX","targetY","parentRotation","radDeg","atan2","child","childRotation","positionX","positionY","tempPosition","temp","parentParent","childX","childY","offset","len1","sqrt","len2","cosDenom","childAngle","acos","adjacent","opposite","parentAngle",25,"IkConstraintData",26,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",27,"uvs","regionUVs","triangles","hullLength","edges","Float32Array","verticesCount","vx","vy",28,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",29,"RotateTimeline","angle","amount","prevFrameValue",30,"ScaleTimeline","prevFrameX","prevFrameY",31,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","outer","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",32,"SkeletonBounds","polygonPool","polygons","boundingBoxes","minX","minY","maxX","maxY","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","x1","y1","x2","y2","m","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x3","y3","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",33,"SkeletonData","skins","animations","version","hash","findEvent","eventName",34,"SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","field","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./FlipXTimeline","./FlipYTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",35,"attachments","oldSkin",36,"wx","wy","weight","skeletonBones","w",37,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",38,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",39,40,41,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",42,"PI",43,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","atlasParser","fromAtlas","resourceName","AnimCache","Object","create","constructor","defineProperties","get","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","position","tint","rgb2hex","meshes","Date","now","timeDelta","descriptor","baseTexture","spriteRect","Rectangle","spriteTexture","Texture","Sprite","baseRotation","anchor","texture","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",44,"Loader","addPixiMiddleware","loader","use","./atlasParser",45,"Resource","async","resource","isJson","atlasPath","url","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","add","res","spineAtlas","xhr","responseText","spineJsonParser","enableCaching","each","done","hasLoaded","once",46,"./Loader"],"mappings":"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","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n",null,"var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\n\r\nspine.Atlas = function (atlasText, baseUrl, crossOrigin)\r\n{\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n\r\n    this.pages = [];\r\n    this.regions = [];\r\n\r\n    this.texturesLoading = 0;\r\n\r\n    var self = this;\r\n    var resolution = PIXI.utils.getResolutionOfUrl(baseUrl);\r\n\r\n    var reader = new spine.AtlasReader(atlasText);\r\n    var tuple = [];\r\n    tuple.length = 4;\r\n    var page = null;\r\n    while (true)\r\n    {\r\n        var line = reader.readLine();\r\n        if (line === null) break;\r\n        line = reader.trim(line);\r\n        if (!line.length)\r\n            page = null;\r\n        else if (!page)\r\n        {\r\n            page = new spine.AtlasPage();\r\n            page.name = line;\r\n\r\n            if (reader.readTuple(tuple) == 2)\r\n            { // size is only optional for an atlas packed with an old TexturePacker.\r\n                page.width = parseInt(tuple[0]);\r\n                page.height = parseInt(tuple[1]);\r\n                reader.readTuple(tuple);\r\n            }\r\n            page.format = spine.Atlas.Format[tuple[0]];\r\n\r\n            reader.readTuple(tuple);\r\n            page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\r\n            page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\r\n\r\n            var direction = reader.readValue();\r\n            page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n            page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n            if (direction == \"x\")\r\n                page.uWrap = spine.Atlas.TextureWrap.repeat;\r\n            else if (direction == \"y\")\r\n                page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n            else if (direction == \"xy\")\r\n                page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n\r\n            page.rendererObject = PIXI.BaseTexture.fromImage(baseUrl + line, crossOrigin);\r\n\r\n            this.pages.push(page);\r\n\r\n        } else {\r\n            var region = new spine.AtlasRegion();\r\n            region.name = line;\r\n            region.page = page;\r\n\r\n            region.rotate = reader.readValue() == \"true\";\r\n\r\n            reader.readTuple(tuple);\r\n            var x = parseInt(tuple[0]) / resolution;\r\n            var y = parseInt(tuple[1]) / resolution;\r\n\r\n            reader.readTuple(tuple);\r\n            var width = parseInt(tuple[0]) / resolution;\r\n            var height = parseInt(tuple[1]) / resolution;\r\n\r\n            region.u = x / page.width;\r\n            region.v = y / page.height;\r\n            if (region.rotate)\r\n            {\r\n                region.u2 = (x + height) / page.width;\r\n                region.v2 = (y + width) / page.height;\r\n            } else {\r\n                region.u2 = (x + width) / page.width;\r\n                region.v2 = (y + height) / page.height;\r\n            }\r\n            region.x = x;\r\n            region.y = y;\r\n            region.width = Math.abs(width);\r\n            region.height = Math.abs(height);\r\n\r\n            if (reader.readTuple(tuple) == 4)\r\n            { // split is optional\r\n                region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                if (reader.readTuple(tuple) == 4)\r\n                { // pad is optional, but only present with splits\r\n                    region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                    reader.readTuple(tuple);\r\n                }\r\n            }\r\n\r\n            region.originalWidth = parseInt(tuple[0]) / resolution;\r\n            region.originalHeight = parseInt(tuple[1]) / resolution;\r\n\r\n            reader.readTuple(tuple);\r\n            region.offsetX = parseInt(tuple[0]) / resolution;\r\n            region.offsetY = parseInt(tuple[1]) / resolution;\r\n\r\n            region.index = parseInt(reader.readValue());\r\n\r\n            this.regions.push(region);\r\n        }\r\n    }\r\n};\r\nspine.Atlas.prototype = {\r\n    findRegion: function (name)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n            if (regions[i].name == name) return regions[i];\r\n        return null;\r\n    },\r\n    dispose: function ()\r\n    {\r\n        var pages = this.pages;\r\n        for (var i = 0, n = pages.length; i < n; i++)\r\n            pages[i].rendererObject.destroy(true);\r\n    },\r\n    updateUVs: function (page)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n        {\r\n            var region = regions[i];\r\n            if (region.page != page) continue;\r\n            region.u = region.x / page.width;\r\n            region.v = region.y / page.height;\r\n            if (region.rotate)\r\n            {\r\n                region.u2 = (region.x + region.height) / page.width;\r\n                region.v2 = (region.y + region.width) / page.height;\r\n            } else {\r\n                region.u2 = (region.x + region.width) / page.width;\r\n                region.v2 = (region.y + region.height) / page.height;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nspine.Atlas.Format = {\r\n    alpha: 0,\r\n    intensity: 1,\r\n    luminanceAlpha: 2,\r\n    rgb565: 3,\r\n    rgba4444: 4,\r\n    rgb888: 5,\r\n    rgba8888: 6\r\n};\r\n\r\nspine.Atlas.TextureFilter = {\r\n    nearest: 0,\r\n    linear: 1,\r\n    mipMap: 2,\r\n    mipMapNearestNearest: 3,\r\n    mipMapLinearNearest: 4,\r\n    mipMapNearestLinear: 5,\r\n    mipMapLinearLinear: 6\r\n};\r\n\r\nspine.Atlas.TextureWrap = {\r\n    mirroredRepeat: 0,\r\n    clampToEdge: 1,\r\n    repeat: 2\r\n};\r\nmodule.exports = spine.Atlas;\r\n","var spine = require('../SpineUtil');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.AtlasAttachmentParser = function (atlas)\r\n{\r\n    this.atlas = atlas;\r\n};\r\nspine.AtlasAttachmentParser.prototype = {\r\n    newRegionAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\r\n        var attachment = new spine.RegionAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.MeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newSkinnedMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.SkinnedMeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newBoundingBoxAttachment: function (skin, name)\r\n    {\r\n        return new spine.BoundingBoxAttachment(name);\r\n    }\r\n};\r\nmodule.exports = spine.AtlasAttachmentParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasRegion = function ()\r\n{};\r\nspine.AtlasRegion.prototype = {\r\n    page: null,\r\n    name: null,\r\n    x: 0, y: 0,\r\n    width: 0, height: 0,\r\n    u: 0, v: 0, u2: 0, v2: 0,\r\n    offsetX: 0, offsetY: 0,\r\n    originalWidth: 0, originalHeight: 0,\r\n    index: 0,\r\n    rotate: false,\r\n    splits: null,\r\n    pads: null\r\n};\r\nmodule.exports = spine.AtlasRegion;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = {\r\n    region: 0,\r\n    boundingbox: 1,\r\n    mesh: 2,\r\n    skinnedmesh: 3\r\n};\r\nmodule.exports = spine.AttachmentType;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = function (boneData, skeleton, parent)\r\n{\r\n    this.data = boneData;\r\n    this.skeleton = skeleton;\r\n    this.parent = parent;\r\n    this.setToSetupPose();\r\n};\r\nspine.Bone.yDown = false;\r\nspine.Bone.prototype = {\r\n    x: 0, y: 0,\r\n    rotation: 0, rotationIK: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    flipX: false, flipY: false,\r\n    m00: 0, m01: 0, worldX: 0, // a b x\r\n    m10: 0, m11: 0, worldY: 0, // c d y\r\n    worldRotation: 0,\r\n    worldScaleX: 1, worldScaleY: 1,\r\n    worldFlipX: false, worldFlipY: false,\r\n    updateWorldTransform: function ()\r\n    {\r\n        var parent = this.parent;\r\n        if (parent)\r\n        {\r\n            this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;\r\n            this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;\r\n            if (this.data.inheritScale)\r\n            {\r\n                this.worldScaleX = parent.worldScaleX * this.scaleX;\r\n                this.worldScaleY = parent.worldScaleY * this.scaleY;\r\n            } else {\r\n                this.worldScaleX = this.scaleX;\r\n                this.worldScaleY = this.scaleY;\r\n            }\r\n            this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;\r\n            this.worldFlipX = parent.worldFlipX != this.flipX;\r\n            this.worldFlipY = parent.worldFlipY != this.flipY;\r\n        } else {\r\n            var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;\r\n            this.worldX = skeletonFlipX ? -this.x : this.x;\r\n            this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;\r\n            this.worldScaleX = this.scaleX;\r\n            this.worldScaleY = this.scaleY;\r\n            this.worldRotation = this.rotationIK;\r\n            this.worldFlipX = skeletonFlipX != this.flipX;\r\n            this.worldFlipY = skeletonFlipY != this.flipY;\r\n        }\r\n        var radians = this.worldRotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        if (this.worldFlipX)\r\n        {\r\n            this.m00 = -cos * this.worldScaleX;\r\n            this.m01 = sin * this.worldScaleY;\r\n        } else {\r\n            this.m00 = cos * this.worldScaleX;\r\n            this.m01 = -sin * this.worldScaleY;\r\n        }\r\n        if (this.worldFlipY != spine.Bone.yDown)\r\n        {\r\n            this.m10 = -sin * this.worldScaleX;\r\n            this.m11 = -cos * this.worldScaleY;\r\n        } else {\r\n            this.m10 = sin * this.worldScaleX;\r\n            this.m11 = cos * this.worldScaleY;\r\n        }\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.rotationIK = this.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.flipX = data.flipX;\r\n        this.flipY = data.flipY;\r\n    },\r\n    worldToLocal: function (world)\r\n    {\r\n        var dx = world[0] - this.worldX, dy = world[1] - this.worldY;\r\n        var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;\r\n        if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown))\r\n        {\r\n            m00 = -m00;\r\n            m11 = -m11;\r\n        }\r\n        var invDet = 1 / (m00 * m11 - m01 * m10);\r\n        world[0] = dx * m00 * invDet - dy * m01 * invDet;\r\n        world[1] = dy * m11 * invDet - dx * m10 * invDet;\r\n    },\r\n    localToWorld: function (local)\r\n    {\r\n        var localX = local[0], localY = local[1];\r\n        local[0] = localX * this.m00 + localY * this.m01 + this.worldX;\r\n        local[1] = localX * this.m10 + localY * this.m11 + this.worldY;\r\n    }\r\n};\r\nmodule.exports = spine.Bone;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.BoneData = function (name, parent)\r\n{\r\n    this.name = name;\r\n    this.parent = parent;\r\n};\r\nspine.BoneData.prototype = {\r\n    length: 0,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    inheritScale: true,\r\n    inheritRotation: true,\r\n    flipX: false, flipY: false\r\n};\r\nmodule.exports = spine.BoneData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoundingBoxAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.vertices = [];\r\n};\r\nspine.BoundingBoxAttachment.prototype = {\r\n    type: spine.AttachmentType.boundingbox,\r\n    computeWorldVertices: function (x, y, bone, worldVertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        for (var i = 0, n = vertices.length; i < n; i += 2)\r\n        {\r\n            var px = vertices[i];\r\n            var py = vertices[i + 1];\r\n            worldVertices[i] = px * m00 + py * m01 + x;\r\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.BoundingBoxAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        if (slot.attachment != this.attachment) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipXTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipXTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipXTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipYTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipYTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipYTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;\n    var rotation = bone.rotation;\n    // worldY and targetY sign depends on global constant spine.Bone.yDown\n    var rotationIK = (spine.Bone.yDown?-spine.radDeg:spine.radDeg)* Math.atan2(targetY - bone.worldY, targetX - bone.worldX) - parentRotation;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha)\n{\n    var childRotation = child.rotation, parentRotation = parent.rotation;\n    if (!alpha)\n    {\n        child.rotationIK = childRotation;\n        parent.rotationIK = parentRotation;\n        return;\n    }\n    var positionX, positionY, tempPosition = spine.temp;\n    var parentParent = parent.parent;\n    if (parentParent)\n    {\n        tempPosition[0] = targetX;\n        tempPosition[1] = targetY;\n        parentParent.worldToLocal(tempPosition);\n        targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;\n        targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;\n    } else {\n        targetX -= parent.x;\n        targetY -= parent.y;\n    }\n    if (child.parent == parent)\n    {\n        positionX = child.x;\n        positionY = child.y;\n    } else {\n        tempPosition[0] = child.x;\n        tempPosition[1] = child.y;\n        child.parent.localToWorld(tempPosition);\n        parent.worldToLocal(tempPosition);\n        positionX = tempPosition[0];\n        positionY = tempPosition[1];\n    }\n    var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;\n    var offset = Math.atan2(childY, childX);\n    var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;\n    // Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/\n    var cosDenom = 2 * len1 * len2;\n    if (cosDenom < 0.0001)\n    {\n        child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;\n        return;\n    }\n    var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;\n    if (cos < -1)\n        cos = -1;\n    else if (cos > 1)\n        cos = 1;\n    var childAngle = Math.acos(cos) * bendDirection;\n    var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);\n    var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);\n    var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    parent.rotationIK = parentRotation + rotation * alpha;\n    rotation = (childAngle + offset) * spine.radDeg - childRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.MeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.MeshAttachment.prototype = {\r\n    type: spine.AttachmentType.mesh,\r\n    vertices: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function ()\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var bone = slot.bone;\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        var verticesCount = vertices.length;\r\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\r\n        for (var i = 0; i < verticesCount; i += 2)\r\n        {\r\n            var vx = vertices[i];\r\n            var vy = vertices[i + 1];\r\n            worldVertices[i] = vx * m00 + vy * m01 + x;\r\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.MeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.RegionAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.offset = [];\r\n    this.offset.length = 8;\r\n    this.uvs = [];\r\n    this.uvs.length = 8;\r\n};\r\nspine.RegionAttachment.prototype = {\r\n    type: spine.AttachmentType.region,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    width: 0, height: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    setUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var uvs = this.uvs;\r\n        if (rotate)\r\n        {\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v2;\r\n            uvs[4/*X3*/] = u;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v;\r\n            uvs[0/*X1*/] = u2;\r\n            uvs[1/*Y1*/] = v2;\r\n        } else {\r\n            uvs[0/*X1*/] = u;\r\n            uvs[1/*Y1*/] = v2;\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v;\r\n            uvs[4/*X3*/] = u2;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v2;\r\n        }\r\n    },\r\n    updateOffset: function ()\r\n    {\r\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\r\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\r\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\r\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\r\n        var localX2 = localX + this.regionWidth * regionScaleX;\r\n        var localY2 = localY + this.regionHeight * regionScaleY;\r\n        var radians = this.rotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        var localXCos = localX * cos + this.x;\r\n        var localXSin = localX * sin;\r\n        var localYCos = localY * cos + this.y;\r\n        var localYSin = localY * sin;\r\n        var localX2Cos = localX2 * cos + this.x;\r\n        var localX2Sin = localX2 * sin;\r\n        var localY2Cos = localY2 * cos + this.y;\r\n        var localY2Sin = localY2 * sin;\r\n        var offset = this.offset;\r\n        offset[0/*X1*/] = localXCos - localYSin;\r\n        offset[1/*Y1*/] = localYCos + localXSin;\r\n        offset[2/*X2*/] = localXCos - localY2Sin;\r\n        offset[3/*Y2*/] = localY2Cos + localXSin;\r\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\r\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\r\n        offset[6/*X4*/] = localX2Cos - localYSin;\r\n        offset[7/*Y4*/] = localYCos + localX2Sin;\r\n    },\r\n    computeVertices: function (x, y, bone, vertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var offset = this.offset;\r\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\r\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\r\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\r\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\r\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\r\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\r\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\r\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\r\n    }\r\n};\r\nmodule.exports = spine.RegionAttachment;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = require('./Bone');\r\nspine.Slot = require('./Slot');\r\nspine.IkConstraint = require('./IkConstraint');\r\nspine.Skeleton = function (skeletonData)\r\n{\r\n    this.data = skeletonData;\r\n\r\n    this.bones = [];\r\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\r\n    {\r\n        var boneData = skeletonData.bones[i];\r\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\r\n        this.bones.push(new spine.Bone(boneData, this, parent));\r\n    }\r\n\r\n    this.slots = [];\r\n    this.drawOrder = [];\r\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\r\n    {\r\n        var slotData = skeletonData.slots[i];\r\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\r\n        var slot = new spine.Slot(slotData, bone);\r\n        this.slots.push(slot);\r\n        this.drawOrder.push(i);\r\n    }\r\n\r\n    this.ikConstraints = [];\r\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\r\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\r\n\r\n    this.boneCache = [];\r\n    this.updateCache();\r\n};\r\nspine.Skeleton.prototype = {\r\n    x: 0, y: 0,\r\n    skin: null,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    time: 0,\r\n    flipX: false, flipY: false,\r\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\r\n    updateCache: function ()\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        var ikConstraintsCount = ikConstraints.length;\r\n\r\n        var arrayCount = ikConstraintsCount + 1;\r\n        var boneCache = this.boneCache;\r\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\r\n        for (var i = 0, n = boneCache.length; i < n; i++)\r\n            boneCache[i].length = 0;\r\n        while (boneCache.length < arrayCount)\r\n            boneCache[boneCache.length] = [];\r\n\r\n        var nonIkBones = boneCache[0];\r\n        var bones = this.bones;\r\n\r\n        outer:\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            var current = bone;\r\n            do {\r\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\r\n                {\r\n                    var ikConstraint = ikConstraints[ii];\r\n                    var parent = ikConstraint.bones[0];\r\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\r\n                    while (true)\r\n                    {\r\n                        if (current == child)\r\n                        {\r\n                            boneCache[ii].push(bone);\r\n                            boneCache[ii + 1].push(bone);\r\n                            continue outer;\r\n                        }\r\n                        if (child == parent) break;\r\n                        child = child.parent;\r\n                    }\r\n                }\r\n                current = current.parent;\r\n            } while (current);\r\n            nonIkBones[nonIkBones.length] = bone;\r\n        }\r\n    },\r\n    /** Updates the world transform for each bone. */\r\n    updateWorldTransform: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            bone.rotationIK = bone.rotation;\r\n        }\r\n        var i = 0, last = this.boneCache.length - 1;\r\n        while (true)\r\n        {\r\n            var cacheBones = this.boneCache[i];\r\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\r\n                cacheBones[ii].updateWorldTransform();\r\n            if (i == last) break;\r\n            this.ikConstraints[i].apply();\r\n            i++;\r\n        }\r\n    },\r\n    /** Sets the bones and slots to their setup pose values. */\r\n    setToSetupPose: function ()\r\n    {\r\n        this.setBonesToSetupPose();\r\n        this.setSlotsToSetupPose();\r\n    },\r\n    setBonesToSetupPose: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            bones[i].setToSetupPose();\r\n\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n        {\r\n            var ikConstraint = ikConstraints[i];\r\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\r\n            ikConstraint.mix = ikConstraint.data.mix;\r\n        }\r\n    },\r\n    setSlotsToSetupPose: function ()\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            slots[i].setToSetupPose(i);\r\n        }\r\n\r\n        this.resetDrawOrder();\r\n    },\r\n    /** @return May return null. */\r\n    getRootBone: function ()\r\n    {\r\n        return this.bones.length ? this.bones[0] : null;\r\n    },\r\n    /** @return May be null. */\r\n    findBone: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return bones[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findBoneIndex: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return i;\r\n        return -1;\r\n    },\r\n    /** @return May be null. */\r\n    findSlot: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return slots[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findSlotIndex: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return i;\r\n        return -1;\r\n    },\r\n    setSkinByName: function (skinName)\r\n    {\r\n        var skin = this.data.findSkin(skinName);\r\n        if (!skin) throw \"Skin not found: \" + skinName;\r\n        this.setSkin(skin);\r\n    },\r\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\r\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\r\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\r\n     * @param newSkin May be null. */\r\n    setSkin: function (newSkin)\r\n    {\r\n        if (newSkin)\r\n        {\r\n            if (this.skin)\r\n                newSkin._attachAll(this, this.skin);\r\n            else\r\n            {\r\n                var slots = this.slots;\r\n                for (var i = 0, n = slots.length; i < n; i++)\r\n                {\r\n                    var slot = slots[i];\r\n                    var name = slot.data.attachmentName;\r\n                    if (name)\r\n                    {\r\n                        var attachment = newSkin.getAttachment(i, name);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skin = newSkin;\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotName: function (slotName, attachmentName)\r\n    {\r\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\r\n    {\r\n        if (this.skin)\r\n        {\r\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n            if (attachment) return attachment;\r\n        }\r\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n        return null;\r\n    },\r\n    /** @param attachmentName May be null. */\r\n    setAttachment: function (slotName, attachmentName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slot = slots[i];\r\n            if (slot.data.name == slotName)\r\n            {\r\n                var attachment = null;\r\n                if (attachmentName)\r\n                {\r\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\r\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\r\n                }\r\n                slot.setAttachment(attachment);\r\n                return;\r\n            }\r\n        }\r\n        throw \"Slot not found: \" + slotName;\r\n    },\r\n    /** @return May be null. */\r\n    findIkConstraint: function (ikConstraintName)\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\r\n        return null;\r\n    },\r\n    update: function (delta)\r\n    {\r\n        this.time += delta;\r\n    },\r\n    resetDrawOrder: function () {\r\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\r\n        {\r\n            this.drawOrder[i] = i;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skeleton;\r\n\r\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\r\nspine.SkeletonData = require('./SkeletonData');\r\nspine.BoneData = require('./BoneData');\r\nspine.IkConstraintData = require('./IkConstraintData');\r\nspine.SlotData = require('./SlotData');\r\nspine.Skin = require('./Skin');\r\nspine.EventData = require('./EventData');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.ColorTimeline = require('./ColorTimeline');\r\nspine.AttachmentTimeline = require('./AttachmentTimeline');\r\nspine.RotateTimeline = require('./RotateTimeline');\r\nspine.ScaleTimeline = require('./ScaleTimeline');\r\nspine.TranslateTimeline = require('./TranslateTimeline');\r\nspine.FlipXTimeline = require('./FlipXTimeline');\r\nspine.FlipYTimeline = require('./FlipYTimeline');\r\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\r\nspine.FfdTimeline = require('./FfdTimeline');\r\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\r\nspine.EventTimeline = require('./EventTimeline');\r\nspine.Event = require('./Event');\r\nspine.Animation = require('./Animation');\r\nspine.SkeletonJsonParser = function (attachmentLoader)\r\n{\r\n    this.attachmentLoader = attachmentLoader;\r\n};\r\nspine.SkeletonJsonParser.prototype = {\r\n    scale: 1,\r\n    readSkeletonData: function (root, name)\r\n    {\r\n        var skeletonData = new spine.SkeletonData();\r\n        skeletonData.name = name;\r\n\r\n        // Skeleton.\r\n        var skeletonMap = root[\"skeleton\"];\r\n        if (skeletonMap)\r\n        {\r\n            skeletonData.hash = skeletonMap[\"hash\"];\r\n            skeletonData.version = skeletonMap[\"spine\"];\r\n            skeletonData.width = skeletonMap[\"width\"] || 0;\r\n            skeletonData.height = skeletonMap[\"height\"] || 0;\r\n        }\r\n\r\n        // Bones.\r\n        var bones = root[\"bones\"];\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var boneMap = bones[i];\r\n            var parent = null;\r\n            if (boneMap[\"parent\"])\r\n            {\r\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\r\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\r\n            }\r\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\r\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\r\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\r\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\r\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\r\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\r\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\r\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\r\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\r\n            skeletonData.bones.push(boneData);\r\n        }\r\n\r\n        // IK constraints.\r\n        var ik = root[\"ik\"];\r\n        if (ik)\r\n        {\r\n            for (var i = 0, n = ik.length; i < n; i++)\r\n            {\r\n                var ikMap = ik[i];\r\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\r\n\r\n                var bones = ikMap[\"bones\"];\r\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\r\n                {\r\n                    var bone = skeletonData.findBone(bones[ii]);\r\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\r\n                    ikConstraintData.bones.push(bone);\r\n                }\r\n\r\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\r\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\r\n\r\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\r\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\r\n\r\n                skeletonData.ikConstraints.push(ikConstraintData);\r\n            }\r\n        }\r\n\r\n        // Slots.\r\n        var slots = root[\"slots\"];\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slotMap = slots[i];\r\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\r\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\r\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\r\n\r\n            var color = slotMap[\"color\"];\r\n            if (color)\r\n            {\r\n                slotData.r = this.toColor(color, 0);\r\n                slotData.g = this.toColor(color, 1);\r\n                slotData.b = this.toColor(color, 2);\r\n                slotData.a = this.toColor(color, 3);\r\n            }\r\n\r\n            slotData.attachmentName = slotMap[\"attachment\"];\r\n\r\n\r\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\r\n\r\n            skeletonData.slots.push(slotData);\r\n        }\r\n\r\n        // Skins.\r\n        var skins = root[\"skins\"];\r\n        for (var skinName in skins)\r\n        {\r\n            if (!skins.hasOwnProperty(skinName)) continue;\r\n            var skinMap = skins[skinName];\r\n            var skin = new spine.Skin(skinName);\r\n            for (var slotName in skinMap)\r\n            {\r\n                if (!skinMap.hasOwnProperty(slotName)) continue;\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var slotEntry = skinMap[slotName];\r\n                for (var attachmentName in slotEntry)\r\n                {\r\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\r\n                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);\r\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\r\n                }\r\n            }\r\n            skeletonData.skins.push(skin);\r\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n        }\r\n\r\n        // Events.\r\n        var events = root[\"events\"];\r\n        for (var eventName in events)\r\n        {\r\n            if (!events.hasOwnProperty(eventName)) continue;\r\n            var eventMap = events[eventName];\r\n            var eventData = new spine.EventData(eventName);\r\n            eventData.intValue = eventMap[\"int\"] || 0;\r\n            eventData.floatValue = eventMap[\"float\"] || 0;\r\n            eventData.stringValue = eventMap[\"string\"] || null;\r\n            skeletonData.events.push(eventData);\r\n        }\r\n\r\n        // Animations.\r\n        var animations = root[\"animations\"];\r\n        for (var animationName in animations)\r\n        {\r\n            if (!animations.hasOwnProperty(animationName)) continue;\r\n            this.readAnimation(animationName, animations[animationName], skeletonData);\r\n        }\r\n\r\n        return skeletonData;\r\n    },\r\n    readAttachment: function (skin, name, map)\r\n    {\r\n        name = map[\"name\"] || name;\r\n\r\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\r\n        var path = map[\"path\"] || name;\r\n\r\n        var scale = this.scale;\r\n        if (type == spine.AttachmentType.region)\r\n        {\r\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n            if (!region) return null;\r\n            region.path = path;\r\n            region.x = (map[\"x\"] || 0) * scale;\r\n            region.y = (map[\"y\"] || 0) * scale;\r\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\r\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\r\n            region.rotation = map[\"rotation\"] || 0;\r\n            region.width = (map[\"width\"] || 0) * scale;\r\n            region.height = (map[\"height\"] || 0) * scale;\r\n\r\n            var color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                region.r = this.toColor(color, 0);\r\n                region.g = this.toColor(color, 1);\r\n                region.b = this.toColor(color, 2);\r\n                region.a = this.toColor(color, 3);\r\n            }\r\n\r\n            region.updateOffset();\r\n            return region;\r\n        } else if (type == spine.AttachmentType.mesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n            mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.skinnedmesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n\r\n            var uvs = this.getFloatArray(map, \"uvs\", 1);\r\n            var vertices = this.getFloatArray(map, \"vertices\", 1);\r\n            var weights = [];\r\n            var bones = [];\r\n            for (var i = 0, n = vertices.length; i < n; )\r\n            {\r\n                var boneCount = vertices[i++] | 0;\r\n                bones[bones.length] = boneCount;\r\n                for (var nn = i + boneCount * 4; i < nn; )\r\n                {\r\n                    bones[bones.length] = vertices[i];\r\n                    weights[weights.length] = vertices[i + 1] * scale;\r\n                    weights[weights.length] = vertices[i + 2] * scale;\r\n                    weights[weights.length] = vertices[i + 3];\r\n                    i += 4;\r\n                }\r\n            }\r\n            mesh.bones = bones;\r\n            mesh.weights = weights;\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = uvs;\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.boundingbox)\r\n        {\r\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n            var vertices = map[\"vertices\"];\r\n            for (var i = 0, n = vertices.length; i < n; i++)\r\n                attachment.vertices.push(vertices[i] * scale);\r\n            return attachment;\r\n        }\r\n        throw \"Unknown attachment type: \" + type;\r\n    },\r\n    readAnimation: function (name, map, skeletonData)\r\n    {\r\n        var timelines = [];\r\n        var duration = 0;\r\n\r\n        var slots = map[\"slots\"];\r\n        for (var slotName in slots)\r\n        {\r\n            if (!slots.hasOwnProperty(slotName)) continue;\r\n            var slotMap = slots[slotName];\r\n            var slotIndex = skeletonData.findSlotIndex(slotName);\r\n\r\n            for (var timelineName in slotMap)\r\n            {\r\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\r\n                var values = slotMap[timelineName];\r\n                if (timelineName == \"color\")\r\n                {\r\n                    var timeline = new spine.ColorTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var color = valueMap[\"color\"];\r\n                        var r = this.toColor(color, 0);\r\n                        var g = this.toColor(color, 1);\r\n                        var b = this.toColor(color, 2);\r\n                        var a = this.toColor(color, 3);\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\r\n\r\n                } else if (timelineName == \"attachment\")\r\n                {\r\n                    var timeline = new spine.AttachmentTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n\r\n                } else\r\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\r\n            }\r\n        }\r\n\r\n        var bones = map[\"bones\"];\r\n        for (var boneName in bones)\r\n        {\r\n            if (!bones.hasOwnProperty(boneName)) continue;\r\n            var boneIndex = skeletonData.findBoneIndex(boneName);\r\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\r\n            var boneMap = bones[boneName];\r\n\r\n            for (var timelineName in boneMap)\r\n            {\r\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\r\n                var values = boneMap[timelineName];\r\n                if (timelineName == \"rotate\")\r\n                {\r\n                    var timeline = new spine.RotateTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n\r\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\r\n                {\r\n                    var timeline;\r\n                    var timelineScale = 1;\r\n                    if (timelineName == \"scale\")\r\n                        timeline = new spine.ScaleTimeline(values.length);\r\n                    else\r\n                    {\r\n                        timeline = new spine.TranslateTimeline(values.length);\r\n                        timelineScale = this.scale;\r\n                    }\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\r\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n\r\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\r\n                {\r\n                    var x = timelineName == \"flipX\";\r\n                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var field = x ? \"x\" : \"y\";\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[field] || false);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n                } else\r\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\r\n            }\r\n        }\r\n\r\n        var ikMap = map[\"ik\"];\r\n        for (var ikConstraintName in ikMap)\r\n        {\r\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\r\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\r\n            var values = ikMap[ikConstraintName];\r\n            var timeline = new spine.IkConstraintTimeline(values.length);\r\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = values.length; i < n; i++)\r\n            {\r\n                var valueMap = values[i];\r\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\r\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\r\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\r\n                this.readCurve(timeline, frameIndex, valueMap);\r\n                frameIndex++;\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n        }\r\n\r\n        var ffd = map[\"ffd\"];\r\n        for (var skinName in ffd)\r\n        {\r\n            var skin = skeletonData.findSkin(skinName);\r\n            var slotMap = ffd[skinName];\r\n            for (slotName in slotMap)\r\n            {\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var meshMap = slotMap[slotName];\r\n                for (var meshName in meshMap)\r\n                {\r\n                    var values = meshMap[meshName];\r\n                    var timeline = new spine.FfdTimeline(values.length);\r\n                    var attachment = skin.getAttachment(slotIndex, meshName);\r\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\r\n                    timeline.slotIndex = slotIndex;\r\n                    timeline.attachment = attachment;\r\n\r\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\r\n                    var vertexCount;\r\n                    if (isMesh)\r\n                        vertexCount = attachment.vertices.length;\r\n                    else\r\n                        vertexCount = attachment.weights.length / 3 * 2;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var vertices;\r\n                        if (!valueMap[\"vertices\"])\r\n                        {\r\n                            if (isMesh)\r\n                                vertices = attachment.vertices;\r\n                            else\r\n                            {\r\n                                vertices = [];\r\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            }\r\n                        } else {\r\n                            var verticesValue = valueMap[\"vertices\"];\r\n                            vertices = [];\r\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            var start = valueMap[\"offset\"] || 0;\r\n                            var nn = verticesValue.length;\r\n                            if (this.scale == 1)\r\n                            {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii];\r\n                            } else {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\r\n                            }\r\n                            if (isMesh)\r\n                            {\r\n                                var meshVertices = attachment.vertices;\r\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\r\n                                    vertices[ii] += meshVertices[ii];\r\n                            }\r\n                        }\r\n\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines[timelines.length] = timeline;\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var drawOrderValues = map[\"drawOrder\"];\r\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\r\n        if (drawOrderValues)\r\n        {\r\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\r\n            var slotCount = skeletonData.slots.length;\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\r\n            {\r\n                var drawOrderMap = drawOrderValues[i];\r\n                var drawOrder = null;\r\n                if (drawOrderMap[\"offsets\"])\r\n                {\r\n                    drawOrder = [];\r\n                    drawOrder.length = slotCount;\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        drawOrder[ii] = -1;\r\n                    var offsets = drawOrderMap[\"offsets\"];\r\n                    var unchanged = [];\r\n                    unchanged.length = slotCount - offsets.length;\r\n                    var originalIndex = 0, unchangedIndex = 0;\r\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\r\n                    {\r\n                        var offsetMap = offsets[ii];\r\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\r\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\r\n                        // Collect unchanged items.\r\n                        while (originalIndex != slotIndex)\r\n                            unchanged[unchangedIndex++] = originalIndex++;\r\n                        // Set changed items.\r\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\r\n                    }\r\n                    // Collect remaining unchanged items.\r\n                    while (originalIndex < slotCount)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Fill in unchanged items.\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                }\r\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        var events = map[\"events\"];\r\n        if (events)\r\n        {\r\n            var timeline = new spine.EventTimeline(events.length);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = events.length; i < n; i++)\r\n            {\r\n                var eventMap = events[i];\r\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\r\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\r\n                var event = new spine.Event(eventData);\r\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\r\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\r\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\r\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\r\n    },\r\n    readCurve: function (timeline, frameIndex, valueMap)\r\n    {\r\n        var curve = valueMap[\"curve\"];\r\n        if (!curve)\r\n            timeline.curves.setLinear(frameIndex);\r\n        else if (curve == \"stepped\")\r\n            timeline.curves.setStepped(frameIndex);\r\n        else if (curve instanceof Array)\r\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\r\n    },\r\n    toColor: function (hexString, colorIndex)\r\n    {\r\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\r\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\r\n    },\r\n    getFloatArray: function (map, name, scale)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Float32Array(list.length);\r\n        var i = 0, n = list.length;\r\n        if (scale == 1)\r\n        {\r\n            for (; i < n; i++)\r\n                values[i] = list[i];\r\n        } else {\r\n            for (; i < n; i++)\r\n                values[i] = list[i] * scale;\r\n        }\r\n        return values;\r\n    },\r\n    getIntArray: function (map, name)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Uint16Array(list.length);\r\n        for (var i = 0, n = list.length; i < n; i++)\r\n            values[i] = list[i] | 0;\r\n        return values;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonJsonParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkinnedMeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.SkinnedMeshAttachment.prototype = {\r\n    type: spine.AttachmentType.skinnedmesh,\r\n    bones: null,\r\n    weights: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var skeletonBones = slot.bone.skeleton.bones;\r\n        var weights = this.weights;\r\n        var bones = this.bones;\r\n\r\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\r\n        var wx, wy, bone, vx, vy, weight;\r\n        if (!slot.attachmentVertices.length)\r\n        {\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b];\r\n                    vy = weights[b + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        } else {\r\n            var ffd = slot.attachmentVertices;\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3, f += 2)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b] + ffd[f];\r\n                    vy = weights[b + 1] + ffd[f + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.SkinnedMeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","/******************************************************************************\r\n * Spine Runtimes Software License\r\n * Version 2.1\r\n *\r\n * Copyright (c) 2013, Esoteric Software\r\n * All rights reserved.\r\n *\r\n * You are granted a perpetual, non-exclusive, non-sublicensable and\r\n * non-transferable license to install, execute and perform the Spine Runtimes\r\n * Software (the \"Software\") solely for internal use. Without the written\r\n * permission of Esoteric Software (typically granted by licensing Spine), you\r\n * may not (a) modify, translate, adapt or otherwise create derivative works,\r\n * improvements of the Software or develop new applications using the Software\r\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\r\n * trademark, patent or other intellectual property or proprietary rights\r\n * notices on or in the Software, including any copy thereof. Redistributions\r\n * in binary or source form must include this license and terms.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\r\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\r\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\r\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.AnimationStateData = require('./AnimationStateData');\r\nspine.AnimationState = require('./AnimationState');\r\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\r\nspine.Atlas = require('./Atlas');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\nspine.AttachmentTimeline = require('./AttachmentTimeline');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoneData = require('./BoneData');\r\nspine.Bone = require('./Bone');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.ColorTimeline = require('./ColorTimeline');\r\nspine.Curves = require('./Curves');\r\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\r\nspine.EventData = require('./EventData');\r\nspine.Event = require('./Event');\r\nspine.EventTimeline = require('./EventTimeline');\r\nspine.FfdTimeline = require('./FfdTimeline');\r\nspine.FlipXTimeline = require('./FlipXTimeline');\r\nspine.FlipYTimeline = require('./FlipYTimeline');\r\nspine.IkConstraintData = require('./IkConstraintData');\r\nspine.IkConstraint = require('./IkConstraint');\r\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.RotateTimeline = require('./RotateTimeline');\r\nspine.ScaleTimeline = require('./ScaleTimeline');\r\nspine.SkeletonBounds = require('./SkeletonBounds');\r\nspine.SkeletonData = require('./SkeletonData');\r\nspine.Skeleton = require('./Skeleton');\r\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\r\nspine.Skin = require('./Skin.js');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.SlotData = require('./SlotData');\r\nspine.Slot = require('./Slot');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.TranslateTimeline = require('./TranslateTimeline');\r\nmodule.exports = spine;\r\n","module.exports = {\r\n    radDeg: 180 / Math.PI,\r\n    degRad: Math.PI / 180,\r\n    temp: [],\r\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\r\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array\r\n};\r\n\r\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            var bone = slot.bone;\n\n            slotContainer.position.x = bone.worldX + attachment.x * bone.m00 + attachment.y * bone.m01;\n            slotContainer.position.y = bone.worldY + attachment.x * bone.m10 + attachment.y * bone.m11;\n            slotContainer.scale.x = bone.worldScaleX;\n            slotContainer.scale.y = bone.worldScaleY;\n            slotContainer.rotation = -(slot.bone.worldRotation * spine.degRad);\n            if (bone.worldFlipX) {\n                slotContainer.scale.x = -slotContainer.scale.x;\n                slotContainer.rotation = -slotContainer.rotation;\n            }\n            if (bone.worldFlipY == spine.Bone.yDown) {\n                slotContainer.scale.y = -slotContainer.scale.y;\n                slotContainer.rotation = -slotContainer.rotation;\n            }\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    this.lastTime = this.lastTime || Date.now();\n    var timeDelta = (Date.now() - this.lastTime) * 0.001;\n    this.lastTime = Date.now();\n\n    this.update(timeDelta);\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var spriteRect = new PIXI.Rectangle(descriptor.x,\n                                        descriptor.y,\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n    var sprite = new PIXI.Sprite(spriteTexture);\n\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n    sprite.scale.x = attachment.width / descriptor.originalWidth * attachment.scaleX;\n    sprite.scale.y = attachment.height / descriptor.originalHeight * attachment.scaleY;\n    sprite.rotation = baseRotation - (attachment.rotation * spine.degRad);\n    sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n    sprite.anchor.y = (0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height;\n    sprite.alpha = attachment.a;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\n    async = PIXI.utils.async,\n    spine = require('../SpineRuntime');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            // create a spine atlas using the loaded text\n            var spineAtlas = new spine.Atlas(this.xhr.responseText, baseUrl, res.crossOrigin);\n\n            // spine animation\n            var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n            var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n            resource.spineData = skeletonData;\n            resource.spineAtlas = spineAtlas;\n            if (atlasParser.enableCaching)\n                atlasParser.AnimCache[resource.name] = resource.spineData;\n\n            // Go through each spineAtlas.pages and wait for page.rendererObject (a baseTexture) to\n            // load. Once all loaded, then call the next function.\n            async.each(spineAtlas.pages, function (page, done) {\n                if (page.rendererObject.hasLoaded) {\n                    done();\n                }\n                else {\n                    page.rendererObject.once('loaded', done);\n                }\n            }, next);\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n","module.exports = {\n    atlasParser: require('./atlasParser'),\n    Loader: require('./Loader')\n};\n"],"sourceRoot":"./"}