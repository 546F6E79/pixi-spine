{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/FlipXTimeline.js","src/SpineRuntime/FlipYTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/SkinnedMeshAttachment.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/imageLoaderAdapter.js","src/loaders/index.js","src/loaders/syncImageLoaderAdapter.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","syncImageLoaderAdapter","Atlas","atlasText","loaderFunction","callback","iterateParser","line","reader","readLine","self","trim","page","readTuple","tuple","width","parseInt","height","format","Format","minFilter","TextureFilter","magFilter","direction","readValue","uWrap","TextureWrap","clampToEdge","vWrap","repeat","texture","rendererObject","pages","console","log","region","rotate","x","y","v","u2","v2","resolution","abs","splits","pads","originalWidth","originalHeight","offsetX","offsetY","regions","baseUrl","crossOrigin","texturesLoading","findRegion","dispose","destroy","updateUVs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","../loaders/syncImageLoaderAdapter.js","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","SkinnedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","regionU","regionV","regionU2","regionV2","regionRotate","newSkinnedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./SkinnedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","skinnedmesh","weightedmesh",12,"Bone","boneData","parent","matrix","Matrix","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","worldSignX","worldSignY","updateWorldTransform","cos","degRad","sin","la","lb","lc","ld","m","c","b","d","tx","ty","signum","pa","pb","pc","pd","inheritRotation","inheritScale","temp","radDeg","psx","psy","za","zb","zc","zd","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY","getWorldRotationX","atan2","getWorldRotationY","getWorldScaleX","sqrt","getWorldScaleY","Object","defineProperties","worldX","get","worldY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","m00","m01","m10","m11","px","py","./AttachmentType",15,"ColorTimeline","g","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline","frame",21,"FfdTimeline","frameVertices","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"FlipXTimeline","boneIndex","flip","bones",23,"FlipYTimeline",24,"IkConstraint","bendDirection","findBone","apply1","apply2","targetX","targetY","parentRotation","child","bendDir","offset1","offset2","sign2","csx","cy","pp","ppm","wx","wy","a1","a2","l1","l2","outer","acos","ta","aa","bb","ll","dd","c0","c1","c2","q","r0","r1","minAngle","minDist","Infinity","minX","minY","maxAngle","maxDist","maxX","maxY","dist","PI","angle","offset",25,"IkConstraintData",26,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",27,"uvs","regionUVs","triangles","hullLength","edges","Float32Array","verticesCount","vx","vy",28,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","radians","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",29,"RotateTimeline","amount","prevFrameValue",30,"ScaleTimeline","prevFrameX","prevFrameY",31,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",32,"SkeletonBounds","polygonPool","polygons","boundingBoxes","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","x1","y1","x2","y2","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x3","y3","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",33,"SkeletonData","skins","animations","version","hash","findEvent","eventName",34,"SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","field","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./FlipXTimeline","./FlipYTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",35,"attachments","oldSkin",36,"weight","skeletonBones","w",37,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",38,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",39,40,41,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",42,43,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","SlotContainerUpdateTransformV3","pt","worldTransform","wt","lt","localTransform","worldAlpha","_currentBounds","atlasParser","fromAtlas","resourceName","AnimCache","create","constructor","globalAutoUpdate","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","transform","_dirtyLocal","TransformStatic","_dirtyParentVersion","_versionLocal","copy","displayObjectUpdateTransform","tint","utils","rgb2hex","meshes","Date","now","timeDelta","descriptor","baseTexture","spriteRect","Rectangle","spriteTexture","Texture","Sprite","baseRotation","anchor","position","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",44,"Loader","addPixiMiddleware","loader","use","./atlasParser",45,"Resource","imageLoaderAdapter","resource","isJson","atlasPath","url","lastIndexOf","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","metadata","spineMetadata","imageOptions","imageMetadata","adapter","add","res","xhr","responseText","spineAtlas","spineJsonParser","enableCaching","./imageLoaderAdapter",46,"namePrefix",47,"./Loader","./syncImageLoaderAdapter",48,"BaseTexture","fromImage"],"mappings":"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","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n",null,"var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\nvar syncImageLoaderAdapter = require('../loaders/syncImageLoaderAdapter.js')\r\n\r\nspine.Atlas = function (atlasText, loaderFunction, callback)\r\n{\r\n    //TODO: remove this legacy later\r\n    if (typeof loaderFunction !== \"function\") {\r\n        //old syntax\r\n        var baseUrl = loaderFunction;\r\n        var crossOrigin = callback;\r\n        loaderFunction = syncImageLoaderAdapter(baseUrl, crossOrigin);\r\n        callback = null;\r\n    }\r\n\r\n    this.pages = [];\r\n    this.regions = [];\r\n\r\n    this.texturesLoading = 0;\r\n\r\n    var self = this;\r\n\r\n    var reader = new spine.AtlasReader(atlasText);\r\n    var tuple = [];\r\n    tuple.length = 4;\r\n    var page = null;\r\n\r\n    iterateParser();\r\n\r\n    function iterateParser() {\r\n        while (true) {\r\n            var line = reader.readLine();\r\n            if (line === null) {\r\n                return callback && callback(self);\r\n            }\r\n            line = reader.trim(line);\r\n            if (!line.length)\r\n                page = null;\r\n            else if (!page) {\r\n                page = new spine.AtlasPage();\r\n                page.name = line;\r\n\r\n                if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\r\n                    page.width = parseInt(tuple[0]);\r\n                    page.height = parseInt(tuple[1]);\r\n                    reader.readTuple(tuple);\r\n                } else {\r\n                    //old format, detect width and height by texture\r\n                }\r\n                page.format = spine.Atlas.Format[tuple[0]];\r\n\r\n                reader.readTuple(tuple);\r\n                page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\r\n                page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\r\n\r\n                var direction = reader.readValue();\r\n                page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                if (direction == \"x\")\r\n                    page.uWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"y\")\r\n                    page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"xy\")\r\n                    page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n\r\n                // @ivanpopelyshev: I so want to use generators and \"yield()\" here, or at least promises\r\n                loaderFunction(line, function (texture) {\r\n                    page.rendererObject = texture;\r\n                    self.pages.push(page);\r\n                    if (!page.width || !page.height) {\r\n                        page.width = texture.width;\r\n                        page.height = texture.height;\r\n                        if (!page.width || !page.height) {\r\n                            console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\r\n                        }\r\n                    }\r\n                    iterateParser();\r\n                });\r\n                break;\r\n            } else {\r\n                var region = new spine.AtlasRegion();\r\n                region.name = line;\r\n                region.page = page;\r\n\r\n                region.rotate = reader.readValue() == \"true\";\r\n\r\n                reader.readTuple(tuple);\r\n                var x = parseInt(tuple[0]);\r\n                var y = parseInt(tuple[1]);\r\n\r\n                reader.readTuple(tuple);\r\n                var width = parseInt(tuple[0]);\r\n                var height = parseInt(tuple[1]);\r\n\r\n                region.u = x / page.width;\r\n                region.v = y / page.height;\r\n                if (region.rotate) {\r\n                    region.u2 = (x + height) / page.width;\r\n                    region.v2 = (y + width) / page.height;\r\n                } else {\r\n                    region.u2 = (x + width) / page.width;\r\n                    region.v2 = (y + height) / page.height;\r\n                }\r\n                //detected resolution\r\n                var resolution = page.rendererObject.resolution;\r\n                region.x = x / resolution;\r\n                region.y = y / resolution;\r\n                region.width = Math.abs(width) / resolution;\r\n                region.height = Math.abs(height) / resolution;\r\n\r\n                if (reader.readTuple(tuple) == 4) { // split is optional\r\n                    region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                    if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\r\n                        region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                        reader.readTuple(tuple);\r\n                    }\r\n                }\r\n\r\n                region.originalWidth = parseInt(tuple[0]) / resolution;\r\n                region.originalHeight = parseInt(tuple[1]) / resolution;\r\n\r\n                reader.readTuple(tuple);\r\n                region.offsetX = parseInt(tuple[0]) / resolution;\r\n                region.offsetY = parseInt(tuple[1]) / resolution;\r\n\r\n                region.index = parseInt(reader.readValue());\r\n\r\n                self.regions.push(region);\r\n            }\r\n        }\r\n    }\r\n};\r\nspine.Atlas.prototype = {\r\n    findRegion: function (name)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n            if (regions[i].name == name) return regions[i];\r\n        return null;\r\n    },\r\n    dispose: function ()\r\n    {\r\n        var pages = this.pages;\r\n        for (var i = 0, n = pages.length; i < n; i++)\r\n            pages[i].rendererObject.destroy(true);\r\n    },\r\n    updateUVs: function (page)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n        {\r\n            var region = regions[i];\r\n            if (region.page != page) continue;\r\n            region.u = region.x / page.width;\r\n            region.v = region.y / page.height;\r\n            if (region.rotate)\r\n            {\r\n                region.u2 = (region.x + region.height) / page.width;\r\n                region.v2 = (region.y + region.width) / page.height;\r\n            } else {\r\n                region.u2 = (region.x + region.width) / page.width;\r\n                region.v2 = (region.y + region.height) / page.height;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nspine.Atlas.Format = {\r\n    alpha: 0,\r\n    intensity: 1,\r\n    luminanceAlpha: 2,\r\n    rgb565: 3,\r\n    rgba4444: 4,\r\n    rgb888: 5,\r\n    rgba8888: 6\r\n};\r\n\r\nspine.Atlas.TextureFilter = {\r\n    nearest: 0,\r\n    linear: 1,\r\n    mipMap: 2,\r\n    mipMapNearestNearest: 3,\r\n    mipMapLinearNearest: 4,\r\n    mipMapNearestLinear: 5,\r\n    mipMapLinearLinear: 6\r\n};\r\n\r\nspine.Atlas.TextureWrap = {\r\n    mirroredRepeat: 0,\r\n    clampToEdge: 1,\r\n    repeat: 2\r\n};\r\nmodule.exports = spine.Atlas;\r\n","var spine = require('../SpineUtil');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.AtlasAttachmentParser = function (atlas)\r\n{\r\n    this.atlas = atlas;\r\n};\r\nspine.AtlasAttachmentParser.prototype = {\r\n    newRegionAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\r\n        var attachment = new spine.RegionAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.MeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newSkinnedMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.SkinnedMeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newBoundingBoxAttachment: function (skin, name)\r\n    {\r\n        return new spine.BoundingBoxAttachment(name);\r\n    }\r\n};\r\nmodule.exports = spine.AtlasAttachmentParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasRegion = function ()\r\n{};\r\nspine.AtlasRegion.prototype = {\r\n    page: null,\r\n    name: null,\r\n    x: 0, y: 0,\r\n    width: 0, height: 0,\r\n    u: 0, v: 0, u2: 0, v2: 0,\r\n    offsetX: 0, offsetY: 0,\r\n    originalWidth: 0, originalHeight: 0,\r\n    index: 0,\r\n    rotate: false,\r\n    splits: null,\r\n    pads: null\r\n};\r\nmodule.exports = spine.AtlasRegion;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = {\r\n    region: 0,\r\n    boundingbox: 1,\r\n    mesh: 2,\r\n    skinnedmesh: 3,\r\n    weightedmesh : 4\r\n};\r\nmodule.exports = spine.AttachmentType;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Bone = function (boneData, skeleton, parent)\n{\n    this.data = boneData;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.matrix = new PIXI.Matrix();\n    this.setToSetupPose();\n};\nspine.Bone.yDown = false;\nspine.Bone.prototype = {\n    x: 0, y: 0,\n    rotation: 0, rotationIK: 0,\n    scaleX: 1, scaleY: 1,\n    flipX: false, flipY: false,\n\n    worldSignX: 1, worldSignY: 1,\n    updateWorldTransform: function() {\n        var rotation = this.rotationIK;\n        var scaleX = this.scaleX;\n        var scaleY = this.scaleY;\n        var x = this.x;\n        var y = this.y;\n\n        var cos = Math.cos(rotation * spine.degRad), sin = Math.sin(rotation * spine.degRad);\n        var la = cos * scaleX, lb = -sin * scaleY, lc = sin * scaleX, ld = cos * scaleY;\n        var parent = this.parent;\n        var m = this.matrix;\n        var skeleton = this.skeleton;\n        if (!parent) { // Root bone.\n            if (skeleton.flipX) {\n                x = -x;\n                la = -la;\n                lb = -lb;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                y = -y;\n                lc = -lc;\n                ld = -ld;\n            }\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n            m.tx = x;\n            m.ty = y;\n            this.worldSignX = spine.signum(scaleX);\n            this.worldSignY = spine.signum(scaleY);\n            return;\n        }\n\n\n        var pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n        m.tx = pa * x + pb * y + parent.matrix.tx;\n        m.ty = pc * x + pd * y + parent.matrix.ty;\n        this.worldSignX = parent.worldSignX * spine.signum(scaleX);\n        this.worldSignY = parent.worldSignY * spine.signum(scaleY);\n        var data = this.data;\n\n        if (data.inheritRotation && data.inheritScale) {\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n        } else if (data.inheritRotation) { // No scale inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                cos = Math.cos(parent.rotationIK * spine.degRad);\n                sin = Math.sin(parent.rotationIK * spine.degRad);\n                var temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritRotation) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else if (data.inheritScale) { // No rotation inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                var r = parent.rotation;\n                cos = Math.cos(r * spine.radDeg);\n                sin = Math.sin(r * spine.radDeg);\n                var psx = parent.scaleX, psy = parent.scaleY;\n                var za = cos * psx, zb = -sin * psy, zc = sin * psx, zd = cos * psy;\n                temp = pa * za + pb * zc;\n                pb = pa * zb + pb * zd;\n                pa = temp;\n                temp = pc * za + pd * zc;\n                pd = pc * zb + pd * zd;\n                pc = temp;\n\n                if (psx < 0) {\n                    r = -r;\n                    sin = -sin;\n                }\n                temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritScale) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else {\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n        }\n    },\n\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.rotationIK = this.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n        this.flipX = data.flipX;\n        this.flipY = data.flipY;\n    },\n    worldToLocal: function (world)\n    {\n        var m = this.matrix;\n        var dx = world[0] - m.tx, dy = m.ty;\n        var invDet = 1 / (m.a * m.d - m.b * m.c);\n        //Yep, its a bug in original spine. I hope they'll fix it: https://github.com/EsotericSoftware/spine-runtimes/issues/544\n        world[0] = dx * m.a * invDet - dy * m.c * invDet;\n        world[1] = dy * m.d * invDet - dx * m.b * invDet;\n    },\n    localToWorld: function (local)\n    {\n        var localX = local[0], localY = local[1];\n        var m = this.matrix;\n        local[0] = localX * m.a + localY * m.c + m.tx;\n        local[1] = localX * m.b + localY * m.d + m.ty;\n    },\n    getWorldRotationX: function() {\n        return Math.atan2(this.matrix.b, this.matrix.a) * spine.radDeg;\n\n    },\n    getWorldRotationY: function() {\n        return Math.atan2(this.matrix.d, this.matrix.c) * spine.radDeg;\n    },\n    getWorldScaleX: function() {\n        var a = this.matrix.a;\n        var b = this.matrix.b;\n        return Math.sqrt(a*a+b*b);\n    },\n    getWorldScaleY: function() {\n        var c = this.matrix.c;\n        var d = this.matrix.d;\n        return Math.sqrt(c * c + d * d);\n    }\n};\n\nObject.defineProperties(spine.Bone.prototype, {\n    worldX: {\n        get: function() {\n            return this.matrix.tx;\n        }\n    },\n    worldY:  {\n        get: function() {\n            return this.matrix.ty;\n        }\n    }\n});\n\nmodule.exports = spine.Bone;\n","var spine = require('../SpineUtil');\r\nspine.BoneData = function (name, parent)\r\n{\r\n    this.name = name;\r\n    this.parent = parent;\r\n};\r\nspine.BoneData.prototype = {\r\n    length: 0,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    inheritScale: true,\r\n    inheritRotation: true,\r\n    flipX: false, flipY: false\r\n};\r\nmodule.exports = spine.BoneData;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoundingBoxAttachment = function (name)\n{\n    this.name = name;\n    this.vertices = [];\n};\nspine.BoundingBoxAttachment.prototype = {\n    type: spine.AttachmentType.boundingbox,\n    computeWorldVertices: function (x, y, bone, worldVertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.a, m01 = bone.c, m10 = bone.b, m11 = bone.d;\n        var vertices = this.vertices;\n        for (var i = 0, n = vertices.length; i < n; i += 2)\n        {\n            var px = vertices[i];\n            var py = vertices[i + 1];\n            worldVertices[i] = px * m00 + py * m01 + x;\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\n        }\n    }\n};\nmodule.exports = spine.BoundingBoxAttachment;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        if (slot.attachment != this.attachment) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipXTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipXTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipXTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipYTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipYTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipYTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = bone.parent ? bone.parent.getWorldRotationX(): 0;\n    var rotation = bone.rotation;\n    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;\n    if ((bone.worldSignX != bone.worldSignY) != (bone.skeleton.flipX != (bone.skeleton.flipY != spine.Bone.yDown))) rotationIK = 360 - rotationIK;\n    if (rotationIK > 180)\n        rotationIK -= 360;\n    else if (rotationIK < -180) rotationIK += 360;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDir, alpha)\n{\n    if (alpha == 0) return;\n    var px = parent.x, py = parent.y, psx = parent.scaleX, psy = parent.scaleY, csx = child.scaleX, cy = child.y;\n    var offset1, offset2, sign2;\n    if (psx < 0) {\n        psx = -psx;\n        offset1 = 180;\n        sign2 = -1;\n    } else {\n        offset1 = 0;\n        sign2 = 1;\n    }\n    if (psy < 0) {\n        psy = -psy;\n        sign2 = -sign2;\n    }\n    if (csx < 0) {\n        csx = -csx;\n        offset2 = 180;\n    } else\n        offset2 = 0;\n    var pp = parent.parent;\n    var ppm = pp.matrix;\n    var tx, ty, dx, dy;\n    if (pp == null) {\n        tx = targetX - px;\n        ty = targetY - py;\n        dx = child.worldX - px;\n        dy = child.worldY - py;\n    } else {\n        var a = ppm.a, b = ppm.c, c = ppm.b, d = ppm.d, invDet = 1 / (a * d - b * c);\n        var wx = ppm.tx, wy = ppm.ty, x = targetX - wx, y = targetY - wy;\n        tx = (x * d - y * b) * invDet - px;\n        ty = (y * a - x * c) * invDet - py;\n        x = child.worldX - wx;\n        y = child.worldY - wy;\n        dx = (x * d - y * b) * invDet - px;\n        dy = (y * a - x * c) * invDet - py;\n    }\n    var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n    outer:\n        if (Math.abs(psx - psy) <= 0.0001) {\n            l2 *= psx;\n            var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1)\n                cos = -1;\n            else if (cos > 1) cos = 1;\n            a2 = Math.acos(cos) * bendDir;\n            var a = l1 + l2 * cos, o = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * o, tx * a + ty * o);\n        } else {\n            cy = 0;\n            var a = psx * l2, b = psy * l2, ta = Math.atan2(ty, tx);\n            var aa = a * a, bb = b * b, ll = l1 * l1, dd = tx * tx + ty * ty;\n            var c0 = bb * ll + aa * dd - aa * bb, c1 = -2 * bb * l1, c2 = bb - aa;\n            var d = c1 * c1 - 4 * c2 * c0;\n            if (d >= 0) {\n                var q = Math.sqrt(d);\n                if (c1 < 0) q = -q;\n                q = -(c1 + q) / 2;\n                var r0 = q / c2, r1 = c0 / q;\n                var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                if (r * r <= dd) {\n                    var y = Math.sqrt(dd - r * r) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            var minAngle = 0, minDist = Infinity, minX = 0, minY = 0;\n            var maxAngle = 0, maxDist = 0, maxX = 0, maxY = 0;\n            var x = l1 + a, dist = x * x;\n            if (dist > maxDist) {\n                maxAngle = 0;\n                maxDist = dist;\n                maxX = x;\n            }\n            x = l1 - a;\n            dist = x * x;\n            if (dist < minDist) {\n                minAngle = PI;\n                minDist = dist;\n                minX = x;\n            }\n            var angle = Math.acos(-a * l1 / (aa - bb));\n            x = a * Math.cos(angle) + l1;\n            var y = b * Math.sin(angle);\n            dist = x * x + y * y;\n            if (dist < minDist) {\n                minAngle = angle;\n                minDist = dist;\n                minX = x;\n                minY = y;\n            }\n            if (dist > maxDist) {\n                maxAngle = angle;\n                maxDist = dist;\n                maxX = x;\n                maxY = y;\n            }\n            if (dd <= (minDist + maxDist) / 2) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            } else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n    var offset = Math.atan2(cy, child.x) * sign2;\n    a1 = (a1 - offset) * spine.radDeg + offset1;\n    a2 = (a2 + offset) * spine.radDeg * sign2 + offset2;\n    if (a1 > 180)\n        a1 -= 360;\n    else if (a1 < -180) a1 += 360;\n    if (a2 > 180)\n        a2 -= 360;\n    else if (a2 < -180) a2 += 360;\n    var rotation = parent.rotation;\n    parent.rotationIK = rotation + (a1 - rotation) * alpha;\n    rotation = child.rotation;\n    child.rotationIK = rotation + (a2 - rotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.MeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.MeshAttachment.prototype = {\n    type: spine.AttachmentType.mesh,\n    vertices: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function ()\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var bone = slot.bone;\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var vertices = this.vertices;\n        var verticesCount = vertices.length;\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\n        for (var i = 0; i < verticesCount; i += 2)\n        {\n            var vx = vertices[i];\n            var vy = vertices[i + 1];\n            worldVertices[i] = vx * m00 + vy * m01 + x;\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\n        }\n    }\n};\nmodule.exports = spine.MeshAttachment;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.RegionAttachment = function (name)\n{\n    this.name = name;\n    this.offset = [];\n    this.offset.length = 8;\n    this.uvs = [];\n    this.uvs.length = 8;\n};\nspine.RegionAttachment.prototype = {\n    type: spine.AttachmentType.region,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    width: 0, height: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    setUVs: function (u, v, u2, v2, rotate)\n    {\n        var uvs = this.uvs;\n        if (rotate)\n        {\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v2;\n            uvs[4/*X3*/] = u;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v;\n            uvs[0/*X1*/] = u2;\n            uvs[1/*Y1*/] = v2;\n        } else {\n            uvs[0/*X1*/] = u;\n            uvs[1/*Y1*/] = v2;\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v;\n            uvs[4/*X3*/] = u2;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v2;\n        }\n    },\n    updateOffset: function ()\n    {\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\n        var localX2 = localX + this.regionWidth * regionScaleX;\n        var localY2 = localY + this.regionHeight * regionScaleY;\n        var radians = this.rotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        var localXCos = localX * cos + this.x;\n        var localXSin = localX * sin;\n        var localYCos = localY * cos + this.y;\n        var localYSin = localY * sin;\n        var localX2Cos = localX2 * cos + this.x;\n        var localX2Sin = localX2 * sin;\n        var localY2Cos = localY2 * cos + this.y;\n        var localY2Sin = localY2 * sin;\n        var offset = this.offset;\n        offset[0/*X1*/] = localXCos - localYSin;\n        offset[1/*Y1*/] = localYCos + localXSin;\n        offset[2/*X2*/] = localXCos - localY2Sin;\n        offset[3/*Y2*/] = localY2Cos + localXSin;\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\n        offset[6/*X4*/] = localX2Cos - localYSin;\n        offset[7/*Y4*/] = localYCos + localX2Sin;\n    },\n    computeVertices: function (x, y, bone, vertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var offset = this.offset;\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\n    }\n};\nmodule.exports = spine.RegionAttachment;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Bone = require('./Bone');\nspine.Slot = require('./Slot');\nspine.IkConstraint = require('./IkConstraint');\nspine.Skeleton = function (skeletonData)\n{\n    this.data = skeletonData;\n\n    this.bones = [];\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\n    {\n        var boneData = skeletonData.bones[i];\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\n        this.bones.push(new spine.Bone(boneData, this, parent));\n    }\n\n    this.slots = [];\n    this.drawOrder = [];\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\n    {\n        var slotData = skeletonData.slots[i];\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\n        var slot = new spine.Slot(slotData, bone);\n        this.slots.push(slot);\n        this.drawOrder.push(i);\n    }\n\n    this.ikConstraints = [];\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\n\n    this.boneCache = [];\n    this.updateCache();\n};\nspine.Skeleton.prototype = {\n    x: 0, y: 0,\n    skin: null,\n    r: 1, g: 1, b: 1, a: 1,\n    time: 0,\n    flipX: false, flipY: false,\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\n    updateCache: function ()\n    {\n        var ikConstraints = this.ikConstraints;\n        var ikConstraintsCount = ikConstraints.length;\n\n        var arrayCount = ikConstraintsCount + 1;\n        var boneCache = this.boneCache;\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\n        for (var i = 0, n = boneCache.length; i < n; i++)\n            boneCache[i].length = 0;\n        while (boneCache.length < arrayCount)\n            boneCache[boneCache.length] = [];\n\n        var nonIkBones = boneCache[0];\n        var bones = this.bones;\n\n        outer:\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            var current = bone;\n            do {\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\n                {\n                    var ikConstraint = ikConstraints[ii];\n                    var parent = ikConstraint.bones[0];\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\n                    while (true)\n                    {\n                        if (current == child)\n                        {\n                            boneCache[ii].push(bone);\n                            boneCache[ii + 1].push(bone);\n                            continue outer;\n                        }\n                        if (child == parent) break;\n                        child = child.parent;\n                    }\n                }\n                current = current.parent;\n            } while (current);\n            nonIkBones[nonIkBones.length] = bone;\n        }\n    },\n    /** Updates the world transform for each bone. */\n    updateWorldTransform: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            bone.rotationIK = bone.rotation;\n        }\n        var i = 0, last = this.boneCache.length - 1;\n        while (true)\n        {\n            var cacheBones = this.boneCache[i];\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\n                cacheBones[ii].updateWorldTransform();\n            if (i == last) break;\n            this.ikConstraints[i].apply();\n            i++;\n        }\n    },\n    /** Sets the bones and slots to their setup pose values. */\n    setToSetupPose: function ()\n    {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    },\n    setBonesToSetupPose: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n        {\n            var ikConstraint = ikConstraints[i];\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\n            ikConstraint.mix = ikConstraint.data.mix;\n        }\n    },\n    setSlotsToSetupPose: function ()\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            slots[i].setToSetupPose(i);\n        }\n\n        this.resetDrawOrder();\n    },\n    /** @return May return null. */\n    getRootBone: function ()\n    {\n        return this.bones.length ? this.bones[0] : null;\n    },\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return slots[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    },\n    setSkinByName: function (skinName)\n    {\n        var skin = this.data.findSkin(skinName);\n        if (!skin) throw \"Skin not found: \" + skinName;\n        this.setSkin(skin);\n    },\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\n     * @param newSkin May be null. */\n    setSkin: function (newSkin)\n    {\n        if (newSkin)\n        {\n            if (this.skin)\n                newSkin._attachAll(this, this.skin);\n            else\n            {\n                var slots = this.slots;\n                for (var i = 0, n = slots.length; i < n; i++)\n                {\n                    var slot = slots[i];\n                    var name = slot.data.attachmentName;\n                    if (name)\n                    {\n                        var attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n    },\n    /** @return May be null. */\n    getAttachmentBySlotName: function (slotName, attachmentName)\n    {\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\n    },\n    /** @return May be null. */\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\n    {\n        if (this.skin)\n        {\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    },\n    /** @param attachmentName May be null. */\n    setAttachment: function (slotName, attachmentName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slot = slots[i];\n            if (slot.data.name == slotName)\n            {\n                var attachment = null;\n                if (attachmentName)\n                {\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw \"Slot not found: \" + slotName;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\n        return null;\n    },\n    update: function (delta)\n    {\n        this.time += delta;\n    },\n    resetDrawOrder: function () {\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\n        {\n            this.drawOrder[i] = i;\n        }\n    }\n};\nmodule.exports = spine.Skeleton;\n\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\nspine.SkeletonData = require('./SkeletonData');\nspine.BoneData = require('./BoneData');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.SlotData = require('./SlotData');\nspine.Skin = require('./Skin');\nspine.EventData = require('./EventData');\nspine.AttachmentType = require('./AttachmentType');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.TranslateTimeline = require('./TranslateTimeline');\nspine.FlipXTimeline = require('./FlipXTimeline');\nspine.FlipYTimeline = require('./FlipYTimeline');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventTimeline = require('./EventTimeline');\nspine.Event = require('./Event');\nspine.Animation = require('./Animation');\nspine.SkeletonJsonParser = function (attachmentLoader)\n{\n    this.attachmentLoader = attachmentLoader;\n};\nspine.SkeletonJsonParser.prototype = {\n    scale: 1,\n    readSkeletonData: function (root, name)\n    {\n        var skeletonData = new spine.SkeletonData();\n        skeletonData.name = name;\n\n        // Skeleton.\n        var skeletonMap = root[\"skeleton\"];\n        if (skeletonMap)\n        {\n            skeletonData.hash = skeletonMap[\"hash\"];\n            skeletonData.version = skeletonMap[\"spine\"];\n            skeletonData.width = skeletonMap[\"width\"] || 0;\n            skeletonData.height = skeletonMap[\"height\"] || 0;\n        }\n\n        // Bones.\n        var bones = root[\"bones\"];\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var boneMap = bones[i];\n            var parent = null;\n            if (boneMap[\"parent\"])\n            {\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\n            }\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\n            boneData.flipX = boneMap.hasOwnProperty(\"flipX\") ? boneMap[\"flipX\"] : false;\n            boneData.flipY = boneMap.hasOwnProperty(\"flipY\") ? boneMap[\"flipY\"] : false;\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\n            skeletonData.bones.push(boneData);\n        }\n\n        // IK constraints.\n        var ik = root[\"ik\"];\n        if (ik)\n        {\n            for (var i = 0, n = ik.length; i < n; i++)\n            {\n                var ikMap = ik[i];\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\n\n                var bones = ikMap[\"bones\"];\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\n                {\n                    var bone = skeletonData.findBone(bones[ii]);\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\n                    ikConstraintData.bones.push(bone);\n                }\n\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\n\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\n\n                skeletonData.ikConstraints.push(ikConstraintData);\n            }\n        }\n\n        // Slots.\n        var slots = root[\"slots\"];\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slotMap = slots[i];\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\n\n            var color = slotMap[\"color\"];\n            if (color)\n            {\n                slotData.r = this.toColor(color, 0);\n                slotData.g = this.toColor(color, 1);\n                slotData.b = this.toColor(color, 2);\n                slotData.a = this.toColor(color, 3);\n            }\n\n            slotData.attachmentName = slotMap[\"attachment\"];\n\n\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\n\n            skeletonData.slots.push(slotData);\n        }\n\n        // Skins.\n        var skins = root[\"skins\"];\n        for (var skinName in skins)\n        {\n            if (!skins.hasOwnProperty(skinName)) continue;\n            var skinMap = skins[skinName];\n            var skin = new spine.Skin(skinName);\n            for (var slotName in skinMap)\n            {\n                if (!skinMap.hasOwnProperty(slotName)) continue;\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var slotEntry = skinMap[slotName];\n                for (var attachmentName in slotEntry)\n                {\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\n                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\n                }\n            }\n            skeletonData.skins.push(skin);\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n        }\n\n        // Events.\n        var events = root[\"events\"];\n        for (var eventName in events)\n        {\n            if (!events.hasOwnProperty(eventName)) continue;\n            var eventMap = events[eventName];\n            var eventData = new spine.EventData(eventName);\n            eventData.intValue = eventMap[\"int\"] || 0;\n            eventData.floatValue = eventMap[\"float\"] || 0;\n            eventData.stringValue = eventMap[\"string\"] || null;\n            skeletonData.events.push(eventData);\n        }\n\n        // Animations.\n        var animations = root[\"animations\"];\n        for (var animationName in animations)\n        {\n            if (!animations.hasOwnProperty(animationName)) continue;\n            this.readAnimation(animationName, animations[animationName], skeletonData);\n        }\n\n        return skeletonData;\n    },\n    readAttachment: function (skin, name, map)\n    {\n        name = map[\"name\"] || name;\n\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\n        var path = map[\"path\"] || name;\n\n        var scale = this.scale;\n        if (type == spine.AttachmentType.region)\n        {\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n            if (!region) return null;\n            region.path = path;\n            region.x = (map[\"x\"] || 0) * scale;\n            region.y = (map[\"y\"] || 0) * scale;\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\n            region.rotation = map[\"rotation\"] || 0;\n            region.width = (map[\"width\"] || 0) * scale;\n            region.height = (map[\"height\"] || 0) * scale;\n\n            var color = map[\"color\"];\n            if (color)\n            {\n                region.r = this.toColor(color, 0);\n                region.g = this.toColor(color, 1);\n                region.b = this.toColor(color, 2);\n                region.a = this.toColor(color, 3);\n            }\n\n            region.updateOffset();\n            return region;\n        } else if (type == spine.AttachmentType.mesh)\n        {\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\n            mesh.triangles = this.getIntArray(map, \"triangles\");\n            mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\n            mesh.updateUVs();\n\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n            return mesh;\n        } else if (type == spine.AttachmentType.skinnedmesh || type == spine.AttachmentType.weightedmesh)\n        {\n            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n\n            var uvs = this.getFloatArray(map, \"uvs\", 1);\n            var vertices = this.getFloatArray(map, \"vertices\", 1);\n            var weights = [];\n            var bones = [];\n            for (var i = 0, n = vertices.length; i < n; )\n            {\n                var boneCount = vertices[i++] | 0;\n                bones[bones.length] = boneCount;\n                for (var nn = i + boneCount * 4; i < nn; )\n                {\n                    bones[bones.length] = vertices[i];\n                    weights[weights.length] = vertices[i + 1] * scale;\n                    weights[weights.length] = vertices[i + 2] * scale;\n                    weights[weights.length] = vertices[i + 3];\n                    i += 4;\n                }\n            }\n            mesh.bones = bones;\n            mesh.weights = weights;\n            mesh.triangles = this.getIntArray(map, \"triangles\");\n            mesh.regionUVs = uvs;\n            mesh.updateUVs();\n\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n            return mesh;\n        } else if (type == spine.AttachmentType.boundingbox)\n        {\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n            var vertices = map[\"vertices\"];\n            for (var i = 0, n = vertices.length; i < n; i++)\n                attachment.vertices.push(vertices[i] * scale);\n            return attachment;\n        }\n        throw \"Unknown attachment type: \" + type;\n    },\n    readAnimation: function (name, map, skeletonData)\n    {\n        var timelines = [];\n        var duration = 0;\n\n        var slots = map[\"slots\"];\n        for (var slotName in slots)\n        {\n            if (!slots.hasOwnProperty(slotName)) continue;\n            var slotMap = slots[slotName];\n            var slotIndex = skeletonData.findSlotIndex(slotName);\n\n            for (var timelineName in slotMap)\n            {\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\n                var values = slotMap[timelineName];\n                if (timelineName == \"color\")\n                {\n                    var timeline = new spine.ColorTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var color = valueMap[\"color\"];\n                        var r = this.toColor(color, 0);\n                        var g = this.toColor(color, 1);\n                        var b = this.toColor(color, 2);\n                        var a = this.toColor(color, 3);\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\n\n                } else if (timelineName == \"attachment\")\n                {\n                    var timeline = new spine.AttachmentTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n\n                } else\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\n            }\n        }\n\n        var bones = map[\"bones\"];\n        for (var boneName in bones)\n        {\n            if (!bones.hasOwnProperty(boneName)) continue;\n            var boneIndex = skeletonData.findBoneIndex(boneName);\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\n            var boneMap = bones[boneName];\n\n            for (var timelineName in boneMap)\n            {\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\n                var values = boneMap[timelineName];\n                if (timelineName == \"rotate\")\n                {\n                    var timeline = new spine.RotateTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\n                {\n                    var timeline;\n                    var timelineScale = 1;\n                    if (timelineName == \"scale\")\n                        timeline = new spine.ScaleTimeline(values.length);\n                    else\n                    {\n                        timeline = new spine.TranslateTimeline(values.length);\n                        timelineScale = this.scale;\n                    }\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\n                {\n                    var x = timelineName == \"flipX\";\n                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var field = x ? \"x\" : \"y\";\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[field] || false);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n                } else\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\n            }\n        }\n\n        var ikMap = map[\"ik\"];\n        for (var ikConstraintName in ikMap)\n        {\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\n            var values = ikMap[ikConstraintName];\n            var timeline = new spine.IkConstraintTimeline(values.length);\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\n            var frameIndex = 0;\n            for (var i = 0, n = values.length; i < n; i++)\n            {\n                var valueMap = values[i];\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\n                this.readCurve(timeline, frameIndex, valueMap);\n                frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n        }\n\n        var ffd = map[\"ffd\"];\n        for (var skinName in ffd)\n        {\n            var skin = skeletonData.findSkin(skinName);\n            var slotMap = ffd[skinName];\n            for (slotName in slotMap)\n            {\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var meshMap = slotMap[slotName];\n                for (var meshName in meshMap)\n                {\n                    var values = meshMap[meshName];\n                    var timeline = new spine.FfdTimeline(values.length);\n                    var attachment = skin.getAttachment(slotIndex, meshName);\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\n                    timeline.slotIndex = slotIndex;\n                    timeline.attachment = attachment;\n\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\n                    var vertexCount;\n                    if (isMesh)\n                        vertexCount = attachment.vertices.length;\n                    else\n                        vertexCount = attachment.weights.length / 3 * 2;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var vertices;\n                        if (!valueMap[\"vertices\"])\n                        {\n                            if (isMesh)\n                                vertices = attachment.vertices;\n                            else\n                            {\n                                vertices = [];\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            }\n                        } else {\n                            var verticesValue = valueMap[\"vertices\"];\n                            vertices = [];\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            var start = valueMap[\"offset\"] || 0;\n                            var nn = verticesValue.length;\n                            if (this.scale == 1)\n                            {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii];\n                            } else {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\n                            }\n                            if (isMesh)\n                            {\n                                var meshVertices = attachment.vertices;\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\n                                    vertices[ii] += meshVertices[ii];\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines[timelines.length] = timeline;\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                }\n            }\n        }\n\n        var drawOrderValues = map[\"drawOrder\"];\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\n        if (drawOrderValues)\n        {\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\n            var slotCount = skeletonData.slots.length;\n            var frameIndex = 0;\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\n            {\n                var drawOrderMap = drawOrderValues[i];\n                var drawOrder = null;\n                if (drawOrderMap[\"offsets\"])\n                {\n                    drawOrder = [];\n                    drawOrder.length = slotCount;\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        drawOrder[ii] = -1;\n                    var offsets = drawOrderMap[\"offsets\"];\n                    var unchanged = [];\n                    unchanged.length = slotCount - offsets.length;\n                    var originalIndex = 0, unchangedIndex = 0;\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\n                    {\n                        var offsetMap = offsets[ii];\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        var events = map[\"events\"];\n        if (events)\n        {\n            var timeline = new spine.EventTimeline(events.length);\n            var frameIndex = 0;\n            for (var i = 0, n = events.length; i < n; i++)\n            {\n                var eventMap = events[i];\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\n                var event = new spine.Event(eventData);\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\n    },\n    readCurve: function (timeline, frameIndex, valueMap)\n    {\n        var curve = valueMap[\"curve\"];\n        if (!curve)\n            timeline.curves.setLinear(frameIndex);\n        else if (curve == \"stepped\")\n            timeline.curves.setStepped(frameIndex);\n        else if (curve instanceof Array)\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n    },\n    toColor: function (hexString, colorIndex)\n    {\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\n    },\n    getFloatArray: function (map, name, scale)\n    {\n        var list = map[name];\n        var values = new spine.Float32Array(list.length);\n        var i = 0, n = list.length;\n        if (scale == 1)\n        {\n            for (; i < n; i++)\n                values[i] = list[i];\n        } else {\n            for (; i < n; i++)\n                values[i] = list[i] * scale;\n        }\n        return values;\n    },\n    getIntArray: function (map, name)\n    {\n        var list = map[name];\n        var values = new spine.Uint16Array(list.length);\n        for (var i = 0, n = list.length; i < n; i++)\n            values[i] = list[i] | 0;\n        return values;\n    }\n};\nmodule.exports = spine.SkeletonJsonParser;\n\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.SkinnedMeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.SkinnedMeshAttachment.prototype = {\n    type: spine.AttachmentType.skinnedmesh,\n    bones: null,\n    weights: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function (u, v, u2, v2, rotate)\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var skeletonBones = slot.bone.skeleton.bones;\n        var weights = this.weights;\n        var bones = this.bones;\n\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\n        var wx, wy, vx, vy, weight;\n        var m;\n        if (!slot.attachmentVertices.length)\n        {\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b];\n                    vy = weights[b + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        } else {\n            var ffd = slot.attachmentVertices;\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3, f += 2)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b] + ffd[f];\n                    vy = weights[b + 1] + ffd[f + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        }\n    }\n};\nmodule.exports = spine.SkinnedMeshAttachment;\n\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.FlipXTimeline = require('./FlipXTimeline');\nspine.FlipYTimeline = require('./FlipYTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n","module.exports = {\n    radDeg: 180 / Math.PI,\n    degRad: Math.PI / 180,\n    temp: [],\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array,\n    signum: function(x) {\n        if (x>0) return 1;\n        if (x<0) return -1;\n        return 0;\n    }\n};\n\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nSpine.globalAutoUpdate = true;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            if (slotContainer.transform ) {\n                //PIXI v4.0\n                if (!slotContainer.transform._dirtyLocal) {\n                    slotContainer.transform = new PIXI.TransformStatic();\n                }\n                var transform = slotContainer.transform;\n                var lt = transform.localTransform;\n                transform._dirtyParentVersion = -1;\n                transform._dirtyLocal = 1;\n                transform._versionLocal = 1;\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n            } else {\n                //PIXI v3\n                var lt = slotContainer.localTransform || new PIXI.Matrix();\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n                slotContainer.localTransform = lt;\n                slotContainer.displayObjectUpdateTransform = SlotContainerUpdateTransformV3;\n            }\n\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    if (Spine.globalAutoUpdate) {\n        this.lastTime = this.lastTime || Date.now();\n        var timeDelta = (Date.now() - this.lastTime) * 0.001;\n        this.lastTime = Date.now();\n        this.update(timeDelta);\n    } else {\n        this.lastTime = 0;\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var spriteRect = new PIXI.Rectangle(descriptor.x,\n                                        descriptor.y,\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n    var sprite = new PIXI.Sprite(spriteTexture);\n\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n    sprite.scale.x = attachment.width / descriptor.originalWidth * attachment.scaleX;\n    sprite.scale.y = attachment.height / descriptor.originalHeight * attachment.scaleY;\n    sprite.rotation = baseRotation + (attachment.rotation * spine.degRad);\n    sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n    sprite.anchor.y = 1.0 - ((0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height);\n    sprite.position.x = attachment.x;\n    sprite.position.y = attachment.y;\n    sprite.alpha = attachment.a;\n\n    if (descriptor.rotate) {\n        var x1 = sprite.scale.x;\n        sprite.scale.x = sprite.scale.y;\n        sprite.scale.y = x1;\n    }\n    sprite.scale.y = -sprite.scale.y;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n\nfunction SlotContainerUpdateTransformV3()\n{\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n    var lt = this.localTransform;\n    wt.a  = lt.a  * pt.a + lt.b  * pt.c;\n    wt.b  = lt.a  * pt.b + lt.b  * pt.d;\n    wt.c  = lt.c  * pt.a + lt.d  * pt.c;\n    wt.d  = lt.c  * pt.b + lt.d  * pt.d;\n    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    this._currentBounds = null;\n};\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\r\n    spine = require('../SpineRuntime'),\r\n    imageLoaderAdapter = require('./imageLoaderAdapter');\r\n\r\nvar atlasParser = module.exports = function () {\r\n    return function (resource, next) {\r\n        // skip if no data, its not json, or it isn't atlas data\r\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\r\n            return next();\r\n        }\r\n\r\n        /**\r\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\r\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\r\n         * have the same name\r\n         */\r\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\r\n        var atlasOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT,\r\n            metadata: resource.metadata.spineMetadata\r\n        };\r\n        var imageOptions = {\r\n            crossOrigin: resource.crossOrigin,\r\n            metadata: resource.metadata.imageMetadata\r\n        };\r\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\r\n\r\n        var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\r\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\r\n            new spine.Atlas(this.xhr.responseText, adapter, function(spineAtlas) {\r\n                var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\r\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\r\n\r\n                resource.spineData = skeletonData;\r\n                resource.spineAtlas = spineAtlas;\r\n                if (atlasParser.enableCaching)\r\n                    atlasParser.AnimCache[resource.name] = resource.spineData;\r\n\r\n                next();\r\n            });\r\n        });\r\n    };\r\n};\r\n\r\natlasParser.AnimCache = {};\r\natlasParser.enableCaching = true;\r\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (loader, namePrefix, baseUrl, imageOptions) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        var name = namePrefix + line;\r\n        var url = baseUrl + line;\r\n        loader.add(name, url, imageOptions, function(resource) {\r\n            callback(resource.texture.baseTexture);\r\n        });\r\n    }\r\n};\r\n","module.exports = {\r\n    atlasParser: require('./atlasParser'),\r\n    Loader: require('./Loader'),\r\n    syncImageLoaderAdapter: require('./syncImageLoaderAdapter'),\r\n    imageLoaderAdapter: require('./imageLoaderAdapter')\r\n};\r\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (baseUrl, crossOrigin) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\r\n    }\r\n};\r\n"],"sourceRoot":"./"}