{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/FlipXTimeline.js","src/SpineRuntime/FlipYTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/SkinnedMeshAttachment.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/imageLoaderAdapter.js","src/loaders/index.js","src/loaders/syncImageLoaderAdapter.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","syncImageLoaderAdapter","Atlas","atlasText","loaderFunction","callback","iterateParser","line","reader","readLine","self","trim","page","readTuple","tuple","width","parseInt","height","format","Format","minFilter","TextureFilter","magFilter","direction","readValue","uWrap","TextureWrap","clampToEdge","vWrap","repeat","texture","rendererObject","pages","console","log","region","rotate","x","y","v","u2","v2","resolution","abs","splits","pads","originalWidth","originalHeight","offsetX","offsetY","regions","baseUrl","crossOrigin","texturesLoading","findRegion","dispose","destroy","updateUVs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","../loaders/syncImageLoaderAdapter.js","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","SkinnedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","regionU","regionV","regionU2","regionV2","regionRotate","newSkinnedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./SkinnedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","skinnedmesh",12,"Bone","boneData","parent","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","m00","m01","worldX","m10","m11","worldY","worldRotation","worldScaleX","worldScaleY","worldFlipX","worldFlipY","updateWorldTransform","inheritScale","inheritRotation","skeletonFlipX","skeletonFlipY","radians","degRad","cos","sin","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","px","py","./AttachmentType",15,"ColorTimeline","g","b","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline","frame",21,"FfdTimeline","frameVertices","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"FlipXTimeline","boneIndex","flip","bones",23,"FlipYTimeline",24,"IkConstraint","bendDirection","findBone","apply1","apply2","targetX","targetY","parentRotation","radDeg","atan2","child","childRotation","positionX","positionY","tempPosition","temp","parentParent","childX","childY","offset","len1","sqrt","len2","cosDenom","childAngle","acos","adjacent","opposite","parentAngle",25,"IkConstraintData",26,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",27,"uvs","regionUVs","triangles","hullLength","edges","Float32Array","verticesCount","vx","vy",28,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",29,"RotateTimeline","angle","amount","prevFrameValue",30,"ScaleTimeline","prevFrameX","prevFrameY",31,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","outer","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",32,"SkeletonBounds","polygonPool","polygons","boundingBoxes","minX","minY","maxX","maxY","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","x1","y1","x2","y2","m","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x3","y3","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",33,"SkeletonData","skins","animations","version","hash","findEvent","eventName",34,"SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","field","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./FlipXTimeline","./FlipYTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",35,"attachments","oldSkin",36,"wx","wy","weight","skeletonBones","w",37,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",38,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",39,40,41,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",42,"PI",43,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","atlasParser","fromAtlas","resourceName","AnimCache","Object","create","constructor","globalAutoUpdate","defineProperties","get","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","position","tint","utils","rgb2hex","meshes","Date","now","timeDelta","descriptor","baseTexture","spriteRect","Rectangle","spriteTexture","Texture","Sprite","baseRotation","anchor","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",44,"Loader","addPixiMiddleware","loader","use","./atlasParser",45,"Resource","imageLoaderAdapter","resource","isJson","atlasPath","url","lastIndexOf","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","metadata","spineMetadata","imageOptions","imageMetadata","adapter","add","res","xhr","responseText","spineAtlas","spineJsonParser","enableCaching","./imageLoaderAdapter",46,"namePrefix",47,"./Loader","./syncImageLoaderAdapter",48,"BaseTexture","fromImage"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCGAI,EAAAJ,QAAAK,KAAAC,OACAC,MAAAb,EAAA,WACAc,aAAAd,EAAA,kBACAe,QAAAf,EAAA,gBCIGgB,UAAU,GAAGC,iBAAiB,GAAGC,YAAY,KAAKC,GAAG,SAASnB,EAAQU,EAAOJ,GCVhF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAA,SAAAC,EAAAC,EAAAC,GAEAC,KAAAH,KAAAA,EACAG,KAAAF,UAAAA,EACAE,KAAAD,SAAAA,GAEAX,EAAAQ,UAAAK,WACAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAD,GAAA,GAAAN,KAAAD,WAEAM,GAAAL,KAAAD,SACAK,GAAAJ,KAAAD,SAGA,KAAA,GADAD,GAAAE,KAAAF,UACArB,EAAA,EAAAP,EAAA4B,EAAAd,OAAAd,EAAAO,EAAAA,IACAqB,EAAArB,GAAAyB,MAAAC,EAAAC,EAAAC,EAAAE,EAAA,IAEAC,IAAA,SAAAL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,GAEAH,GAAA,GAAAN,KAAAD,WAEAM,GAAAL,KAAAD,SACAK,GAAAJ,KAAAD,SAGA,KAAA,GADAD,GAAAE,KAAAF,UACArB,EAAA,EAAAP,EAAA4B,EAAAd,OAAAd,EAAAO,EAAAA,IACAqB,EAAArB,GAAAyB,MAAAC,EAAAC,EAAAC,EAAAE,EAAAE,KAGArB,EAAAQ,UAAAc,aAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,EACAC,EAAAC,KAAAC,MAAAN,EAAA3B,OAAA6B,GAAA,CACA,KAAAE,EAAA,MAAAF,EAEA,KADA,GAAAK,GAAAH,IAAA,IAEA,CAKA,GAJAJ,GAAAO,EAAA,GAAAL,IAAAD,EACAE,EAAAI,EAAA,EAEAH,EAAAG,EACAJ,GAAAC,EAAA,OAAAD,EAAA,GAAAD,CACAK,GAAAJ,EAAAC,IAAA,IAGA3B,EAAAQ,UAAAuB,cAAA,SAAAR,EAAAC,GAEA,GAAAE,GAAA,EACAC,EAAAJ,EAAA3B,OAAA,CACA,KAAA+B,EAAA,MAAA,EAEA,KADA,GAAAG,GAAAH,IAAA,IAEA,CAKA,GAJAJ,EAAAO,EAAA,IAAAN,EACAE,EAAAI,EAAA,EAEAH,EAAAG,EACAJ,GAAAC,EAAA,MAAAD,GAAA,CACAI,GAAAJ,EAAAC,IAAA,IAGA3B,EAAAQ,UAAAwB,aAAA,SAAAT,EAAAC,EAAAC,GAEA,IAAA,GAAApC,GAAA,EAAA4C,EAAAV,EAAA3B,OAAA6B,EAAAQ,GAAA5C,EAAAA,GAAAoC,EACA,GAAAF,EAAAlC,GAAAmC,EAAA,MAAAnC,EACA,OAAA,IAEAS,EAAAJ,QAAAM,EAAAQ,YDaG0B,eAAe,KAAKC,GAAG,SAAS/C,EAAQU,EAAOJ,GElFlD,GAAAM,GAAAZ,EAAA,eACAY,GAAAoC,WAAAhD,EAAA,gBACAY,EAAAqC,eAAA,SAAAC,GAEA1B,KAAA2B,KAAAD,EACA1B,KAAA4B,UACA5B,KAAAO,WAEAnB,EAAAqC,eAAAxB,WACA4B,QAAA,KACAC,MAAA,KACAC,WAAA,KACAC,QAAA,KACAC,UAAA,EACAC,OAAA,SAAAC,GAEAA,GAAAnC,KAAAiC,SACA,KAAA,GAAAxD,GAAA,EAAAA,EAAAuB,KAAA4B,OAAA5C,OAAAP,IACA,CACA,GAAAyC,GAAAlB,KAAA4B,OAAAnD,EACA,IAAAyC,EAAA,CAGA,GADAA,EAAAb,MAAA8B,EAAAjB,EAAAe,UACAf,EAAAkB,SACA,CACA,GAAAC,GAAAF,EAAAjB,EAAAkB,SAAAH,SACAf,GAAAkB,SAAA/B,MAAAgC,EACAnB,EAAAoB,SAAAD,EAGA,GAAAE,GAAArB,EAAAqB,IACAA,IAEAA,EAAAlC,KAAAa,EAAAd,SAAAmC,EAAAC,MACAD,EAAAlC,MAAA,GAAAL,KAAAyC,WAAAhE,EAAA8D,KAGArB,EAAAZ,MAAAY,EAAAd,UAAAc,EAAAwB,SAAA1C,KAAA2C,WAAAlE,MAIAyB,MAAA,SAAAC,GAEAA,EAAAyC,gBAEA,KAAA,GAAAnE,GAAA,EAAAA,EAAAuB,KAAA4B,OAAA5C,OAAAP,IACA,CACA,GAAAyC,GAAAlB,KAAA4B,OAAAnD,EACA,IAAAyC,EAAA,CAEAlB,KAAAO,OAAAvB,OAAA,CAEA,IAAAqB,GAAAa,EAAAb,KACAD,EAAAc,EAAAd,SACAsC,EAAAxB,EAAAwB,QACApC,EAAAY,EAAAZ,MACAA,GAAAD,EAAAqC,IAAArC,EAAAqC,EAEA,IAAAN,GAAAlB,EAAAkB,QACA,IAAAA,EAMA,CACA,GAAAS,GAAAT,EAAA/B,MACA+B,EAAA9B,MAAAuC,EAAAT,EAAAM,UAAAG,EAAAT,EAAAM,SACAN,EAAAU,UAAA5C,MAAAC,EAAA0C,EAAAA,EAAAT,EAAA9B,KAAA,KAEA,IAAAG,GAAAS,EAAAoB,QAAApB,EAAA6B,YAAA7B,EAAAV,GACAC,IAAA,IAEAA,EAAA,EACAS,EAAAkB,SAAA,MAEAlB,EAAA4B,UAAAtC,IAAAL,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,OAAAE,OAfA,IAAAS,EAAAV,IACAU,EAAA4B,UAAA5C,MAAAC,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,QAEAW,EAAA4B,UAAAtC,IAAAL,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,OAAAW,EAAAV,IAeA,KAAA,GAAAwC,GAAA,EAAAC,EAAAjD,KAAAO,OAAAvB,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAE,GAAAlD,KAAAO,OAAAyC,EACA9B,GAAAc,SAAAd,EAAAc,QAAAvD,EAAAyE,GACAlD,KAAAgC,SAAAhC,KAAAgC,QAAAvD,EAAAyE,GAIA,GAAA5C,EAAAF,EAAAsC,EAAArC,EAAAqC,EAAAA,EAAAtC,GAAAC,GAAAqC,EACA,CACA,GAAAS,GAAAnC,KAAAC,MAAAZ,EAAAqC,EACAxB,GAAAa,YAAAb,EAAAa,WAAAtD,EAAA0E,GACAnD,KAAA+B,YAAA/B,KAAA+B,WAAAtD,EAAA0E,GAGAjC,EAAAd,SAAAc,EAAAb,QAGA+C,YAAA,WAEA,IAAA,GAAA3E,GAAA,EAAAP,EAAA8B,KAAA4B,OAAA5C,OAAAd,EAAAO,EAAAA,IACAuB,KAAA2C,WAAAlE,EACAuB,MAAA4B,OAAA5C,OAAA,GAEA2D,WAAA,SAAAU,GAEA,KAAAA,GAAArD,KAAA4B,OAAA5C,QAAA,CACA,GAAAkC,GAAAlB,KAAA4B,OAAAyB,EACAnC,KAEAA,EAAAY,OAAAZ,EAAAY,MAAAuB,GACArD,KAAA8B,OAAA9B,KAAA8B,MAAAuB,GAEArD,KAAA4B,OAAAyB,GAAA,QAEAC,eAAA,SAAAC,GAEA,GAAAA,EAAAvD,KAAA4B,OAAA5C,OAAA,MAAAgB,MAAA4B,OAAA2B,EACA,MAAAA,GAAAvD,KAAA4B,OAAA5C,QACAgB,KAAA4B,OAAA4B,KAAA,KACA,OAAA,OAEAf,WAAA,SAAAc,EAAAE,GAEA,GAAAvC,GAAAlB,KAAAsD,eAAAC,EACA,IAAArC,EACA,CACA,GAAAkB,GAAAlB,EAAAkB,QACAlB,GAAAkB,SAAA,KAEAlB,EAAAY,OAAAZ,EAAAY,MAAAyB,GACAvD,KAAA8B,OAAA9B,KAAA8B,MAAAyB,GAEAE,EAAAV,YAAA/C,KAAA2B,KAAA+B,OAAAxC,EAAA4B,UAAAW,EAAAX,WACAW,EAAAV,YAAA,IAEAU,EAAAnB,QAAA,EAEAF,GAAAlB,EAAAoB,QAAApB,EAAA6B,YAAA,GACAU,EAAArB,SAAAA,EAEAqB,EAAArB,SAAAlB,GAIAlB,KAAA4B,OAAA2B,GAAAE,EAEAA,EAAA5B,SAAA4B,EAAA5B,QAAA0B,GACAvD,KAAA6B,SAAA7B,KAAA6B,QAAA0B,IAEAI,mBAAA,SAAAN,EAAAO,EAAAtD,GAEA,GAAAwC,GAAA9C,KAAA2B,KAAAkC,aAAAC,cAAAF,EACA,KAAAd,EAAA,KAAA,wBAAAc,CACA,OAAA5D,MAAA+D,aAAAV,EAAAP,EAAAxC,IAGAyD,aAAA,SAAAV,EAAAP,EAAAxC,GAEA,GAAAmD,GAAA,GAAArE,GAAAoC,UAKA,OAJAiC,GAAAX,UAAAA,EACAW,EAAAnD,KAAAA,EACAmD,EAAAf,QAAAI,EAAA/C,SACAC,KAAAyC,WAAAY,EAAAI,GACAA,GAEAO,mBAAA,SAAAX,EAAAO,EAAAtD,EAAAkC,GAEA,GAAAM,GAAA9C,KAAA2B,KAAAkC,aAAAC,cAAAF,EACA,KAAAd,EAAA,KAAA,wBAAAc,CACA,OAAA5D,MAAAiE,aAAAZ,EAAAP,EAAAxC,EAAAkC,IAIAyB,aAAA,SAAAZ,EAAAP,EAAAxC,EAAAkC,GAEA,GAAAiB,GAAA,GAAArE,GAAAoC,UACAiC,GAAAX,UAAAA,EACAW,EAAAnD,KAAAA,EACAmD,EAAAf,QAAAI,EAAA/C,QAEA,IAAAsB,GAAArB,KAAAsD,eAAAD,EACA,IAAAhC,EACA,CACA,KAAAA,EAAAkB,MACAlB,EAAAA,EAAAkB,IACAlB,GAAAkB,KAAAkB,MAEAzD,MAAA4B,OAAAyB,GAAAI,CAWA,OATA,IAAAjB,IAEAnB,EACAmB,GAAAnB,EAAAqB,QAAA1C,KAAA2B,KAAA+B,OAAArC,EAAAyB,UAAAA,GAEAN,EAAA,GAEAiB,EAAAjB,MAAAA,EAEAiB,GAGAS,WAAA,SAAAb,GAEA,MAAAA,IAAArD,KAAA4B,OAAA5C,OAAA,KACAgB,KAAA4B,OAAAyB,KAGAnE,EAAAJ,QAAAM,EAAAqC,iBFsFGH,eAAe,GAAG6C,eAAe,KAAKC,GAAG,SAAS5F,EAAQU,EAAOJ,GGrSpE,GAAAM,GAAAZ,EAAA,eACAY,GAAAiF,mBAAA,SAAAR,GAEA7D,KAAA6D,aAAAA,EACA7D,KAAAsE,uBAEAlF,EAAAiF,mBAAApE,WACAsE,WAAA,EACAC,aAAA,SAAAC,EAAAC,EAAA3E,GAEA,GAAA4E,GAAA3E,KAAA6D,aAAAC,cAAAW,EACA,KAAAE,EAAA,KAAA,wBAAAF,CACA,IAAAG,GAAA5E,KAAA6D,aAAAC,cAAAY,EACA,KAAAE,EAAA,KAAA,wBAAAF,CACA1E,MAAA6E,OAAAF,EAAAC,EAAA7E,IAEA8E,OAAA,SAAAF,EAAAC,EAAA7E,GAEAC,KAAAsE,mBAAAK,EAAA9E,KAAA,IAAA+E,EAAA/E,MAAAE,GAEA2D,OAAA,SAAAiB,EAAAC,GAEA,GAAAE,GAAAH,EAAA9E,KAAA,IAAA+E,EAAA/E,IACA,OAAAG,MAAAsE,mBAAAS,eAAAD,GAAA9E,KAAAsE,mBAAAQ,GAAA9E,KAAAuE,aAGArF,EAAAJ,QAAAM,EAAAiF,qBHySG/C,eAAe,KAAK0D,GAAG,SAASxG,EAAQU,EAAOJ,GInUlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA6F,YAAAzG,EAAA,iBACAY,EAAA8F,UAAA1G,EAAA,eACAY,EAAA+F,YAAA3G,EAAA,gBACA,IAAA4G,GAAA5G,EAAA,uCAEAY,GAAAiG,MAAA,SAAAC,EAAAC,EAAAC,GAyBA,QAAAC,KACA,OAAA,CACA,GAAAC,GAAAC,EAAAC,UACA,IAAA,OAAAF,EACA,MAAAF,IAAAA,EAAAK,EAGA,IADAH,EAAAC,EAAAG,KAAAJ,GACAA,EAAA1G,OAEA,CAAA,IAAA+G,EAAA,CACAA,EAAA,GAAA3G,GAAA8F,UACAa,EAAAlG,KAAA6F,EAEA,GAAAC,EAAAK,UAAAC,KACAF,EAAAG,MAAAC,SAAAF,EAAA,IACAF,EAAAK,OAAAD,SAAAF,EAAA,IACAN,EAAAK,UAAAC,IAIAF,EAAAM,OAAAjH,EAAAiG,MAAAiB,OAAAL,EAAA,IAEAN,EAAAK,UAAAC,GACAF,EAAAQ,UAAAnH,EAAAiG,MAAAmB,cAAAP,EAAA,IACAF,EAAAU,UAAArH,EAAAiG,MAAAmB,cAAAP,EAAA,GAEA,IAAAS,GAAAf,EAAAgB,WACAZ,GAAAa,MAAAxH,EAAAiG,MAAAwB,YAAAC,YACAf,EAAAgB,MAAA3H,EAAAiG,MAAAwB,YAAAC,YACA,KAAAJ,EACAX,EAAAa,MAAAxH,EAAAiG,MAAAwB,YAAAG,OACA,KAAAN,EACAX,EAAAgB,MAAA3H,EAAAiG,MAAAwB,YAAAG,OACA,MAAAN,IACAX,EAAAa,MAAAb,EAAAgB,MAAA3H,EAAAiG,MAAAwB,YAAAG,QAGAzB,EAAAG,EAAA,SAAAuB,GACAlB,EAAAmB,eAAAD,EACApB,EAAAsB,MAAA3D,KAAAuC,GACAA,EAAAG,OAAAH,EAAAK,SACAL,EAAAG,MAAAe,EAAAf,MACAH,EAAAK,OAAAa,EAAAb,OACAL,EAAAG,OAAAH,EAAAK,QACAgB,QAAAC,IAAA,0BAAAtB,EAAAlG,KAAA,qIAGA4F,KAEA,OAEA,GAAA6B,GAAA,GAAAlI,GAAA+F,WACAmC,GAAAzH,KAAA6F,EACA4B,EAAAvB,KAAAA,EAEAuB,EAAAC,OAAA,QAAA5B,EAAAgB,YAEAhB,EAAAK,UAAAC,EACA,IAAAuB,GAAArB,SAAAF,EAAA,IACAwB,EAAAtB,SAAAF,EAAA,GAEAN,GAAAK,UAAAC,EACA,IAAAC,GAAAC,SAAAF,EAAA,IACAG,EAAAD,SAAAF,EAAA,GAEAqB,GAAAhJ,EAAAkJ,EAAAzB,EAAAG,MACAoB,EAAAI,EAAAD,EAAA1B,EAAAK,OACAkB,EAAAC,QACAD,EAAAK,IAAAH,EAAApB,GAAAL,EAAAG,MACAoB,EAAAM,IAAAH,EAAAvB,GAAAH,EAAAK,SAEAkB,EAAAK,IAAAH,EAAAtB,GAAAH,EAAAG,MACAoB,EAAAM,IAAAH,EAAArB,GAAAL,EAAAK,OAGA,IAAAyB,GAAA9B,EAAAmB,eAAAW,UACAP,GAAAE,EAAAA,EAAAK,EACAP,EAAAG,EAAAA,EAAAI,EACAP,EAAApB,MAAAlF,KAAA8G,IAAA5B,GAAA2B,EACAP,EAAAlB,OAAApF,KAAA8G,IAAA1B,GAAAyB,EAEA,GAAAlC,EAAAK,UAAAC,KACAqB,EAAAS,QAAA5B,SAAAF,EAAA,IAAAE,SAAAF,EAAA,IAAAE,SAAAF,EAAA,IAAAE,SAAAF,EAAA,KAEA,GAAAN,EAAAK,UAAAC,KACAqB,EAAAU,MAAA7B,SAAAF,EAAA,IAAAE,SAAAF,EAAA,IAAAE,SAAAF,EAAA,IAAAE,SAAAF,EAAA,KAEAN,EAAAK,UAAAC,KAIAqB,EAAAW,cAAA9B,SAAAF,EAAA,IAAA4B,EACAP,EAAAY,eAAA/B,SAAAF,EAAA,IAAA4B,EAEAlC,EAAAK,UAAAC,GACAqB,EAAAa,QAAAhC,SAAAF,EAAA,IAAA4B,EACAP,EAAAc,QAAAjC,SAAAF,EAAA,IAAA4B,EAEAP,EAAA/D,MAAA4C,SAAAR,EAAAgB,aAEAd,EAAAwC,QAAA7E,KAAA8D,OA5FAvB,GAAA,MA9BA,GAAA,kBAAAR,GAAA,CAEA,GAAA+C,GAAA/C,EACAgD,EAAA/C,CACAD,GAAAH,EAAAkD,EAAAC,GACA/C,EAAA,KAGAxF,KAAAmH,SACAnH,KAAAqI,WAEArI,KAAAwI,gBAAA,CAEA,IAAA3C,GAAA7F,KAEA2F,EAAA,GAAAvG,GAAA6F,YAAAK,GACAW,IACAA,GAAAjH,OAAA,CACA,IAAA+G,GAAA,IAEAN,MA2GArG,EAAAiG,MAAApF,WACAwI,WAAA,SAAA5I,GAGA,IAAA,GADAwI,GAAArI,KAAAqI,QACA5J,EAAA,EAAAP,EAAAmK,EAAArJ,OAAAd,EAAAO,EAAAA,IACA,GAAA4J,EAAA5J,GAAAoB,MAAAA,EAAA,MAAAwI,GAAA5J,EACA,OAAA,OAEAiK,QAAA,WAGA,IAAA,GADAvB,GAAAnH,KAAAmH,MACA1I,EAAA,EAAAP,EAAAiJ,EAAAnI,OAAAd,EAAAO,EAAAA,IACA0I,EAAA1I,GAAAyI,eAAAyB,SAAA,IAEAC,UAAA,SAAA7C,GAGA,IAAA,GADAsC,GAAArI,KAAAqI,QACA5J,EAAA,EAAAP,EAAAmK,EAAArJ,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA6I,GAAAe,EAAA5J,EACA6I,GAAAvB,MAAAA,IACAuB,EAAAhJ,EAAAgJ,EAAAE,EAAAzB,EAAAG,MACAoB,EAAAI,EAAAJ,EAAAG,EAAA1B,EAAAK,OACAkB,EAAAC,QAEAD,EAAAK,IAAAL,EAAAE,EAAAF,EAAAlB,QAAAL,EAAAG,MACAoB,EAAAM,IAAAN,EAAAG,EAAAH,EAAApB,OAAAH,EAAAK,SAEAkB,EAAAK,IAAAL,EAAAE,EAAAF,EAAApB,OAAAH,EAAAG,MACAoB,EAAAM,IAAAN,EAAAG,EAAAH,EAAAlB,QAAAL,EAAAK,YAMAhH,EAAAiG,MAAAiB,QACA7F,MAAA,EACAoI,UAAA,EACAC,eAAA,EACAC,OAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,GAGA9J,EAAAiG,MAAAmB,eACA2C,QAAA,EACAC,OAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,oBAAA,EACAC,oBAAA,EACAC,mBAAA,GAGArK,EAAAiG,MAAAwB,aACA6C,eAAA,EACA5C,YAAA,EACAE,OAAA,GAEA9H,EAAAJ,QAAAM,EAAAiG,QJsUG/D,eAAe,GAAGqI,uCAAuC,GAAGC,cAAc,EAAEC,gBAAgB,EAAEC,gBAAgB,IAAIC,GAAG,SAASvL,EAAQU,EAAOJ,GK1gBhJ,GAAAM,GAAAZ,EAAA,eACAY,GAAA4K,iBAAAxL,EAAA,sBACAY,EAAA6K,eAAAzL,EAAA,oBACAY,EAAA8K,sBAAA1L,EAAA,2BACAY,EAAA+K,sBAAA3L,EAAA,2BACAY,EAAAgL,sBAAA,SAAAC,GAEArK,KAAAqK,MAAAA,GAEAjL,EAAAgL,sBAAAnK,WACAqK,oBAAA,SAAAC,EAAA1K,EAAA2K,GAEA,GAAAlD,GAAAtH,KAAAqK,MAAA5B,WAAA+B,EACA,KAAAlD,EAAA,KAAA,8BAAAkD,EAAA,wBAAA3K,EAAA,GACA,IAAA4K,GAAA,GAAArL,GAAA4K,iBAAAnK,EASA,OARA4K,GAAAvD,eAAAI,EACAmD,EAAAC,OAAApD,EAAAhJ,EAAAgJ,EAAAI,EAAAJ,EAAAK,GAAAL,EAAAM,GAAAN,EAAAC,QACAkD,EAAAE,cAAArD,EAAAa,QACAsC,EAAAG,cAAAtD,EAAAc,QACAqC,EAAAI,YAAAvD,EAAApB,MACAuE,EAAAK,aAAAxD,EAAAlB,OACAqE,EAAAM,oBAAAzD,EAAAW,cACAwC,EAAAO,qBAAA1D,EAAAY,eACAuC,GAEAQ,kBAAA,SAAAV,EAAA1K,EAAA2K,GAEA,GAAAlD,GAAAtH,KAAAqK,MAAA5B,WAAA+B,EACA,KAAAlD,EAAA,KAAA,8BAAAkD,EAAA,sBAAA3K,EAAA,GACA,IAAA4K,GAAA,GAAArL,GAAA6K,eAAApK,EAaA,OAZA4K,GAAAvD,eAAAI,EACAmD,EAAAS,QAAA5D,EAAAhJ,EACAmM,EAAAU,QAAA7D,EAAAI,EACA+C,EAAAW,SAAA9D,EAAAK,GACA8C,EAAAY,SAAA/D,EAAAM,GACA6C,EAAAa,aAAAhE,EAAAC,OACAkD,EAAAE,cAAArD,EAAAa,QACAsC,EAAAG,cAAAtD,EAAAc,QACAqC,EAAAI,YAAAvD,EAAApB,MACAuE,EAAAK,aAAAxD,EAAAlB,OACAqE,EAAAM,oBAAAzD,EAAAW,cACAwC,EAAAO,qBAAA1D,EAAAY,eACAuC,GAEAc,yBAAA,SAAAhB,EAAA1K,EAAA2K,GAEA,GAAAlD,GAAAtH,KAAAqK,MAAA5B,WAAA+B,EACA,KAAAlD,EAAA,KAAA,8BAAAkD,EAAA,8BAAA3K,EAAA,GACA,IAAA4K,GAAA,GAAArL,GAAA8K,sBAAArK,EAaA,OAZA4K,GAAAvD,eAAAI,EACAmD,EAAAS,QAAA5D,EAAAhJ,EACAmM,EAAAU,QAAA7D,EAAAI,EACA+C,EAAAW,SAAA9D,EAAAK,GACA8C,EAAAY,SAAA/D,EAAAM,GACA6C,EAAAa,aAAAhE,EAAAC,OACAkD,EAAAE,cAAArD,EAAAa,QACAsC,EAAAG,cAAAtD,EAAAc,QACAqC,EAAAI,YAAAvD,EAAApB,MACAuE,EAAAK,aAAAxD,EAAAlB,OACAqE,EAAAM,oBAAAzD,EAAAW,cACAwC,EAAAO,qBAAA1D,EAAAY,eACAuC,GAEAe,yBAAA,SAAAjB,EAAA1K,GAEA,MAAA,IAAAT,GAAA+K,sBAAAtK,KAGAX,EAAAJ,QAAAM,EAAAgL,wBL8gBG9I,eAAe,GAAGmK,0BAA0B,GAAGC,mBAAmB,GAAGC,qBAAqB,GAAGC,0BAA0B,KAAKC,GAAG,SAASrN,EAAQU,EAAOJ,GMllB1J,GAAAM,GAAAZ,EAAA,eACAY,GAAA8F,UAAA,aAEA9F,EAAA8F,UAAAjF,WACAJ,KAAA,KACAwG,OAAA,KACAE,UAAA,KACAE,UAAA,KACAG,MAAA,KACAG,MAAA,KACAG,eAAA,KACAhB,MAAA,EACAE,OAAA,GAEAlH,EAAAJ,QAAAM,EAAA8F,YNslBG5D,eAAe,KAAKwK,GAAG,SAAStN,EAAQU,EAAOJ,GOpmBlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA6F,YAAA,SAAA8G,GAEA/L,KAAAgM,MAAAD,EAAAE,MAAA,eAEA7M,EAAA6F,YAAAhF,WACAsD,MAAA,EACAuC,KAAA,SAAAoG,GAEA,MAAAA,GAAAC,QAAA,aAAA,KAEAvG,SAAA,WAEA,MAAA5F,MAAAuD,OAAAvD,KAAAgM,MAAAhN,OAAA,KACAgB,KAAAgM,MAAAhM,KAAAuD,UAEAoD,UAAA,WAEA,GAAAjB,GAAA1F,KAAA4F,WACAwG,EAAA1G,EAAA2G,QAAA,IACA,IAAA,IAAAD,EAAA,KAAA,iBAAA1G,CACA,OAAA1F,MAAA8F,KAAAJ,EAAA4G,UAAAF,EAAA,KAGApG,UAAA,SAAAC,GAEA,GAAAP,GAAA1F,KAAA4F,WACAwG,EAAA1G,EAAA2G,QAAA,IACA,IAAA,IAAAD,EAAA,KAAA,iBAAA1G,CAEA,KADA,GAAAjH,GAAA,EAAA8N,EAAAH,EAAA,EACA,EAAA3N,EAAAA,IACA,CACA,GAAA+N,GAAA9G,EAAA2G,QAAA,IAAAE,EACA,IAAA,IAAAC,EAAA,KACAvG,GAAAxH,GAAAuB,KAAA8F,KAAAJ,EAAA+G,OAAAF,EAAAC,EAAAD,IACAA,EAAAC,EAAA,EAGA,MADAvG,GAAAxH,GAAAuB,KAAA8F,KAAAJ,EAAA4G,UAAAC,IACA9N,EAAA,IAGAS,EAAAJ,QAAAM,EAAA6F,cPwmBG3D,eAAe,KAAKoL,GAAG,SAASlO,EAAQU,EAAOJ,GQjpBlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA+F,YAAA,aAEA/F,EAAA+F,YAAAlF,WACA8F,KAAA,KACAlG,KAAA,KACA2H,EAAA,EAAAC,EAAA,EACAvB,MAAA,EAAAE,OAAA,EACA9H,EAAA,EAAAoJ,EAAA,EAAAC,GAAA,EAAAC,GAAA,EACAO,QAAA,EAAAC,QAAA,EACAH,cAAA,EAAAC,eAAA,EACA3E,MAAA,EACAgE,QAAA,EACAQ,OAAA,KACAC,KAAA,MAEA9I,EAAAJ,QAAAM,EAAA+F,cRqpBG7D,eAAe,KAAKqL,IAAI,SAASnO,EAAQU,EAAOJ,GSrqBnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAwN,OAAApO,EAAA,YACAY,EAAAQ,UAAApB,EAAA,eACAY,EAAAyN,mBAAA,SAAAC,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA8N,EACA9M,KAAAiN,mBACAjN,KAAAiN,gBAAAjO,OAAA8N,GAEA1N,EAAAyN,mBAAA5M,WACAiN,UAAA,EACAC,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,QAEAoO,SAAA,SAAAC,EAAAhN,EAAAiN,GAEAtN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAiN,gBAAAI,GAAAC,GAEApN,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,IAAA3M,EAAA2M,EAAA,GAGA,YADA5M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAoN,OAAAC,UAAA,KAAA,GAEArN,GAAAC,IACAD,EAAA,GAEA,IAAAiN,GAAAhN,GAAA2M,EAAAA,EAAAhO,OAAA,GAAAgO,EAAAhO,OAAA,EAAAI,EAAAQ,UAAAuB,cAAA6L,EAAA3M,GAAA,CACA,MAAA2M,EAAAK,GAAAjN,GAAA,CAEA,GAAAkN,GAAAtN,KAAAiN,gBAAAI,EACAlN,GAAAuN,MAAA1N,KAAAkN,WAAAS,cACAL,EAAAnN,EAAAyN,yBAAA5N,KAAAkN,UAAAI,GAAA,SAGApO,EAAAJ,QAAAM,EAAAyN,qBTyqBGvL,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKC,IAAI,SAASvP,EAAQU,EAAOJ,GUjtBjF,GAAAM,GAAAZ,EAAA,eACAY,GAAA4O,gBACA1G,OAAA,EACA2G,YAAA,EACAC,KAAA,EACAC,YAAA,GAEAjP,EAAAJ,QAAAM,EAAA4O,iBVqtBG1M,eAAe,KAAK8M,IAAI,SAAS5P,EAAQU,EAAOJ,GW5tBnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAiP,KAAA,SAAAC,EAAAnO,EAAAoO,GAEAvO,KAAA2B,KAAA2M,EACAtO,KAAAG,SAAAA,EACAH,KAAAuO,OAAAA,EACAvO,KAAAwO,kBAEApP,EAAAiP,KAAAI,OAAA,EACArP,EAAAiP,KAAApO,WACAuH,EAAA,EAAAC,EAAA,EACAiH,SAAA,EAAAC,WAAA,EACAC,OAAA,EAAAC,OAAA,EACAC,OAAA,EAAAC,OAAA,EACAC,IAAA,EAAAC,IAAA,EAAAC,OAAA,EACAC,IAAA,EAAAC,IAAA,EAAAC,OAAA,EACAC,cAAA,EACAC,YAAA,EAAAC,YAAA,EACAC,YAAA,EAAAC,YAAA,EACAC,qBAAA,WAEA,GAAApB,GAAAvO,KAAAuO,MACA,IAAAA,EAEAvO,KAAAkP,OAAAlP,KAAAwH,EAAA+G,EAAAS,IAAAhP,KAAAyH,EAAA8G,EAAAU,IAAAV,EAAAW,OACAlP,KAAAqP,OAAArP,KAAAwH,EAAA+G,EAAAY,IAAAnP,KAAAyH,EAAA8G,EAAAa,IAAAb,EAAAc,OACArP,KAAA2B,KAAAiO,cAEA5P,KAAAuP,YAAAhB,EAAAgB,YAAAvP,KAAA4O,OACA5O,KAAAwP,YAAAjB,EAAAiB,YAAAxP,KAAA6O,SAEA7O,KAAAuP,YAAAvP,KAAA4O,OACA5O,KAAAwP,YAAAxP,KAAA6O,QAEA7O,KAAAsP,cAAAtP,KAAA2B,KAAAkO,gBAAAtB,EAAAe,cAAAtP,KAAA2O,WAAA3O,KAAA2O,WACA3O,KAAAyP,WAAAlB,EAAAkB,YAAAzP,KAAA8O,MACA9O,KAAA0P,WAAAnB,EAAAmB,YAAA1P,KAAA+O,UACA,CACA,GAAAe,GAAA9P,KAAAG,SAAA2O,MAAAiB,EAAA/P,KAAAG,SAAA4O,KACA/O,MAAAkP,OAAAY,GAAA9P,KAAAwH,EAAAxH,KAAAwH,EACAxH,KAAAqP,OAAAU,GAAA3Q,EAAAiP,KAAAI,OAAAzO,KAAAyH,EAAAzH,KAAAyH,EACAzH,KAAAuP,YAAAvP,KAAA4O,OACA5O,KAAAwP,YAAAxP,KAAA6O,OACA7O,KAAAsP,cAAAtP,KAAA2O,WACA3O,KAAAyP,WAAAK,GAAA9P,KAAA8O,MACA9O,KAAA0P,WAAAK,GAAA/P,KAAA+O,MAEA,GAAAiB,GAAAhQ,KAAAsP,cAAAlQ,EAAA6Q,OACAC,EAAAlP,KAAAkP,IAAAF,GACAG,EAAAnP,KAAAmP,IAAAH,EACAhQ,MAAAyP,YAEAzP,KAAAgP,KAAAkB,EAAAlQ,KAAAuP,YACAvP,KAAAiP,IAAAkB,EAAAnQ,KAAAwP,cAEAxP,KAAAgP,IAAAkB,EAAAlQ,KAAAuP,YACAvP,KAAAiP,KAAAkB,EAAAnQ,KAAAwP,aAEAxP,KAAA0P,YAAAtQ,EAAAiP,KAAAI,OAEAzO,KAAAmP,KAAAgB,EAAAnQ,KAAAuP,YACAvP,KAAAoP,KAAAc,EAAAlQ,KAAAwP,cAEAxP,KAAAmP,IAAAgB,EAAAnQ,KAAAuP,YACAvP,KAAAoP,IAAAc,EAAAlQ,KAAAwP,cAGAhB,eAAA,WAEA,GAAA7M,GAAA3B,KAAA2B,IACA3B,MAAAwH,EAAA7F,EAAA6F,EACAxH,KAAAyH,EAAA9F,EAAA8F,EACAzH,KAAA0O,SAAA/M,EAAA+M,SACA1O,KAAA2O,WAAA3O,KAAA0O,SACA1O,KAAA4O,OAAAjN,EAAAiN,OACA5O,KAAA6O,OAAAlN,EAAAkN,OACA7O,KAAA8O,MAAAnN,EAAAmN,MACA9O,KAAA+O,MAAApN,EAAAoN,OAEAqB,aAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAA,GAAArQ,KAAAkP,OAAAqB,EAAAF,EAAA,GAAArQ,KAAAqP,OACAL,EAAAhP,KAAAgP,IAAAG,EAAAnP,KAAAmP,IAAAF,EAAAjP,KAAAiP,IAAAG,EAAApP,KAAAoP,GACApP,MAAAyP,aAAAzP,KAAA0P,YAAAtQ,EAAAiP,KAAAI,SAEAO,GAAAA,EACAI,GAAAA,EAEA,IAAAoB,GAAA,GAAAxB,EAAAI,EAAAH,EAAAE,EACAkB,GAAA,GAAAC,EAAAtB,EAAAwB,EAAAD,EAAAtB,EAAAuB,EACAH,EAAA,GAAAE,EAAAnB,EAAAoB,EAAAF,EAAAnB,EAAAqB,GAEAC,aAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAA,GAAAE,EAAAF,EAAA,EACAA,GAAA,GAAAC,EAAA3Q,KAAAgP,IAAA4B,EAAA5Q,KAAAiP,IAAAjP,KAAAkP,OACAwB,EAAA,GAAAC,EAAA3Q,KAAAmP,IAAAyB,EAAA5Q,KAAAoP,IAAApP,KAAAqP,SAGAnQ,EAAAJ,QAAAM,EAAAiP,OXguBG/M,eAAe,KAAKuP,IAAI,SAASrS,EAAQU,EAAOJ,GYn0BnD,GAAAM,GAAAZ,EAAA,eACAY,GAAA0R,SAAA,SAAAjR,EAAA0O,GAEAvO,KAAAH,KAAAA,EACAG,KAAAuO,OAAAA,GAEAnP,EAAA0R,SAAA7Q,WACAjB,OAAA,EACAwI,EAAA,EAAAC,EAAA,EACAiH,SAAA,EACAE,OAAA,EAAAC,OAAA,EACAe,cAAA,EACAC,iBAAA,EACAf,OAAA,EAAAC,OAAA,GAEA7P,EAAAJ,QAAAM,EAAA0R,WZu0BGxP,eAAe,KAAKyP,IAAI,SAASvS,EAAQU,EAAOJ,Gat1BnD,GAAAM,GAAAZ,EAAA,eACAY,GAAA4O,eAAAxP,EAAA,oBACAY,EAAA+K,sBAAA,SAAAtK,GAEAG,KAAAH,KAAAA,EACAG,KAAAgR,aAEA5R,EAAA+K,sBAAAlK,WACAgR,KAAA7R,EAAA4O,eAAAC,YACAiD,qBAAA,SAAA1J,EAAAC,EAAA0J,EAAAC,GAEA5J,GAAA2J,EAAAjC,OACAzH,GAAA0J,EAAA9B,MAGA,KAAA,GAFAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACA4B,EAAAhR,KAAAgR,SACAvS,EAAA,EAAAP,EAAA8S,EAAAhS,OAAAd,EAAAO,EAAAA,GAAA,EACA,CACA,GAAA4S,GAAAL,EAAAvS,GACA6S,EAAAN,EAAAvS,EAAA,EACA2S,GAAA3S,GAAA4S,EAAArC,EAAAsC,EAAArC,EAAAzH,EACA4J,EAAA3S,EAAA,GAAA4S,EAAAlC,EAAAmC,EAAAlC,EAAA3H,KAIAvI,EAAAJ,QAAAM,EAAA+K,wBb01BG7I,eAAe,GAAGiQ,mBAAmB,KAAKC,IAAI,SAAShT,EAAQU,EAAOJ,Gcl3BzE,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAAqS,cAAA,SAAA3E,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAAqS,cAAAxR,WACAiN,UAAA,EACAC,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAlC,EAAAuT,EAAAC,EAAApT,GAEA8O,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAAlP,EACA6B,KAAAgN,OAAAK,EAAA,GAAAqE,EACA1R,KAAAgN,OAAAK,EAAA,GAAAsE,EACA3R,KAAAgN,OAAAK,EAAA,GAAA9O,GAEA2B,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAA7O,GAAAuT,EAAAC,EAAApT,CACA,IAAA8B,GAAA2M,EAAAA,EAAAhO,OAAA,GACA,CAEA,GAAAP,GAAAuO,EAAAhO,OAAA,CACAb,GAAA6O,EAAAvO,EAAA,GACAiT,EAAA1E,EAAAvO,EAAA,GACAkT,EAAA3E,EAAAvO,EAAA,GACAF,EAAAyO,EAAAvO,OACA,CAEA,GAAA4O,GAAAjO,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,GACAuR,EAAA5E,EAAAK,EAAA,GACAwE,EAAA7E,EAAAK,EAAA,GACAyE,EAAA9E,EAAAK,EAAA,GACA0E,EAAA/E,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEA9T,EAAAyT,GAAA5E,EAAAK,EAAA,GAAAuE,GAAAK,EACAP,EAAAG,GAAA7E,EAAAK,EAAA,GAAAwE,GAAAI,EACAN,EAAAG,GAAA9E,EAAAK,EAAA,GAAAyE,GAAAG,EACA1T,EAAAwT,GAAA/E,EAAAK,EAAA,GAAA0E,GAAAE,EAEA,GAAAE,GAAAhS,EAAAuN,MAAA1N,KAAAkN,UACA,GAAAzM,GAEA0R,EAAAhU,IAAAA,EAAAgU,EAAAhU,GAAAsC,EACA0R,EAAAT,IAAAA,EAAAS,EAAAT,GAAAjR,EACA0R,EAAAR,IAAAA,EAAAQ,EAAAR,GAAAlR,EACA0R,EAAA5T,IAAAA,EAAA4T,EAAA5T,GAAAkC,IAEA0R,EAAAhU,EAAAA,EACAgU,EAAAT,EAAAA,EACAS,EAAAR,EAAAA,EACAQ,EAAA5T,EAAAA,MAIAW,EAAAJ,QAAAM,EAAAqS,gBds3BGnQ,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKsE,IAAI,SAAS5T,EAAQU,EAAOJ,Ge37BjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAwN,OAAA,SAAAE,GAEA9M,KAAA+M,WAGA3N,EAAAwN,OAAA3M,WACAoS,UAAA,SAAAhF,GAEArN,KAAA+M,OAAA,GAAAM,GAAA,GAEAiF,WAAA,SAAAjF,GAEArN,KAAA+M,OAAA,GAAAM,GAAA,GAKAkF,SAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,GAAAC,EAAAD,EAAAA,EAAAE,EAAAD,EAAAD,EACAG,EAAA,EAAAH,EAAAI,EAAA,EAAAH,EAAAI,EAAA,EAAAJ,EAAAK,EAAA,EAAAJ,EACAK,EAAA,GAAAX,EAAAE,EAAAU,EAAA,GAAAX,EAAAE,EAAAU,EAAA,GAAAb,EAAAE,GAAA,EAAAY,EAAA,GAAAb,EAAAE,GAAA,EACAY,EAAAf,EAAAO,EAAAI,EAAAH,EAAAK,EAAAP,EAAAU,EAAAf,EAAAM,EAAAK,EAAAJ,EAAAM,EAAAR,EACAW,EAAAN,EAAAF,EAAAI,EAAAH,EAAAQ,EAAAN,EAAAH,EAAAK,EAAAJ,EACAS,EAAAN,EAAAH,EAAAU,EAAAN,EAAAJ,EAEAzU,EAAA,GAAA4O,EACAN,EAAA/M,KAAA+M,MACAA,GAAAtO,KAAA,CAGA,KAAA,GADA+I,GAAA+L,EAAA9L,EAAA+L,EACAtV,EAAAO,EAAA,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAsO,EAAAtO,GAAA+I,EACAuF,EAAAtO,EAAA,GAAAgJ,EACA8L,GAAAE,EACAD,GAAAE,EACAD,GAAAE,EACAD,GAAAE,EACApM,GAAA+L,EACA9L,GAAA+L,GAGAtB,gBAAA,SAAA7E,EAAA4E,GAEAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAA,EAAAA,CACA,IAAAlF,GAAA/M,KAAA+M,OACAtO,EAAA,GAAA4O,EACA4D,EAAAlE,EAAAtO,EACA,IAAA,IAAAwS,EAAA,MAAAgB,EACA,IAAA,GAAAhB,EAAA,MAAA,EACAxS,IAEA,KAAA,GADA+I,GAAA,EACAqM,EAAApV,EAAAP,EAAAO,EAAA,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAGA,GADA+I,EAAAuF,EAAAtO,GACA+I,GAAAyK,EACA,CACA,GAAA6B,GAAAC,CASA,OARAtV,IAAAoV,GAEAC,EAAA,EACAC,EAAA,IAEAD,EAAA/G,EAAAtO,EAAA,GACAsV,EAAAhH,EAAAtO,EAAA,IAEAsV,GAAAhH,EAAAtO,EAAA,GAAAsV,IAAA9B,EAAA6B,IAAAtM,EAAAsM,GAGA,GAAArM,GAAAsF,EAAAtO,EAAA,EACA,OAAAgJ,IAAA,EAAAA,IAAAwK,EAAAzK,IAAA,EAAAA,KAGAtI,EAAAJ,QAAAM,EAAAwN,Sf+7BGtL,eAAe,KAAK0S,IAAI,SAASxV,EAAQU,EAAOJ,GgB1gCnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAA6U,kBAAA,SAAAnH,GAEA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA8N,EACA9M,KAAAkU,cACAlU,KAAAkU,WAAAlV,OAAA8N,GAEA1N,EAAA6U,kBAAAhU,WACAkN,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,QAEAoO,SAAA,SAAAC,EAAAhN,EAAA8T,GAEAnU,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAkU,WAAA7G,GAAA8G,GAEAjU,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAK,EAEAA,GADAhN,GAAA2M,EAAAA,EAAAhO,OAAA,GACAgO,EAAAhO,OAAA,EAEAI,EAAAQ,UAAAuB,cAAA6L,EAAA3M,GAAA,CAEA,IAAA8T,GAAAhU,EAAAgU,UAEAC,GADAjU,EAAAuN,MACA1N,KAAAkU,WAAA7G,GACA,IAAA+G,EAEA,IAAA,GAAA3V,GAAA,EAAAP,EAAAkW,EAAApV,OAAAd,EAAAO,EAAAA,IAEA0V,EAAA1V,GAAA2V,EAAA3V,MAMAS,EAAAJ,QAAAM,EAAA6U,oBhB8gCG3S,eAAe,GAAGuM,cAAc,IAAIwG,IAAI,SAAS7V,EAAQU,EAAOJ,GiBzjCnE,GAAAM,GAAAZ,EAAA,eACAY,GAAAkV,MAAA,SAAA3S,GAEA3B,KAAA2B,KAAAA,GAEAvC,EAAAkV,MAAArU,WACAsU,SAAA,EACAC,WAAA,EACAC,YAAA,MAEAvV,EAAAJ,QAAAM,EAAAkV,QjB6jCGhT,eAAe,KAAKoT,IAAI,SAASlW,EAAQU,EAAOJ,GkBvkCnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAuV,UAAA,SAAA9U,GAEAG,KAAAH,KAAAA,GAEAT,EAAAuV,UAAA1U,WACAsU,SAAA,EACAC,WAAA,EACAC,YAAA,MAEAvV,EAAAJ,QAAAM,EAAAuV,YlB2kCGrT,eAAe,KAAKsT,IAAI,SAASpW,EAAQU,EAAOJ,GmBrlCnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAyV,cAAA,SAAA/H,GAEA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA8N,EACA9M,KAAAO,UACAP,KAAAO,OAAAvB,OAAA8N,GAEA1N,EAAAyV,cAAA5U,WACAkN,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,QAEAoO,SAAA,SAAAC,EAAAhN,EAAA6C,GAEAlD,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAO,OAAA8M,GAAAnK,GAGAhD,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAA8M,EAAA,CAEA,GAAAP,GAAAhN,KAAAgN,OACAF,EAAAE,EAAAhO,MAEA,IAAAoB,EAAAC,EAEAL,KAAAE,MAAAC,EAAAC,EAAAoN,OAAAC,UAAAF,EAAA9M,GACAL,EAAA,OACA,IAAAA,GAAA4M,EAAAF,EAAA,GACA,MACA,MAAAzM,EAAA2M,EAAA,IAAA,CAEA,GAAAK,EACA,IAAAjN,EAAA4M,EAAA,GACAK,EAAA,MAEA,CACAA,EAAAjO,EAAAQ,UAAAuB,cAAA6L,EAAA5M,EAEA,KADA,GAAA0U,GAAA9H,EAAAK,GACAA,EAAA,GAEAL,EAAAK,EAAA,IAAAyH,GACAzH,IAIA,IADA,GAAA9M,GAAAP,KAAAO,OACAuM,EAAAO,GAAAhN,GAAA2M,EAAAK,GAAAA,IACAE,EAAA/J,KAAAjD,EAAA8M,QAGAnO,EAAAJ,QAAAM,EAAAyV,gBnBylCGvT,eAAe,GAAGuM,cAAc,IAAIkH,IAAI,SAASvW,EAAQU,EAAOJ,GoB9oCnE,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAA4V,YAAA,SAAAlI,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA8N,EACA9M,KAAAiV,iBACAjV,KAAAiV,cAAAjW,OAAA8N,GAEA1N,EAAA4V,YAAA/U,WACAiN,UAAA,EACAzC,WAAA,EACA0C,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,QAEAoO,SAAA,SAAAC,EAAAhN,EAAA2Q,GAEAhR,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAiV,cAAA5H,GAAA2D,GAEA9Q,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAA0R,GAAAhS,EAAAuN,MAAA1N,KAAAkN,UACA,IAAAiF,EAAA1H,YAAAzK,KAAAyK,WAAA,CAEA,GAAAuC,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAiI,GAAAjV,KAAAiV,cACAC,EAAAD,EAAA,GAAAjW,OAEAgS,EAAAmB,EAAAgD,kBACA,IAAAnE,EAAAhS,QAAAkW,EAAA,CACAlE,EAAAmB,EAAAgD,qBACA,KAAA,GAAAC,GAAA,EAAAF,EAAAE,EAAAA,IAAApE,EAAAxN,KAAA,EAEA/C,GAAA,EAGA,GAAAJ,GAAA2M,EAAAA,EAAAhO,OAAA,GAAA,CAEA,GAAAqW,GAAAJ,EAAAjI,EAAAhO,OAAA,EACA,IAAA,EAAAyB,EAEA,IAAA,GAAAhC,GAAA,EAAAyW,EAAAzW,EAAAA,IACAuS,EAAAvS,KAAA4W,EAAA5W,GAAAuS,EAAAvS,IAAAgC,MAEA,KAAA,GAAAhC,GAAA,EAAAyW,EAAAzW,EAAAA,IACAuS,EAAAvS,GAAA4W,EAAA5W,OATA,CAeA,GAAA4O,GAAAjO,EAAAQ,UAAAuB,cAAA6L,EAAA3M,GACA2R,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAAA,EAAAA,EAAA,EAAA,EAAAA,EAEA,IAAAqD,GAAAL,EAAA5H,EAAA,GACAkI,EAAAN,EAAA5H,EAEA,IAAA,EAAA5M,EAEA,IAAA,GAAAhC,GAAA,EAAAyW,EAAAzW,EAAAA,IACA,CACA,GAAA+W,GAAAF,EAAA7W,EACAuS,GAAAvS,KAAA+W,GAAAD,EAAA9W,GAAA+W,GAAAvD,EAAAjB,EAAAvS,IAAAgC,MAGA,KAAA,GAAAhC,GAAA,EAAAyW,EAAAzW,EAAAA,IACA,CACA,GAAA+W,GAAAF,EAAA7W,EACAuS,GAAAvS,GAAA+W,GAAAD,EAAA9W,GAAA+W,GAAAvD,QAKA/S,EAAAJ,QAAAM,EAAA4V,cpBkpCG1T,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAK2H,IAAI,SAASjX,EAAQU,EAAOJ,GqBnuCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAAsW,cAAA,SAAA5I,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAAsW,cAAAzV,WACA0V,UAAA,EACAxI,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAuV,GAEAvI,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAAuI,EAAA,EAAA,GAEA1V,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,IAAA3M,EAAA2M,EAAA,GAGA,YADA5M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAoN,OAAAC,UAAA,KAAA,GAEArN,GAAAC,IACAD,EAAA,GACA,IAAAiN,IAAAhN,GAAA2M,EAAAA,EAAAhO,OAAA,GAAAgO,EAAAhO,OAAAI,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,IAAA,CACA2M,GAAAK,GAAAjN,IACAD,EAAA0V,MAAA7V,KAAA2V,WAAA7G,MAAA,GAAA9B,EAAAK,EAAA,MAGAnO,EAAAJ,QAAAM,EAAAsW,gBrBuuCGpU,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKgI,IAAI,SAAStX,EAAQU,EAAOJ,GsB1wCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAA2W,cAAA,SAAAjJ,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAA2W,cAAA9V,WACA0V,UAAA,EACAxI,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAuV,GAEAvI,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAAuI,EAAA,EAAA,GAEA1V,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,IAAA3M,EAAA2M,EAAA,GAGA,YADA5M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAoN,OAAAC,UAAA,KAAA,GAEArN,GAAAC,IACAD,EAAA,GACA,IAAAiN,IAAAhN,GAAA2M,EAAAA,EAAAhO,OAAA,GAAAgO,EAAAhO,OAAAI,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,IAAA,CACA2M,GAAAK,GAAAjN,IACAD,EAAA0V,MAAA7V,KAAA2V,WAAA5G,MAAA,GAAA/B,EAAAK,EAAA,MAGAnO,EAAAJ,QAAAM,EAAA2W,gBtB8wCGzU,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKkI,IAAI,SAASxX,EAAQU,EAAOJ,GuBjzCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAA6W,aAAA,SAAAtU,EAAAxB,GAEAH,KAAA2B,KAAAA,EACA3B,KAAAQ,IAAAmB,EAAAnB,IACAR,KAAAkW,cAAAvU,EAAAuU,cAEAlW,KAAA6V,QACA,KAAA,GAAApX,GAAA,EAAAP,EAAAyD,EAAAkU,MAAA7W,OAAAd,EAAAO,EAAAA,IACAuB,KAAA6V,MAAArS,KAAArD,EAAAgW,SAAAxU,EAAAkU,MAAApX,GAAAoB,MACAG,MAAAY,OAAAT,EAAAgW,SAAAxU,EAAAf,OAAAf,OAEAT,EAAA6W,aAAAhW,WACAC,MAAA,WAEA,GAAAU,GAAAZ,KAAAY,OACAiV,EAAA7V,KAAA6V,KACA,QAAAA,EAAA7W,QAEA,IAAA,GACAI,EAAA6W,aAAAG,OAAAP,EAAA,GAAAjV,EAAAsO,OAAAtO,EAAAyO,OAAArP,KAAAQ,IACA,MACA,KAAA,GACApB,EAAA6W,aAAAI,OAAAR,EAAA,GAAAA,EAAA,GAAAjV,EAAAsO,OAAAtO,EAAAyO,OAAArP,KAAAkW,cAAAlW,KAAAQ,QAOApB,EAAA6W,aAAAG,OAAA,SAAAjF,EAAAmF,EAAAC,EAAA9V,GAEA,GAAA+V,GAAArF,EAAAxP,KAAAkO,iBAAAsB,EAAA5C,OAAA4C,EAAA5C,OAAAe,cAAA,EACAZ,EAAAyC,EAAAzC,SAEAC,GAAAvP,EAAAiP,KAAAI,OAAArP,EAAAqX,OAAArX,EAAAqX,QAAAzV,KAAA0V,MAAAH,EAAApF,EAAA9B,OAAAiH,EAAAnF,EAAAjC,QAAAsH,CACArF,GAAAxC,WAAAD,GAAAC,EAAAD,GAAAjO,GAKArB,EAAA6W,aAAAI,OAAA,SAAA9H,EAAAoI,EAAAL,EAAAC,EAAAL,EAAAzV,GAEA,GAAAmW,GAAAD,EAAAjI,SAAA8H,EAAAjI,EAAAG,QACA,KAAAjO,EAIA,MAFAkW,GAAAhI,WAAAiI,OACArI,EAAAI,WAAA6H,EAGA,IAAAK,GAAAC,EAAAC,EAAA3X,EAAA4X,KACAC,EAAA1I,EAAAA,MACA0I,IAEAF,EAAA,GAAAT,EACAS,EAAA,GAAAR,EACAU,EAAA7G,aAAA2G,GACAT,GAAAS,EAAA,GAAAxI,EAAA/G,GAAAyP,EAAA1H,YACAgH,GAAAQ,EAAA,GAAAxI,EAAA9G,GAAAwP,EAAAzH,cAEA8G,GAAA/H,EAAA/G,EACA+O,GAAAhI,EAAA9G,GAEAkP,EAAApI,QAAAA,GAEAsI,EAAAF,EAAAnP,EACAsP,EAAAH,EAAAlP,IAEAsP,EAAA,GAAAJ,EAAAnP,EACAuP,EAAA,GAAAJ,EAAAlP,EACAkP,EAAApI,OAAAkC,aAAAsG,GACAxI,EAAA6B,aAAA2G,GACAF,EAAAE,EAAA,GACAD,EAAAC,EAAA,GAEA,IAAAG,GAAAL,EAAAtI,EAAAgB,YAAA4H,EAAAL,EAAAvI,EAAAiB,YACA4H,EAAApW,KAAA0V,MAAAS,EAAAD,GACAG,EAAArW,KAAAsW,KAAAJ,EAAAA,EAAAC,EAAAA,GAAAI,EAAAZ,EAAAhV,KAAA3C,OAAA2X,EAAApH,YAEAiI,EAAA,EAAAH,EAAAE,CACA,IAAA,KAAAC,EAGA,YADAb,EAAAhI,WAAAiI,GAAA5V,KAAA0V,MAAAH,EAAAD,GAAAlX,EAAAqX,OAAAD,EAAAI,GAAAnW,EAGA,IAAAyP,IAAAoG,EAAAA,EAAAC,EAAAA,EAAAc,EAAAA,EAAAE,EAAAA,GAAAC,CACA,IAAAtH,EACAA,EAAA,GACAA,EAAA,IACAA,EAAA,EACA,IAAAuH,GAAAzW,KAAA0W,KAAAxH,GAAAgG,EACAyB,EAAAN,EAAAE,EAAArH,EAAA0H,EAAAL,EAAAvW,KAAAmP,IAAAsH,GACAI,EAAA7W,KAAA0V,MAAAH,EAAAoB,EAAArB,EAAAsB,EAAAtB,EAAAqB,EAAApB,EAAAqB,GACAlJ,GAAAmJ,EAAAT,GAAAhY,EAAAqX,OAAAD,CACA9H,GAAA,IACAA,GAAA,IACA,KAAAA,IACAA,GAAA,KACAH,EAAAI,WAAA6H,EAAA9H,EAAAjO,EACAiO,GAAA+I,EAAAL,GAAAhY,EAAAqX,OAAAG,EACAlI,EAAA,IACAA,GAAA,IACA,KAAAA,IACAA,GAAA,KACAiI,EAAAhI,WAAAiI,GAAAlI,EAAAH,EAAAe,cAAAqH,EAAApI,OAAAe,eAAA7O,GAEAvB,EAAAJ,QAAAM,EAAA6W,evBqzCG3U,eAAe,KAAKwW,IAAI,SAAStZ,EAAQU,EAAOJ,GwB/5CnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAA2Y,iBAAA,SAAAlY,GAEAG,KAAAH,KAAAA,EACAG,KAAA6V,UAEAzW,EAAA2Y,iBAAA9X,WACAW,OAAA,KACAsV,cAAA,EACA1V,IAAA,GAEAtB,EAAAJ,QAAAM,EAAA2Y,mBxBm6CGzW,eAAe,KAAK0W,IAAI,SAASxZ,EAAQU,EAAOJ,GyB96CnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAA6Y,qBAAA,SAAAnL,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAA6Y,qBAAAhY,WACAiY,kBAAA,EACA/K,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAG,EAAA0V,GAEA7I,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAA7M,EACAR,KAAAgN,OAAAK,EAAA,GAAA6I,GAEAhW,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAmL,GAAAhY,EAAAiY,cAAApY,KAAAkY,kBAEA,IAAA7X,GAAA2M,EAAAA,EAAAhO,OAAA,GAIA,MAFAmZ,GAAA3X,MAAAwM,EAAAA,EAAAhO,OAAA,GAAAmZ,EAAA3X,KAAAC,OACA0X,EAAAjC,cAAAlJ,EAAAA,EAAAhO,OAAA,GAKA,IAAAqO,GAAAjO,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,GACAgY,EAAArL,EAAAK,EAAA,IACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAEA,IAAAzR,GAAA6X,GAAArL,EAAAK,EAAA,GAAAgL,GAAApG,CACAkG,GAAA3X,MAAAA,EAAA2X,EAAA3X,KAAAC,EACA0X,EAAAjC,cAAAlJ,EAAAK,EAAA,OAGAnO,EAAAJ,QAAAM,EAAA6Y,uBzBk7CG3W,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKwK,IAAI,SAAS9Z,EAAQU,EAAOJ,G0Bl+CjF,GAAAM,GAAAZ,EAAA,mBACAY,GAAA4O,eAAAxP,EAAA,oBACAY,EAAA6K,eAAA,SAAApK,GAEAG,KAAAH,KAAAA,GAEAT,EAAA6K,eAAAhK,WACAgR,KAAA7R,EAAA4O,eAAAE,KACA8C,SAAA,KACAuH,IAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,EACAva,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACAiM,KAAA,KACAtD,eAAA,KACAgE,QAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,cAAA,EACAX,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACA2N,MAAA,KACAzS,MAAA,EAAAE,OAAA,EACAwC,UAAA,WAEA,GAAA1C,GAAAlG,KAAAoL,SAAApL,KAAAkL,QAAA9E,EAAApG,KAAAqL,SAAArL,KAAAmL,QACAjN,EAAA8B,KAAAwY,UAAAxZ,MAKA,IAJAgB,KAAAuY,KAAAvY,KAAAuY,IAAAvZ,QAAAd,IAEA8B,KAAAuY,IAAA,GAAAnZ,GAAAwZ,aAAA1a,IAEA8B,KAAAsL,aAEA,IAAA,GAAA7M,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAuY,IAAA9Z,GAAAuB,KAAAkL,QAAAlL,KAAAwY,UAAA/Z,EAAA,GAAAyH,EACAlG,KAAAuY,IAAA9Z,EAAA,GAAAuB,KAAAmL,QAAA/E,EAAApG,KAAAwY,UAAA/Z,GAAA2H,MAGA,KAAA,GAAA3H,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAuY,IAAA9Z,GAAAuB,KAAAkL,QAAAlL,KAAAwY,UAAA/Z,GAAAyH,EACAlG,KAAAuY,IAAA9Z,EAAA,GAAAuB,KAAAmL,QAAAnL,KAAAwY,UAAA/Z,EAAA,GAAA2H,GAIA8K,qBAAA,SAAA1J,EAAAC,EAAA0K,EAAAf,GAEA,GAAAD,GAAAgB,EAAAhB,IACA3J,IAAA2J,EAAAjC,OACAzH,GAAA0J,EAAA9B,MACA,IAAAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACA4B,EAAAhR,KAAAgR,SACA6H,EAAA7H,EAAAhS,MACAmT,GAAAgD,mBAAAnW,QAAA6Z,IAAA7H,EAAAmB,EAAAgD,mBACA,KAAA,GAAA1W,GAAA,EAAAoa,EAAApa,EAAAA,GAAA,EACA,CACA,GAAAqa,GAAA9H,EAAAvS,GACAsa,EAAA/H,EAAAvS,EAAA,EACA2S,GAAA3S,GAAAqa,EAAA9J,EAAA+J,EAAA9J,EAAAzH,EACA4J,EAAA3S,EAAA,GAAAqa,EAAA3J,EAAA4J,EAAA3J,EAAA3H,KAIAvI,EAAAJ,QAAAM,EAAA6K,iB1Bs+CG3I,eAAe,GAAGiQ,mBAAmB,KAAKyH,IAAI,SAASxa,EAAQU,EAAOJ,G2BriDzE,GAAAM,GAAAZ,EAAA,eACAY,GAAA4O,eAAAxP,EAAA,oBACAY,EAAA4K,iBAAA,SAAAnK,GAEAG,KAAAH,KAAAA,EACAG,KAAAoX,UACApX,KAAAoX,OAAApY,OAAA,EACAgB,KAAAuY,OACAvY,KAAAuY,IAAAvZ,OAAA,GAEAI,EAAA4K,iBAAA/J,WACAgR,KAAA7R,EAAA4O,eAAA1G,OACAE,EAAA,EAAAC,EAAA,EACAiH,SAAA,EACAE,OAAA,EAAAC,OAAA,EACA3I,MAAA,EAAAE,OAAA,EACAjI,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACAiM,KAAA,KACAtD,eAAA,KACAyD,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACAN,OAAA,SAAApM,EAAAoJ,EAAAC,EAAAC,EAAAL,GAEA,GAAAgR,GAAAvY,KAAAuY,GACAhR,IAEAgR,EAAA,GAAAja,EACAia,EAAA,GAAA3Q,EACA2Q,EAAA,GAAAja,EACAia,EAAA,GAAA7Q,EACA6Q,EAAA,GAAA5Q,EACA4Q,EAAA,GAAA7Q,EACA6Q,EAAA,GAAA5Q,EACA4Q,EAAA,GAAA3Q,IAEA2Q,EAAA,GAAAja,EACAia,EAAA,GAAA3Q,EACA2Q,EAAA,GAAAja,EACAia,EAAA,GAAA7Q,EACA6Q,EAAA,GAAA5Q,EACA4Q,EAAA,GAAA7Q,EACA6Q,EAAA,GAAA5Q,EACA4Q,EAAA,GAAA3Q,IAGAqR,aAAA,WAEA,GAAAC,GAAAlZ,KAAAkG,MAAAlG,KAAA+K,oBAAA/K,KAAA4O,OACAuK,EAAAnZ,KAAAoG,OAAApG,KAAAgL,qBAAAhL,KAAA6O,OACA8B,GAAA3Q,KAAAkG,MAAA,EAAAlG,KAAA4O,OAAA5O,KAAA2K,cAAAuO,EACAtI,GAAA5Q,KAAAoG,OAAA,EAAApG,KAAA6O,OAAA7O,KAAA4K,cAAAuO,EACAC,EAAAzI,EAAA3Q,KAAA6K,YAAAqO,EACAG,EAAAzI,EAAA5Q,KAAA8K,aAAAqO,EACAnJ,EAAAhQ,KAAA0O,SAAAtP,EAAA6Q,OACAC,EAAAlP,KAAAkP,IAAAF,GACAG,EAAAnP,KAAAmP,IAAAH,GACAsJ,EAAA3I,EAAAT,EAAAlQ,KAAAwH,EACA+R,EAAA5I,EAAAR,EACAqJ,EAAA5I,EAAAV,EAAAlQ,KAAAyH,EACAgS,EAAA7I,EAAAT,EACAuJ,EAAAN,EAAAlJ,EAAAlQ,KAAAwH,EACAmS,EAAAP,EAAAjJ,EACAyJ,EAAAP,EAAAnJ,EAAAlQ,KAAAyH,EACAoS,EAAAR,EAAAlJ,EACAiH,EAAApX,KAAAoX,MACAA,GAAA,GAAAkC,EAAAG,EACArC,EAAA,GAAAoC,EAAAD,EACAnC,EAAA,GAAAkC,EAAAO,EACAzC,EAAA,GAAAwC,EAAAL,EACAnC,EAAA,GAAAsC,EAAAG,EACAzC,EAAA,GAAAwC,EAAAD,EACAvC,EAAA,GAAAsC,EAAAD,EACArC,EAAA,GAAAoC,EAAAG,GAEAG,gBAAA,SAAAtS,EAAAC,EAAA0J,EAAAH,GAEAxJ,GAAA2J,EAAAjC,OACAzH,GAAA0J,EAAA9B,MACA,IAAAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACAgI,EAAApX,KAAAoX,MACApG,GAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAzH,EACAwJ,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAA3H,EACAuJ,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAzH,EACAwJ,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAA3H,EACAuJ,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAzH,EACAwJ,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAA3H,EACAuJ,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAzH,EACAwJ,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAA3H,IAGAvI,EAAAJ,QAAAM,EAAA4K,mB3ByiDG1I,eAAe,GAAGiQ,mBAAmB,KAAKwI,IAAI,SAASvb,EAAQU,EAAOJ,G4BpoDzE,GAAAM,GAAAZ,EAAA,mBACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAA4a,eAAA,SAAAlN,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAA4a,eAAA/Z,WACA0V,UAAA,EACAxI,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAA4Z,GAEA5M,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAA4M,GAEA/Z,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAmE,GAAAhR,EAAA0V,MAAA7V,KAAA2V,UAEA,IAAAtV,GAAA2M,EAAAA,EAAAhO,OAAA,GACA,CAEA,IADA,GAAAkb,GAAA/I,EAAAxP,KAAA+M,SAAA1B,EAAAA,EAAAhO,OAAA,GAAAmS,EAAAzC,SACAwL,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GAEA,aADA/I,EAAAzC,UAAAwL,EAAAzZ,GAKA,GAAA4M,GAAAjO,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,GACA8Z,EAAAnN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAGA,KADA,GAAAiI,GAAAlN,EAAAK,EAAA,GAAA8M,EACAD,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GAEA,KADAA,EAAA/I,EAAAxP,KAAA+M,UAAAyL,EAAAD,EAAAjI,GAAAd,EAAAzC,SACAwL,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GACA/I,GAAAzC,UAAAwL,EAAAzZ,KAGAvB,EAAAJ,QAAAM,EAAA4a,iB5BwoDG1Y,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAKsM,IAAI,SAAS5b,EAAQU,EAAOJ,G6BnsDjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAAib,cAAA,SAAAvN,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAAib,cAAApa,WACA0V,UAAA,EACAxI,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAmH,EAAAC,GAEA4F,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAA7F,EACAxH,KAAAgN,OAAAK,EAAA,GAAA5F,GAEAvH,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAmE,GAAAhR,EAAA0V,MAAA7V,KAAA2V,UAEA,IAAAtV,GAAA2M,EAAAA,EAAAhO,OAAA,GAIA,MAFAmS,GAAAvC,SAAAuC,EAAAxP,KAAAiN,OAAA5B,EAAAA,EAAAhO,OAAA,GAAAmS,EAAAvC,QAAAnO,OACA0Q,EAAAtC,SAAAsC,EAAAxP,KAAAkN,OAAA7B,EAAAA,EAAAhO,OAAA,GAAAmS,EAAAtC,QAAApO,EAKA,IAAA4M,GAAAjO,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,GACAia,EAAAtN,EAAAK,EAAA,GACAkN,EAAAvN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEAd,EAAAvC,SAAAuC,EAAAxP,KAAAiN,QAAA0L,GAAAtN,EAAAK,EAAA,GAAAiN,GAAArI,GAAAd,EAAAvC,QAAAnO,EACA0Q,EAAAtC,SAAAsC,EAAAxP,KAAAkN,QAAA0L,GAAAvN,EAAAK,EAAA,GAAAkN,GAAAtI,GAAAd,EAAAtC,QAAApO,KAGAvB,EAAAJ,QAAAM,EAAAib,gB7BusDG/Y,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAK0M,IAAI,SAAShc,EAAQU,EAAOJ,G8BvvDjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAiP,KAAA7P,EAAA,UACAY,EAAAqb,KAAAjc,EAAA,UACAY,EAAA6W,aAAAzX,EAAA,kBACAY,EAAAsb,SAAA,SAAA7W,GAEA7D,KAAA2B,KAAAkC,EAEA7D,KAAA6V,QACA,KAAA,GAAApX,GAAA,EAAAP,EAAA2F,EAAAgS,MAAA7W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA6P,GAAAzK,EAAAgS,MAAApX,GACA8P,EAAAD,EAAAC,OAAAvO,KAAA6V,MAAAhS,EAAAgS,MAAAxJ,QAAAiC,EAAAC,SAAA,IACAvO,MAAA6V,MAAArS,KAAA,GAAApE,GAAAiP,KAAAC,EAAAtO,KAAAuO,IAGAvO,KAAA0N,SACA1N,KAAAmU,YACA,KAAA,GAAA1V,GAAA,EAAAP,EAAA2F,EAAA6J,MAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAkc,GAAA9W,EAAA6J,MAAAjP,GACA0S,EAAAnR,KAAA6V,MAAAhS,EAAAgS,MAAAxJ,QAAAsO,EAAArM,WACA6D,EAAA,GAAA/S,GAAAqb,KAAAE,EAAAxJ,EACAnR,MAAA0N,MAAAlK,KAAA2O,GACAnS,KAAAmU,UAAA3Q,KAAA/E,GAGAuB,KAAAoY,gBACA,KAAA,GAAA3Z,GAAA,EAAAP,EAAA2F,EAAAuU,cAAApZ,OAAAd,EAAAO,EAAAA,IACAuB,KAAAoY,cAAA5U,KAAA,GAAApE,GAAA6W,aAAApS,EAAAuU,cAAA3Z,GAAAuB,MAEAA,MAAA4a,aACA5a,KAAA6a,eAEAzb,EAAAsb,SAAAza,WACAuH,EAAA,EAAAC,EAAA,EACA8C,KAAA,KACApM,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACA8B,KAAA,EACAyO,OAAA,EAAAC,OAAA,EAEA8L,YAAA,WAEA,GAAAzC,GAAApY,KAAAoY,cACA0C,EAAA1C,EAAApZ,OAEA+b,EAAAD,EAAA,EACAF,EAAA5a,KAAA4a,SACAA,GAAA5b,OAAA+b,IAAAH,EAAA5b,OAAA+b,EACA,KAAA,GAAAtc,GAAA,EAAAP,EAAA0c,EAAA5b,OAAAd,EAAAO,EAAAA,IACAmc,EAAAnc,GAAAO,OAAA,CACA,MAAA4b,EAAA5b,OAAA+b,GACAH,EAAAA,EAAA5b,UAEA,IAAAgc,GAAAJ,EAAA,GACA/E,EAAA7V,KAAA6V,KAEAoF,GACA,IAAA,GAAAxc,GAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0S,GAAA0E,EAAApX,GACAyC,EAAAiQ,CACA,GAAA,CACA,IAAA,GAAAnO,GAAA,EAAA8X,EAAA9X,EAAAA,IAKA,IAHA,GAAAmV,GAAAC,EAAApV,GACAuL,EAAA4J,EAAAtC,MAAA,GACAc,EAAAwB,EAAAtC,MAAAsC,EAAAtC,MAAA7W,OAAA,KAEA,CACA,GAAAkC,GAAAyV,EACA,CACAiE,EAAA5X,GAAAQ,KAAA2N,GACAyJ,EAAA5X,EAAA,GAAAQ,KAAA2N,EACA,SAAA8J,GAEA,GAAAtE,GAAApI,EAAA,KACAoI,GAAAA,EAAApI,OAGArN,EAAAA,EAAAqN,aACArN,EACA8Z,GAAAA,EAAAhc,QAAAmS,IAIAxB,qBAAA,WAGA,IAAA,GADAkG,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0S,GAAA0E,EAAApX,EACA0S,GAAAxC,WAAAwC,EAAAzC,SAGA,IADA,GAAAjQ,GAAA,EAAA4C,EAAArB,KAAA4a,UAAA5b,OAAA,IAEA,CAEA,IAAA,GADAkc,GAAAlb,KAAA4a,UAAAnc,GACAuE,EAAA,EAAAC,EAAAiY,EAAAlc,OAAAiE,EAAAD,EAAAA,IACAkY,EAAAlY,GAAA2M,sBACA,IAAAlR,GAAA4C,EAAA,KACArB,MAAAoY,cAAA3Z,GAAAyB,QACAzB,MAIA+P,eAAA,WAEAxO,KAAAmb,sBACAnb,KAAAob,uBAEAD,oBAAA,WAGA,IAAA,GADAtF,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACAoX,EAAApX,GAAA+P,gBAGA,KAAA,GADA4J,GAAApY,KAAAoY,cACA3Z,EAAA,EAAAP,EAAAka,EAAApZ,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0Z,GAAAC,EAAA3Z,EACA0Z,GAAAjC,cAAAiC,EAAAxW,KAAAuU,cACAiC,EAAA3X,IAAA2X,EAAAxW,KAAAnB,MAGA4a,oBAAA,WAGA,IAAA,GADA1N,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IAEAiP,EAAAjP,GAAA+P,eAAA/P,EAGAuB,MAAA4C,kBAGAyY,YAAA,WAEA,MAAArb,MAAA6V,MAAA7W,OAAAgB,KAAA6V,MAAA,GAAA,MAGAM,SAAA,SAAAmF,GAGA,IAAA,GADAzF,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,GAAAoX,EAAApX,GAAAkD,KAAA9B,MAAAyb,EAAA,MAAAzF,GAAApX,EACA,OAAA,OAGA8c,cAAA,SAAAD,GAGA,IAAA,GADAzF,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,GAAAoX,EAAApX,GAAAkD,KAAA9B,MAAAyb,EAAA,MAAA7c,EACA,OAAA,IAGA+c,SAAA,SAAAC,GAGA,IAAA,GADA/N,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,GAAAiP,EAAAjP,GAAAkD,KAAA9B,MAAA4b,EAAA,MAAA/N,GAAAjP,EACA,OAAA,OAGAid,cAAA,SAAAD,GAGA,IAAA,GADA/N,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,GAAAiP,EAAAjP,GAAAkD,KAAA9B,MAAA4b,EAAA,MAAAhd,EACA,OAAA,IAEAkd,cAAA,SAAAC,GAEA,GAAArR,GAAAvK,KAAA2B,KAAAka,SAAAD,EACA,KAAArR,EAAA,KAAA,mBAAAqR,CACA5b,MAAA8b,QAAAvR,IAMAuR,QAAA,SAAAC,GAEA,GAAAA,EAEA,GAAA/b,KAAAuK,KACAwR,EAAAC,WAAAhc,KAAAA,KAAAuK,UAIA,KAAA,GADAmD,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0T,GAAAzE,EAAAjP,GACAoB,EAAAsS,EAAAxQ,KAAA2L,cACA,IAAAzN,EACA,CACA,GAAA4K,GAAAsR,EAAAE,cAAAxd,EAAAoB,EACA4K,IAAA0H,EAAAxE,cAAAlD,IAKAzK,KAAAuK,KAAAwR,GAGAG,wBAAA,SAAAT,EAAAnO,GAEA,MAAAtN,MAAA4N,yBAAA5N,KAAA2B,KAAA+Z,cAAAD,GAAAnO,IAGAM,yBAAA,SAAAV,EAAAI,GAEA,GAAAtN,KAAAuK,KACA,CACA,GAAAE,GAAAzK,KAAAuK,KAAA0R,cAAA/O,EAAAI,EACA,IAAA7C,EAAA,MAAAA,GAEA,MAAAzK,MAAA2B,KAAAwa,YAAAnc,KAAA2B,KAAAwa,YAAAF,cAAA/O,EAAAI,GACA,MAGAK,cAAA,SAAA8N,EAAAnO,GAGA,IAAA,GADAI,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0T,GAAAzE,EAAAjP,EACA,IAAA0T,EAAAxQ,KAAA9B,MAAA4b,EACA,CACA,GAAAhR,GAAA,IACA,IAAA6C,IAEA7C,EAAAzK,KAAA4N,yBAAAnP,EAAA6O,IACA7C,GAAA,KAAA,yBAAA6C,EAAA,eAAAmO,CAGA,YADAtJ,GAAAxE,cAAAlD,IAIA,KAAA,mBAAAgR,GAGAW,iBAAA,SAAAC,GAGA,IAAA,GADAjE,GAAApY,KAAAoY,cACA3Z,EAAA,EAAAP,EAAAka,EAAApZ,OAAAd,EAAAO,EAAAA,IACA,GAAA2Z,EAAA3Z,GAAAkD,KAAA9B,MAAAwc,EAAA,MAAAjE,GAAA3Z,EACA,OAAA,OAEAyD,OAAA,SAAAC,GAEAnC,KAAAK,MAAA8B,GAEAS,eAAA,WACA,IAAA,GAAAnE,GAAA,EAAAP,EAAA8B,KAAAmU,UAAAnV,OAAAd,EAAAO,EAAAA,IAEAuB,KAAAmU,UAAA1V,GAAAA,IAIAS,EAAAJ,QAAAM,EAAAsb,W9B2vDGpZ,eAAe,GAAGgb,SAAS,GAAGC,iBAAiB,GAAGC,SAAS,KAAKC,IAAI,SAASje,EAAQU,EAAOJ,G+BhgE/F,GAAAM,GAAAZ,EAAA,sBACAY,GAAA4O,eAAAxP,EAAA,oBACAY,EAAAsd,eAAA,WAEA1c,KAAA2c,eACA3c,KAAA4c,YACA5c,KAAA6c,kBAEAzd,EAAAsd,eAAAzc;AACA6c,KAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,KAAA,EACA/a,OAAA,SAAA/B,EAAA+c,GAEA,GAAAxP,GAAAvN,EAAAuN,MACAyP,EAAAzP,EAAA1O,OACAwI,EAAArH,EAAAqH,EAAAC,EAAAtH,EAAAsH,EACAoV,EAAA7c,KAAA6c,cACAF,EAAA3c,KAAA2c,YACAC,EAAA5c,KAAA4c,QAEAC,GAAA7d,OAAA,CACA,KAAA,GAAAP,GAAA,EAAAP,EAAA0e,EAAA5d,OAAAd,EAAAO,EAAAA,IACAke,EAAAnZ,KAAAoZ,EAAAne,GACAme,GAAA5d,OAAA,CAEA,KAAA,GAAAP,GAAA,EAAA0e,EAAA1e,EAAAA,IACA,CACA,GAAA0T,GAAAzE,EAAAjP,GACA2e,EAAAjL,EAAA1H,UACA,IAAA2S,EAAAnM,MAAA7R,EAAA4O,eAAAC,YAAA,CACA4O,EAAArZ,KAAA4Z,EAEA,IAAAC,GAAAC,EAAAX,EAAA3d,MACAse,GAAA,GAEAD,EAAAV,EAAAW,EAAA,GACAX,EAAAY,OAAAD,EAAA,EAAA,IAEAD,KACAT,EAAApZ,KAAA6Z,GAEAA,EAAAre,OAAAoe,EAAApM,SAAAhS,OACAoe,EAAAlM,qBAAA1J,EAAAC,EAAA0K,EAAAhB,KAAAkM,IAGAH,GAAAld,KAAAwd,eAEAA,YAAA,WAIA,IAAA,GAFAZ,GAAA5c,KAAA4c,SACAE,EAAAtP,OAAAC,UAAAsP,EAAAvP,OAAAC,UAAAuP,EAAAxP,OAAAiQ,UAAAR,EAAAzP,OAAAiQ,UACAhf,EAAA,EAAAP,EAAA0e,EAAA5d,OAAAd,EAAAO,EAAAA,IAGA,IAAA,GADAuS,GAAA4L,EAAAne,GACAuE,EAAA,EAAAC,EAAA+N,EAAAhS,OAAAiE,EAAAD,EAAAA,GAAA,EACA,CACA,GAAAwE,GAAAwJ,EAAAhO,GACAyE,EAAAuJ,EAAAhO,EAAA,EACA8Z,GAAA9b,KAAA0c,IAAAZ,EAAAtV,GACAuV,EAAA/b,KAAA0c,IAAAX,EAAAtV,GACAuV,EAAAhc,KAAA2c,IAAAX,EAAAxV,GACAyV,EAAAjc,KAAA2c,IAAAV,EAAAxV,GAGAzH,KAAA8c,KAAAA,EACA9c,KAAA+c,KAAAA,EACA/c,KAAAgd,KAAAA,EACAhd,KAAAid,KAAAA,GAGAW,kBAAA,SAAApW,EAAAC,GAEA,MAAAD,IAAAxH,KAAA8c,MAAAtV,GAAAxH,KAAAgd,MAAAvV,GAAAzH,KAAA+c,MAAAtV,GAAAzH,KAAAid,MAGAY,sBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAnB,GAAA9c,KAAA8c,KAAAC,EAAA/c,KAAA+c,KAAAC,EAAAhd,KAAAgd,KAAAC,EAAAjd,KAAAid,IACA,IAAAH,GAAAgB,GAAAhB,GAAAkB,GAAAjB,GAAAgB,GAAAhB,GAAAkB,GAAAH,GAAAd,GAAAgB,GAAAhB,GAAAe,GAAAd,GAAAgB,GAAAhB,EACA,OAAA,CACA,IAAAiB,IAAAD,EAAAF,IAAAC,EAAAF,GACArW,EAAAyW,GAAApB,EAAAgB,GAAAC,CACA,IAAAtW,EAAAsV,GAAAE,EAAAxV,EAAA,OAAA,CAEA,IADAA,EAAAyW,GAAAlB,EAAAc,GAAAC,EACAtW,EAAAsV,GAAAE,EAAAxV,EAAA,OAAA,CACA,IAAAD,IAAAuV,EAAAgB,GAAAG,EAAAJ,CACA,OAAAtW,GAAAsV,GAAAE,EAAAxV,GAAA,GACAA,GAAAyV,EAAAc,GAAAG,EAAAJ,EACAtW,EAAAsV,GAAAE,EAAAxV,GAAA,GACA,IAGA2W,uBAAA,SAAAC,GAEA,MAAApe,MAAA8c,KAAAsB,EAAApB,MAAAhd,KAAAgd,KAAAoB,EAAAtB,MAAA9c,KAAA+c,KAAAqB,EAAAnB,MAAAjd,KAAAid,KAAAmB,EAAArB,MAIAsB,cAAA,SAAA7W,EAAAC,GAGA,IAAA,GADAmV,GAAA5c,KAAA4c,SACAne,EAAA,EAAAP,EAAA0e,EAAA5d,OAAAd,EAAAO,EAAAA,IACA,GAAAuB,KAAAse,qBAAA1B,EAAAne,GAAA+I,EAAAC,GAAA,MAAAzH,MAAA6c,cAAApe,EACA,OAAA,OAIA8f,kBAAA,SAAAT,EAAAC,EAAAC,EAAAC,GAGA,IAAA,GADArB,GAAA5c,KAAA4c,SACAne,EAAA,EAAAP,EAAA0e,EAAA5d,OAAAd,EAAAO,EAAAA,IACA,GAAAme,EAAAne,GAAA8f,kBAAAT,EAAAC,EAAAC,EAAAC,GAAA,MAAAje,MAAA6c,cAAApe,EACA,OAAA,OAGA6f,qBAAA,SAAAjB,EAAA7V,EAAAC,GAKA,IAAA,GAHAxE,GAAAoa,EAAAre,OACAwf,EAAAvb,EAAA,EACAwb,GAAA,EACAzb,EAAA,EAAAC,EAAAD,EAAAA,GAAA,EACA,CACA,GAAA0b,GAAArB,EAAAra,EAAA,GACA+Q,EAAAsJ,EAAAmB,EAAA,EACA,IAAA/W,EAAAiX,GAAA3K,GAAAtM,GAAAA,EAAAsM,GAAA2K,GAAAjX,EACA,CACA,GAAAkX,GAAAtB,EAAAra,EACA2b,IAAAlX,EAAAiX,IAAA3K,EAAA2K,IAAArB,EAAAmB,GAAAG,GAAAnX,IAAAiX,GAAAA,GAEAD,EAAAxb,EAEA,MAAAyb,IAGAG,yBAAA,SAAAvB,EAAAS,EAAAC,EAAAC,EAAAC,GAMA,IAAA,GAJAhb,GAAAoa,EAAAre,OACA6f,EAAAf,EAAAE,EAAAc,EAAAf,EAAAE,EACAc,EAAAjB,EAAAG,EAAAF,EAAAC,EACAgB,EAAA3B,EAAApa,EAAA,GAAAgc,EAAA5B,EAAApa,EAAA,GACAD,EAAA,EAAAC,EAAAD,EAAAA,GAAA,EACA,CACA,GAAAkc,GAAA7B,EAAAra,GAAAmc,EAAA9B,EAAAra,EAAA,GACAoc,EAAAJ,EAAAG,EAAAF,EAAAC,EACAG,EAAAL,EAAAE,EAAAI,EAAAL,EAAAE,EACAI,EAAAV,EAAAS,EAAAR,EAAAO,EACA7X,GAAAuX,EAAAM,EAAAR,EAAAO,GAAAG,CACA,KAAA/X,GAAAwX,GAAAE,GAAA1X,GAAAA,GAAA0X,GAAAF,GAAAxX,KAAAA,GAAAsW,GAAAE,GAAAxW,GAAAA,GAAAwW,GAAAF,GAAAtW,GACA,CACA,GAAAC,IAAAsX,EAAAO,EAAAR,EAAAM,GAAAG,CACA,KAAA9X,GAAAwX,GAAAE,GAAA1X,GAAAA,GAAA0X,GAAAF,GAAAxX,KAAAA,GAAAsW,GAAAE,GAAAxW,GAAAA,GAAAwW,GAAAF,GAAAtW,GAAA,OAAA,EAEAuX,EAAAE,EACAD,EAAAE,EAEA,OAAA,GAEAK,WAAA,SAAA/U,GAEA,GAAAlH,GAAAvD,KAAA6c,cAAAxQ,QAAA5B,EACA,OAAA,IAAAlH,EAAA,KAAAvD,KAAA4c,SAAArZ,IAEAkc,SAAA,WAEA,MAAAzf,MAAAgd,KAAAhd,KAAA8c,MAEA4C,UAAA,WAEA,MAAA1f,MAAAid,KAAAjd,KAAA+c,OAGA7d,EAAAJ,QAAAM,EAAAsd,iB/BogEGiD,kBAAkB,GAAGpO,mBAAmB,KAAKqO,IAAI,SAASphB,EAAQU,EAAOJ,GgC9qE5E,GAAAM,GAAAZ,EAAA,eACAY,GAAAygB,aAAA,WAEA7f,KAAA6V,SACA7V,KAAA0N,SACA1N,KAAA8f,SACA9f,KAAAO,UACAP,KAAA+f,cACA/f,KAAAoY,kBAEAhZ,EAAAygB,aAAA5f,WACAJ,KAAA,KACAsc,YAAA,KACAjW,MAAA,EAAAE,OAAA,EACA4Z,QAAA,KAAAC,KAAA,KAEA9J,SAAA,SAAAmF,GAGA,IAAA,GADAzF,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,GAAAoX,EAAApX,GAAAoB,MAAAyb,EAAA,MAAAzF,GAAApX,EACA,OAAA,OAGA8c,cAAA,SAAAD,GAGA,IAAA,GADAzF,GAAA7V,KAAA6V,MACApX,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,GAAAoX,EAAApX,GAAAoB,MAAAyb,EAAA,MAAA7c,EACA,OAAA,IAGA+c,SAAA,SAAAC,GAGA,IAAA,GADA/N,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IAEA,GAAAiP,EAAAjP,GAAAoB,MAAA4b,EAAA,MAAAzb,MAAA0N,MAAAjP,EAEA,OAAA,OAGAid,cAAA,SAAAD,GAGA,IAAA,GADA/N,GAAA1N,KAAA0N,MACAjP,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,GAAAiP,EAAAjP,GAAAoB,MAAA4b,EAAA,MAAAhd,EACA,OAAA,IAGAod,SAAA,SAAAD,GAGA,IAAA,GADAkE,GAAA9f,KAAA8f,MACArhB,EAAA,EAAAP,EAAA4hB,EAAA9gB,OAAAd,EAAAO,EAAAA,IACA,GAAAqhB,EAAArhB,GAAAoB,MAAA+b,EAAA,MAAAkE,GAAArhB,EACA,OAAA,OAGAyhB,UAAA,SAAAC,GAGA,IAAA,GADA5f,GAAAP,KAAAO,OACA9B,EAAA,EAAAP,EAAAqC,EAAAvB,OAAAd,EAAAO,EAAAA,IACA,GAAA8B,EAAA9B,GAAAoB,MAAAsgB,EAAA,MAAA5f,GAAA9B,EACA,OAAA,OAGAqF,cAAA,SAAAF,GAGA,IAAA,GADAmc,GAAA/f,KAAA+f,WACAthB,EAAA,EAAAP,EAAA6hB,EAAA/gB,OAAAd,EAAAO,EAAAA,IACA,GAAAshB,EAAAthB,GAAAoB,MAAA+D,EAAA,MAAAmc,GAAAthB,EACA,OAAA,OAGA2d,iBAAA,SAAAC,GAGA,IAAA,GADAjE,GAAApY,KAAAoY,cACA3Z,EAAA,EAAAP,EAAAka,EAAApZ,OAAAd,EAAAO,EAAAA,IACA,GAAA2Z,EAAA3Z,GAAAoB,MAAAwc,EAAA,MAAAjE,GAAA3Z,EACA,OAAA,QAGAS,EAAAJ,QAAAM,EAAAygB,ehCkrEGve,eAAe,KAAK8e,IAAI,SAAS5hB,EAAQU,EAAOJ,GiCpwEnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAygB,aAAArhB,EAAA,kBACAY,EAAA0R,SAAAtS,EAAA,cACAY,EAAA2Y,iBAAAvZ,EAAA,sBACAY,EAAAihB,SAAA7hB,EAAA,cACAY,EAAAkhB,KAAA9hB,EAAA,UACAY,EAAAuV,UAAAnW,EAAA,eACAY,EAAA4O,eAAAxP,EAAA,oBACAY,EAAAqS,cAAAjT,EAAA,mBACAY,EAAAyN,mBAAArO,EAAA,wBACAY,EAAA4a,eAAAxb,EAAA,oBACAY,EAAAib,cAAA7b,EAAA,mBACAY,EAAAmhB,kBAAA/hB,EAAA,uBACAY,EAAAsW,cAAAlX,EAAA,mBACAY,EAAA2W,cAAAvX,EAAA,mBACAY,EAAA6Y,qBAAAzZ,EAAA,0BACAY,EAAA4V,YAAAxW,EAAA,iBACAY,EAAA6U,kBAAAzV,EAAA,uBACAY,EAAAyV,cAAArW,EAAA,mBACAY,EAAAkV,MAAA9V,EAAA,WACAY,EAAAQ,UAAApB,EAAA,eACAY,EAAAohB,mBAAA,SAAAC,GAEAzgB,KAAAygB,iBAAAA,GAEArhB,EAAAohB,mBAAAvgB,WACAygB,MAAA,EACAC,iBAAA,SAAAC,EAAA/gB,GAEA,GAAAgE,GAAA,GAAAzE,GAAAygB,YACAhc,GAAAhE,KAAAA,CAGA,IAAAghB,GAAAD,EAAA,QACAC,KAEAhd,EAAAoc,KAAAY,EAAA,KACAhd,EAAAmc,QAAAa,EAAA,MACAhd,EAAAqC,MAAA2a,EAAA,OAAA,EACAhd,EAAAuC,OAAAya,EAAA,QAAA,EAKA,KAAA,GADAhL,GAAA+K,EAAA,MACAniB,EAAA,EAAAP,EAAA2X,EAAA7W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAqiB,GAAAjL,EAAApX,GACA8P,EAAA,IACA,IAAAuS,EAAA,SAEAvS,EAAA1K,EAAAsS,SAAA2K,EAAA,SACAvS,GAAA,KAAA,0BAAAuS,EAAA,MAEA,IAAAxS,GAAA,GAAAlP,GAAA0R,SAAAgQ,EAAA,KAAAvS,EACAD,GAAAtP,QAAA8hB,EAAA,QAAA,GAAA9gB,KAAA0gB,MACApS,EAAA9G,GAAAsZ,EAAA,GAAA,GAAA9gB,KAAA0gB,MACApS,EAAA7G,GAAAqZ,EAAA,GAAA,GAAA9gB,KAAA0gB,MACApS,EAAAI,SAAAoS,EAAA,UAAA,EACAxS,EAAAM,OAAAkS,EAAA/b,eAAA,UAAA+b,EAAA,OAAA,EACAxS,EAAAO,OAAAiS,EAAA/b,eAAA,UAAA+b,EAAA,OAAA,EACAxS,EAAAsB,aAAAkR,EAAA/b,eAAA,gBAAA+b,EAAA,cAAA,EACAxS,EAAAuB,gBAAAiR,EAAA/b,eAAA,mBAAA+b,EAAA,iBAAA,EACAjd,EAAAgS,MAAArS,KAAA8K,GAIA,GAAAyS,GAAAH,EAAA,EACA,IAAAG,EAEA,IAAA,GAAAtiB,GAAA,EAAAP,EAAA6iB,EAAA/hB,OAAAd,EAAAO,EAAAA,IACA,CAKA,IAAA,GAJAuiB,GAAAD,EAAAtiB,GACAwiB,EAAA,GAAA7hB,GAAA2Y,iBAAAiJ,EAAA,MAEAnL,EAAAmL,EAAA,MACAhe,EAAA,EAAAC,EAAA4S,EAAA7W,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAmO,GAAAtN,EAAAsS,SAAAN,EAAA7S,GACA,KAAAmO,EAAA,KAAA,sBAAA0E,EAAA7S,EACAie,GAAApL,MAAArS,KAAA2N,GAIA,GADA8P,EAAArgB,OAAAiD,EAAAsS,SAAA6K,EAAA,SACAC,EAAArgB,OAAA,KAAA,0BAAAogB,EAAA,MAEAC,GAAA/K,eAAA8K,EAAAjc,eAAA,iBAAAic,EAAA,aAAA,EAAA,GACAC,EAAAzgB,IAAAwgB,EAAAjc,eAAA,OAAAic,EAAA,IAAA,EAEAnd,EAAAuU,cAAA5U,KAAAyd,GAMA,IAAA,GADAvT,GAAAkT,EAAA,MACAniB,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAyiB,GAAAxT,EAAAjP,GACA6P,EAAAzK,EAAAsS,SAAA+K,EAAA,KACA,KAAA5S,EAAA,KAAA,wBAAA4S,EAAA,IACA,IAAAvG,GAAA,GAAAvb,GAAAihB,SAAAa,EAAA,KAAA5S,GAEA6S,EAAAD,EAAA,KACAC,KAEAxG,EAAAxc,EAAA6B,KAAAohB,QAAAD,EAAA,GACAxG,EAAAjJ,EAAA1R,KAAAohB,QAAAD,EAAA,GACAxG,EAAAhJ,EAAA3R,KAAAohB,QAAAD,EAAA,GACAxG,EAAApc,EAAAyB,KAAAohB,QAAAD,EAAA,IAGAxG,EAAArN,eAAA4T,EAAA,WAGAvG,EAAA0G,UAAAH,EAAA,OAAA9hB,EAAAihB,SAAAiB,oBAAAJ,EAAA,QAAA9hB,EAAAihB,SAAAiB,oBAAA,OAEAzd,EAAA6J,MAAAlK,KAAAmX,GAIA,GAAAmF,GAAAc,EAAA,KACA,KAAA,GAAAhF,KAAAkE,GAEA,GAAAA,EAAA/a,eAAA6W,GAAA,CACA,GAAA2F,GAAAzB,EAAAlE,GACArR,EAAA,GAAAnL,GAAAkhB,KAAA1E,EACA,KAAA,GAAAH,KAAA8F,GAEA,GAAAA,EAAAxc,eAAA0W,GAAA,CACA,GAAAvO,GAAArJ,EAAA6X,cAAAD,GACA+F,EAAAD,EAAA9F,EACA,KAAA,GAAAnO,KAAAkU,GAEA,GAAAA,EAAAzc,eAAAuI,GAAA,CACA,GAAA7C,GAAAzK,KAAAyhB,eAAAlX,EAAA+C,EAAAkU,EAAAlU,GACA7C,IAAAF,EAAAmX,cAAAxU,EAAAI,EAAA7C,IAGA5G,EAAAic,MAAAtc,KAAA+G,GACA,WAAAA,EAAA1K,OAAAgE,EAAAsY,YAAA5R,GAIA,GAAAhK,GAAAqgB,EAAA,MACA,KAAA,GAAAT,KAAA5f,GAEA,GAAAA,EAAAwE,eAAAob,GAAA,CACA,GAAAwB,GAAAphB,EAAA4f,GACAyB,EAAA,GAAAxiB,GAAAuV,UAAAwL,EACAyB,GAAArN,SAAAoN,EAAA,QAAA,EACAC,EAAApN,WAAAmN,EAAA,UAAA,EACAC,EAAAnN,YAAAkN,EAAA,QAAA,KACA9d,EAAAtD,OAAAiD,KAAAoe,GAIA,GAAA7B,GAAAa,EAAA,UACA,KAAA,GAAAhd,KAAAmc,GAEAA,EAAAhb,eAAAnB,IACA5D,KAAA6hB,cAAAje,EAAAmc,EAAAnc,GAAAC,EAGA,OAAAA,IAEA4d,eAAA,SAAAlX,EAAA1K,EAAAiiB,GAEAjiB,EAAAiiB,EAAA,MAAAjiB,CAEA,IAAAoR,GAAA7R,EAAA4O,eAAA8T,EAAA,MAAA,UACAtX,EAAAsX,EAAA,MAAAjiB,EAEA6gB,EAAA1gB,KAAA0gB,KACA,IAAAzP,GAAA7R,EAAA4O,eAAA1G,OACA,CACA,GAAAA,GAAAtH,KAAAygB,iBAAAnW,oBAAAC,EAAA1K,EAAA2K,EACA,KAAAlD,EAAA,MAAA,KACAA,GAAAkD,KAAAA,EACAlD,EAAAE,GAAAsa,EAAA,GAAA,GAAApB,EACApZ,EAAAG,GAAAqa,EAAA,GAAA,GAAApB,EACApZ,EAAAsH,OAAAkT,EAAA/c,eAAA,UAAA+c,EAAA,OAAA,EACAxa,EAAAuH,OAAAiT,EAAA/c,eAAA,UAAA+c,EAAA,OAAA,EACAxa,EAAAoH,SAAAoT,EAAA,UAAA,EACAxa,EAAApB,OAAA4b,EAAA,OAAA,GAAApB,EACApZ,EAAAlB,QAAA0b,EAAA,QAAA,GAAApB,CAEA,IAAAS,GAAAW,EAAA,KAUA,OATAX,KAEA7Z,EAAAnJ,EAAA6B,KAAAohB,QAAAD,EAAA,GACA7Z,EAAAoK,EAAA1R,KAAAohB,QAAAD,EAAA,GACA7Z,EAAAqK,EAAA3R,KAAAohB,QAAAD,EAAA,GACA7Z,EAAA/I,EAAAyB,KAAAohB,QAAAD,EAAA,IAGA7Z,EAAA2R,eACA3R,EACA,GAAA2J,GAAA7R,EAAA4O,eAAAE,KACA,CACA,GAAAA,GAAAlO,KAAAygB,iBAAAxV,kBAAAV,EAAA1K,EAAA2K,EACA,OAAA0D,IACAA,EAAA1D,KAAAA,EACA0D,EAAA8C,SAAAhR,KAAA+hB,cAAAD,EAAA,WAAApB,GACAxS,EAAAuK,UAAAzY,KAAAgiB,YAAAF,EAAA,aACA5T,EAAAsK,UAAAxY,KAAA+hB,cAAAD,EAAA,MAAA,GACA5T,EAAAtF,YAEAuY,EAAAW,EAAA,MACAX,IAEAjT,EAAA/P,EAAA6B,KAAAohB,QAAAD,EAAA,GACAjT,EAAAwD,EAAA1R,KAAAohB,QAAAD,EAAA,GACAjT,EAAAyD,EAAA3R,KAAAohB,QAAAD,EAAA,GACAjT,EAAA3P,EAAAyB,KAAAohB,QAAAD,EAAA,IAGAjT,EAAAwK,WAAA,GAAAoJ,EAAA,MAAA,GACAA,EAAA,QAAA5T,EAAAyK,MAAA3Y,KAAAgiB,YAAAF,EAAA,UACA5T,EAAAhI,OAAA4b,EAAA,OAAA,GAAApB,EACAxS,EAAA9H,QAAA0b,EAAA,QAAA,GAAApB,EACAxS,GApBA,KAqBA,GAAA+C,GAAA7R,EAAA4O,eAAAG,YACA,CACA,GAAAD,GAAAlO,KAAAygB,iBAAAlV,yBAAAhB,EAAA1K,EAAA2K,EACA,KAAA0D,EAAA,MAAA,KACAA,GAAA1D,KAAAA,CAMA,KAAA,GAJA+N,GAAAvY,KAAA+hB,cAAAD,EAAA,MAAA,GACA9Q,EAAAhR,KAAA+hB,cAAAD,EAAA,WAAA,GACAG,KACApM,KACApX,EAAA,EAAAP,EAAA8S,EAAAhS,OAAAd,EAAAO,GACA,CACA,GAAAyjB,GAAA,EAAAlR,EAAAvS,IACAoX,GAAAA,EAAA7W,QAAAkjB,CACA,KAAA,GAAAjf,GAAAxE,EAAA,EAAAyjB,EAAAjf,EAAAxE,GAEAoX,EAAAA,EAAA7W,QAAAgS,EAAAvS,GACAwjB,EAAAA,EAAAjjB,QAAAgS,EAAAvS,EAAA,GAAAiiB,EACAuB,EAAAA,EAAAjjB,QAAAgS,EAAAvS,EAAA,GAAAiiB,EACAuB,EAAAA,EAAAjjB,QAAAgS,EAAAvS,EAAA,GACAA,GAAA,EAsBA,MAnBAyP,GAAA2H,MAAAA,EACA3H,EAAA+T,QAAAA,EACA/T,EAAAuK,UAAAzY,KAAAgiB,YAAAF,EAAA,aACA5T,EAAAsK,UAAAD,EACArK,EAAAtF,YAEAuY,EAAAW,EAAA,MACAX,IAEAjT,EAAA/P,EAAA6B,KAAAohB,QAAAD,EAAA,GACAjT,EAAAwD,EAAA1R,KAAAohB,QAAAD,EAAA,GACAjT,EAAAyD,EAAA3R,KAAAohB,QAAAD,EAAA,GACAjT,EAAA3P,EAAAyB,KAAAohB,QAAAD,EAAA,IAGAjT,EAAAwK,WAAA,GAAAoJ,EAAA,MAAA,GACAA,EAAA,QAAA5T,EAAAyK,MAAA3Y,KAAAgiB,YAAAF,EAAA,UACA5T,EAAAhI,OAAA4b,EAAA,OAAA,GAAApB,EACAxS,EAAA9H,QAAA0b,EAAA,QAAA,GAAApB,EACAxS,EACA,GAAA+C,GAAA7R,EAAA4O,eAAAC,YACA,CAGA,IAAA,GAFAxD,GAAAzK,KAAAygB,iBAAAjV,yBAAAjB,EAAA1K,GACAmR,EAAA8Q,EAAA,SACArjB,EAAA,EAAAP,EAAA8S,EAAAhS,OAAAd,EAAAO,EAAAA,IACAgM,EAAAuG,SAAAxN,KAAAwN,EAAAvS,GAAAiiB,EACA,OAAAjW,GAEA,KAAA,4BAAAwG,GAEA4Q,cAAA,SAAAhiB,EAAAiiB,EAAAje,GAEA,GAAA/D,MACAC,EAAA,EAEA2N,EAAAoU,EAAA,KACA,KAAA,GAAArG,KAAA/N,GAEA,GAAAA,EAAA3I,eAAA0W,GAAA,CACA,GAAAyF,GAAAxT,EAAA+N,GACAvO,EAAArJ,EAAA6X,cAAAD,EAEA,KAAA,GAAA0G,KAAAjB,GAEA,GAAAA,EAAAnc,eAAAod,GAAA,CACA,GAAAxhB,GAAAugB,EAAAiB,EACA,IAAA,SAAAA,EACA,CACA,GAAAC,GAAA,GAAAhjB,GAAAqS,cAAA9Q,EAAA3B,OACAojB,GAAAlV,UAAAA,CAGA,KAAA,GADAG,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,GACA0iB,EAAAkB,EAAA,MACAlkB,EAAA6B,KAAAohB,QAAAD,EAAA,GACAzP,EAAA1R,KAAAohB,QAAAD,EAAA,GACAxP,EAAA3R,KAAAohB,QAAAD,EAAA,GACA5iB,EAAAyB,KAAAohB,QAAAD,EAAA,EACAiB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAlkB,EAAAuT,EAAAC,EAAApT,GACAyB,KAAAsiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEAvN,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,CAAA,GAAA,cAAAgV,EAeA,KAAA,qCAAAA,EAAA,KAAA1G,EAAA,GAbA,IAAA2G,GAAA,GAAAhjB,GAAAyN,mBAAAlM,EAAA3B,OACAojB,GAAAlV,UAAAA,CAGA,KAAA,GADAG,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,EACA2jB,GAAAhV,SAAAC,IAAAgV,EAAA,KAAAA,EAAA,MAEAviB,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAAoV,EAAAjV,gBAAA,MAOA,GAAA0I,GAAAiM,EAAA,KACA,KAAA,GAAAxG,KAAAzF,GAEA,GAAAA,EAAA9Q,eAAAuW,GAAA,CACA,GAAA3F,GAAA9R,EAAA0X,cAAAD,EACA,IAAA,IAAA3F,EAAA,KAAA,mBAAA2F,CACA,IAAAwF,GAAAjL,EAAAyF,EAEA,KAAA,GAAA6G,KAAArB,GAEA,GAAAA,EAAA/b,eAAAod,GAAA,CACA,GAAAxhB,GAAAmgB,EAAAqB,EACA,IAAA,UAAAA,EACA,CACA,GAAAC,GAAA,GAAAhjB,GAAA4a,eAAArZ,EAAA3B,OACAojB,GAAAzM,UAAAA,CAGA,KAAA,GADAtI,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,EACA2jB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAA,EAAA,OACAriB,KAAAsiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEAvN,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,IAAA,aAAAgV,GAAA,SAAAA,EACA,CACA,GAAAC,GACAG,EAAA,CACA,UAAAJ,EACAC,EAAA,GAAAhjB,GAAAib,cAAA1Z,EAAA3B,SAGAojB,EAAA,GAAAhjB,GAAAmhB,kBAAA5f,EAAA3B,QACAujB,EAAAviB,KAAA0gB,OAEA0B,EAAAzM,UAAAA,CAGA,KAAA,GADAtI,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,GACA+I,GAAA6a,EAAA,GAAA,GAAAE,EACA9a,GAAA4a,EAAA,GAAA,GAAAE,CACAH,GAAAhV,SAAAC,EAAAgV,EAAA,KAAA7a,EAAAC,GACAzH,KAAAsiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEAvN,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,CAAA,GAAA,SAAAgV,GAAA,SAAAA,EAiBA,KAAA,qCAAAA,EAAA,KAAA7G,EAAA,GAfA,IAAA9T,GAAA,SAAA2a,EACAC,EAAA5a,EAAA,GAAApI,GAAAsW,cAAA/U,EAAA3B,QAAA,GAAAI,GAAA2W,cAAApV,EAAA3B,OACAojB,GAAAzM,UAAAA,CAIA,KAAA,GAFA6M,GAAAhb,EAAA,IAAA,IACA6F,EAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,EACA2jB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAA,EAAAG,KAAA,GACAnV,IAEAvN,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,MAMA,GAAA6T,GAAAc,EAAA,EACA,KAAA,GAAAzF,KAAA2E,GAEA,GAAAA,EAAAjc,eAAAsX,GAAA,CACA,GAAAlE,GAAAtU,EAAAuY,iBAAAC,GACA1b,EAAAqgB,EAAA3E,GACA+F,EAAA,GAAAhjB,GAAA6Y,qBAAAtX,EAAA3B,OACAojB,GAAAlK,kBAAArU,EAAAuU,cAAA/L,QAAA8L,EAEA,KAAA,GADA9K,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4jB,GAAA1hB,EAAAlC,GACA+B,EAAA6hB,EAAAtd,eAAA,OAAAsd,EAAA,IAAA,EACAnM,GAAAmM,EAAAtd,eAAA,iBAAAsd,EAAA,aAAA,EAAA,EACAD,GAAAhV,SAAAC,EAAAgV,EAAA,KAAA7hB,EAAA0V,GACAlW,KAAAsiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEAvN,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,IAGA,GAAAsV,GAAAX,EAAA,GACA,KAAA,GAAAlG,KAAA6G,GACA,CACA,GAAAlY,GAAA1G,EAAAgY,SAAAD,GACAsF,EAAAuB,EAAA7G,EACA,KAAAH,IAAAyF,GACA,CACA,GAAAhU,GAAArJ,EAAA6X,cAAAD,GACAiH,EAAAxB,EAAAzF,EACA,KAAA,GAAAkH,KAAAD,GACA,CACA,GAAA/hB,GAAA+hB,EAAAC,GACAP,EAAA,GAAAhjB,GAAA4V,YAAArU,EAAA3B,QACAyL,EAAAF,EAAA0R,cAAA/O,EAAAyV,EACA,KAAAlY,EAAA,KAAA,6BAAAkY,CACAP,GAAAlV,UAAAA,EACAkV,EAAA3X,WAAAA,CAEA,IACAyK,GADA0N,EAAAnY,EAAAwG,MAAA7R,EAAA4O,eAAAE,IAGAgH,GADA0N,EACAnY,EAAAuG,SAAAhS,OAEAyL,EAAAwX,QAAAjjB,OAAA,EAAA,CAGA,KAAA,GADAqO,GAAA,EACA5O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GACAuS,GADAqR,EAAA1hB,EAAAlC,EAEA,IAAA4jB,EAAA,SASA,CACA,GAAAQ,GAAAR,EAAA,QACArR,KACA,KAAA,GAAA8R,GAAA,EAAA5N,EAAA4N,IAAAA,EAAA9R,EAAAxN,KAAA,EACA,IAAAqQ,GAAAwO,EAAA,QAAA,EACApf,EAAA4f,EAAA7jB,MACA,IAAA,GAAAgB,KAAA0gB,MAEA,IAAA,GAAA1d,GAAA,EAAAC,EAAAD,EAAAA,IACAgO,EAAAhO,EAAA6Q,GAAAgP,EAAA7f,OAEA,KAAA,GAAAA,GAAA,EAAAC,EAAAD,EAAAA,IACAgO,EAAAhO,EAAA6Q,GAAAgP,EAAA7f,GAAAhD,KAAA0gB,KAEA,IAAAkC,EAGA,IAAA,GADAG,GAAAtY,EAAAuG,SACAhO,EAAA,EAAAC,EAAA+N,EAAAhS,OAAAiE,EAAAD,EAAAA,IACAgO,EAAAhO,IAAA+f,EAAA/f,OAzBA,IAAA4f,EACA5R,EAAAvG,EAAAuG,aAEA,CACAA,IACA,KAAA,GAAA8R,GAAA,EAAA5N,EAAA4N,IAAAA,EAAA9R,EAAAxN,KAAA,GAwBA4e,EAAAhV,SAAAC,EAAAgV,EAAA,KAAArR,GACAhR,KAAAsiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEAvN,EAAAA,EAAAd,QAAAojB,EACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAAoV,EAAAjV,gBAAA,MAKA,GAAA6V,GAAAlB,EAAA,SAEA,IADAkB,IAAAA,EAAAlB,EAAA,WACAkB,EACA,CAIA,IAAA,GAHAZ,GAAA,GAAAhjB,GAAA6U,kBAAA+O,EAAAhkB,QACAme,EAAAtZ,EAAA6J,MAAA1O,OACAqO,EAAA,EACA5O,EAAA,EAAAP,EAAA8kB,EAAAhkB,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwkB,GAAAD,EAAAvkB,GACA0V,EAAA,IACA,IAAA8O,EAAA,QACA,CACA9O,KACAA,EAAAnV,OAAAme,CACA,KAAA,GAAAna,GAAAma,EAAA,EAAAna,GAAA,EAAAA,IACAmR,EAAAnR,GAAA,EACA,IAAAkgB,IAAAD,EAAA,QACAE,KACAA,IAAAnkB,OAAAme,EAAA+F,GAAAlkB,MAEA,KAAA,GADAokB,IAAA,EAAAC,GAAA,EACArgB,EAAA,EAAAC,EAAAigB,GAAAlkB,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAsgB,IAAAJ,GAAAlgB,GACAkK,EAAArJ,EAAA6X,cAAA4H,GAAA,KACA,IAAA,IAAApW,EAAA,KAAA,mBAAAoW,GAAA,IAEA,MAAAF,IAAAlW,GACAiW,GAAAE,MAAAD,IAEAjP,GAAAiP,GAAAE,GAAA,QAAAF,KAGA,KAAAjG,EAAAiG,IACAD,GAAAE,MAAAD,IAEA,KAAA,GAAApgB,GAAAma,EAAA,EAAAna,GAAA,EAAAA,IACA,IAAAmR,EAAAnR,KAAAmR,EAAAnR,GAAAmgB,KAAAE,KAEAjB,EAAAhV,SAAAC,IAAA4V,EAAA,KAAA9O,GAEArU,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAAoV,EAAAjV,gBAAA,IAGA,GAAA5M,IAAAuhB,EAAA,MACA,IAAAvhB,GACA,CAGA,IAAA,GAFA6hB,GAAA,GAAAhjB,GAAAyV,cAAAtU,GAAAvB,QACAqO,EAAA,EACA5O,EAAA,EAAAP,EAAAqC,GAAAvB,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAkjB,IAAAphB,GAAA9B,GACAmjB,GAAA/d,EAAAqc,UAAAyB,GAAA,KACA,KAAAC,GAAA,KAAA,oBAAAD,GAAA,IACA,IAAAze,IAAA,GAAA9D,GAAAkV,MAAAsN,GACA1e,IAAAqR,SAAAoN,GAAA5c,eAAA,OAAA4c,GAAA,OAAAC,GAAArN,SACArR,GAAAsR,WAAAmN,GAAA5c,eAAA,SAAA4c,GAAA,SAAAC,GAAApN,WACAtR,GAAAuR,YAAAkN,GAAA5c,eAAA,UAAA4c,GAAA,OAAAC,GAAAnN,YACA2N,EAAAhV,SAAAC,IAAAsU,GAAA,KAAAze,IAEApD,EAAA0D,KAAA4e,GACAriB,EAAAiB,KAAA2c,IAAA5d,EAAAqiB,EAAApV,OAAAoV,EAAAjV,gBAAA,IAGAtJ,EAAAkc,WAAAvc,KAAA,GAAApE,GAAAQ,UAAAC,EAAAC,EAAAC,KAEAuiB,UAAA,SAAAF,EAAA/U,EAAAgV,GAEA,GAAAkB,GAAAlB,EAAA,KACAkB,GAEA,WAAAA,EACAnB,EAAArV,OAAAuF,WAAAjF,GACAkW,YAAAC,QACApB,EAAArV,OAAAwF,SAAAlF,EAAAkW,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAJAnB,EAAArV,OAAAsF,UAAAhF,IAMA+T,QAAA,SAAAqC,EAAAC,GAEA,GAAA,GAAAD,EAAAzkB,OAAA,KAAA,iDAAAykB,CACA,OAAAtd,UAAAsd,EAAAnX,UAAA,EAAAoX,EAAA,EAAAA,EAAA,GAAA,IAAA,KAEA3B,cAAA,SAAAD,EAAAjiB,EAAA6gB,GAEA,GAAAiD,GAAA7B,EAAAjiB,GACAc,EAAA,GAAAvB,GAAAwZ,aAAA+K,EAAA3kB,QACAP,EAAA,EAAAP,EAAAylB,EAAA3kB,MACA,IAAA,GAAA0hB,EAEA,KAAAxiB,EAAAO,EAAAA,IACAkC,EAAAlC,GAAAklB,EAAAllB,OAEA,MAAAP,EAAAO,EAAAA,IACAkC,EAAAlC,GAAAklB,EAAAllB,GAAAiiB,CAEA,OAAA/f,IAEAqhB,YAAA,SAAAF,EAAAjiB,GAIA,IAAA,GAFA8jB,GAAA7B,EAAAjiB,GACAc,EAAA,GAAAvB,GAAAwkB,YAAAD,EAAA3kB,QACAP,EAAA,EAAAP,EAAAylB,EAAA3kB,OAAAd,EAAAO,EAAAA,IACAkC,EAAAlC,GAAA,EAAAklB,EAAAllB,EACA,OAAAkC,KAGAzB,EAAAJ,QAAAM,EAAAohB,qBjCwwEGlf,eAAe,GAAGuM,cAAc,EAAEgW,uBAAuB,GAAGtS,mBAAmB,GAAGuS,aAAa,GAAGC,kBAAkB,GAAGC,sBAAsB,GAAGC,UAAU,GAAGC,cAAc,GAAGC,kBAAkB,GAAGC,gBAAgB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAGC,qBAAqB,GAAGC,yBAAyB,GAAGC,mBAAmB,GAAGC,kBAAkB,GAAGC,iBAAiB,GAAGC,SAAS,GAAGC,aAAa,GAAGC,sBAAsB,KAAKC,IAAI,SAASvmB,EAAQU,EAAOJ,GkCn2Fzc,GAAAM,GAAAZ,EAAA,eACAY,GAAAkhB,KAAA,SAAAzgB,GAEAG,KAAAH,KAAAA,EACAG,KAAAglB,gBAEA5lB,EAAAkhB,KAAArgB,WACAyhB,cAAA,SAAAxU,EAAArN,EAAA4K,GAEAzK,KAAAglB,YAAA9X,EAAA,IAAArN,GAAA4K,GAEAwR,cAAA,SAAA/O,EAAArN,GAEA,MAAAG,MAAAglB,YAAA9X,EAAA,IAAArN,IAEAmc,WAAA,SAAA7b,EAAA8kB,GAEA,IAAA,GAAAngB,KAAAmgB,GAAAD,YACA,CACA,GAAA5Y,GAAAtH,EAAAuH,QAAA,KACAa,EAAA/G,SAAArB,EAAAwH,UAAA,EAAAF,IACAvM,EAAAiF,EAAAwH,UAAAF,EAAA,GACA+F,EAAAhS,EAAAuN,MAAAR,EACA,IAAAiF,EAAA1H,YAAA0H,EAAA1H,WAAA5K,MAAAA,EACA,CACA,GAAA4K,GAAAzK,KAAAic,cAAA/O,EAAArN,EACA4K,IAAA0H,EAAAxE,cAAAlD,OAKAvL,EAAAJ,QAAAM,EAAAkhB,OlCu2FGhf,eAAe,KAAK4jB,IAAI,SAAS1mB,EAAQU,EAAOJ,GmCt4FnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAA4O,eAAAxP,EAAA,oBACAY,EAAA8K,sBAAA,SAAArK,GAEAG,KAAAH,KAAAA,GAEAT,EAAA8K,sBAAAjK,WACAgR,KAAA7R,EAAA4O,eAAAG,YACA0H,MAAA,KACAoM,QAAA,KACA1J,IAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,EACAva,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACAiM,KAAA,KACAtD,eAAA,KACAgE,QAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,cAAA,EACAX,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACA2N,MAAA,KACAzS,MAAA,EAAAE,OAAA,EACAwC,UAAA,SAAAtK,EAAAoJ,EAAAC,EAAAC,EAAAL,GAEA,GAAArB,GAAAlG,KAAAoL,SAAApL,KAAAkL,QAAA9E,EAAApG,KAAAqL,SAAArL,KAAAmL,QACAjN,EAAA8B,KAAAwY,UAAAxZ,MAKA,IAJAgB,KAAAuY,KAAAvY,KAAAuY,IAAAvZ,QAAAd,IAEA8B,KAAAuY,IAAA,GAAAnZ,GAAAwZ,aAAA1a,IAEA8B,KAAAsL,aAEA,IAAA,GAAA7M,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAuY,IAAA9Z,GAAAuB,KAAAkL,QAAAlL,KAAAwY,UAAA/Z,EAAA,GAAAyH,EACAlG,KAAAuY,IAAA9Z,EAAA,GAAAuB,KAAAmL,QAAA/E,EAAApG,KAAAwY,UAAA/Z,GAAA2H,MAGA,KAAA,GAAA3H,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAuY,IAAA9Z,GAAAuB,KAAAkL,QAAAlL,KAAAwY,UAAA/Z,GAAAyH,EACAlG,KAAAuY,IAAA9Z,EAAA,GAAAuB,KAAAmL,QAAAnL,KAAAwY,UAAA/Z,EAAA,GAAA2H,GAIA8K,qBAAA,SAAA1J,EAAAC,EAAA0K,EAAAf,GAEA,GAIAnO,GACAkiB,EAAAC,EAAAjU,EAAA2H,EAAAC,EAAAsM,EALAC,EAAAnT,EAAAhB,KAAAhR,SAAA0V,MACAoM,EAAAjiB,KAAAiiB,QACApM,EAAA7V,KAAA6V,MAEA0P,EAAA,EAAA7d,EAAA,EAAAiK,EAAA,EAAAjT,EAAA,EAAAR,EAAA2X,EAAA7W,MAEA,IAAAmT,EAAAgD,mBAAAnW,OAqBA,IADA,GAAAyjB,GAAAtQ,EAAAgD,mBACAjX,EAAAwJ,EAAA6d,GAAA,EACA,CAIA,IAHAJ,EAAA,EACAC,EAAA,EACAniB,EAAA4S,EAAAnO,KAAAA,EACAzE,EAAAyE,EAAAA,IAAAiK,GAAA,EAAAjT,GAAA,EAEAyS,EAAAmU,EAAAzP,EAAAnO,IACAoR,EAAAmJ,EAAAtQ,GAAA8Q,EAAA/jB,GACAqa,EAAAkJ,EAAAtQ,EAAA,GAAA8Q,EAAA/jB,EAAA,GACA2mB,EAAApD,EAAAtQ,EAAA,GACAwT,IAAArM,EAAA3H,EAAAnC,IAAA+J,EAAA5H,EAAAlC,IAAAkC,EAAAjC,QAAAmW,EACAD,IAAAtM,EAAA3H,EAAAhC,IAAA4J,EAAA5H,EAAA/B,IAAA+B,EAAA9B,QAAAgW,CAEAjU,GAAAmU,GAAAJ,EAAA3d,EACA4J,EAAAmU,EAAA,GAAAH,EAAA3d,MAlCA,MAAAvJ,EAAAwJ,EAAA6d,GAAA,EACA,CAIA,IAHAJ,EAAA,EACAC,EAAA,EACAniB,EAAA4S,EAAAnO,KAAAA,EACAzE,EAAAyE,EAAAA,IAAAiK,GAAA,EAEAR,EAAAmU,EAAAzP,EAAAnO,IACAoR,EAAAmJ,EAAAtQ,GACAoH,EAAAkJ,EAAAtQ,EAAA,GACA0T,EAAApD,EAAAtQ,EAAA,GACAwT,IAAArM,EAAA3H,EAAAnC,IAAA+J,EAAA5H,EAAAlC,IAAAkC,EAAAjC,QAAAmW,EACAD,IAAAtM,EAAA3H,EAAAhC,IAAA4J,EAAA5H,EAAA/B,IAAA+B,EAAA9B,QAAAgW,CAEAjU,GAAAmU,GAAAJ,EAAA3d,EACA4J,EAAAmU,EAAA,GAAAH,EAAA3d,KAwBAvI,EAAAJ,QAAAM,EAAA8K,wBnC04FG5I,eAAe,GAAGiQ,mBAAmB,KAAKiU,IAAI,SAAShnB,EAAQU,EAAOJ,GoCz+FzE,GAAAM,GAAAZ,EAAA,eACAY,GAAAqb,KAAA,SAAAE,EAAAxJ,GAEAnR,KAAA2B,KAAAgZ,EACA3a,KAAAmR,KAAAA,EACAnR,KAAAwO,kBAEApP,EAAAqb,KAAAxa,WACA9B,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACAknB,gBAAA,EACAhb,WAAA,KACA0K,sBACAxH,cAAA,SAAAlD,GAEAzK,KAAAyK,WAAAA,EACAzK,KAAAylB,gBAAAzlB,KAAAmR,KAAAhR,SAAAE,KACAL,KAAAmV,mBAAAnW,OAAA,GAEA0mB,kBAAA,SAAArlB,GAEAL,KAAAylB,gBAAAzlB,KAAAmR,KAAAhR,SAAAE,KAAAA,GAEAslB,kBAAA,WAEA,MAAA3lB,MAAAmR,KAAAhR,SAAAE,KAAAL,KAAAylB,iBAEAjX,eAAA,WAEA,GAAA7M,GAAA3B,KAAA2B,IACA3B,MAAA7B,EAAAwD,EAAAxD,EACA6B,KAAA0R,EAAA/P,EAAA+P,EACA1R,KAAA2R,EAAAhQ,EAAAgQ,EACA3R,KAAAzB,EAAAoD,EAAApD,EACAyB,KAAAqhB,UAAA1f,EAAA0f,SAGA,KAAA,GADAuE,GAAA5lB,KAAAmR,KAAAhR,SAAAwB,KAAA+L,MACAjP,EAAA,EAAAP,EAAA0nB,EAAA5mB,OAAAd,EAAAO,EAAAA,IAEA,GAAAmnB,EAAAnnB,IAAAkD,EACA,CACA3B,KAAA2N,cAAAhM,EAAA2L,eAAAtN,KAAAmR,KAAAhR,SAAAyN,yBAAAnP,EAAAkD,EAAA2L,gBAAA,KACA,UAKApO,EAAAJ,QAAAM,EAAAqb,OpC6+FGnZ,eAAe,KAAKukB,IAAI,SAASrnB,EAAQU,EAAOJ,GqC3hGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAihB,SAAA,SAAAxgB,EAAAyO,GAEAtO,KAAAH,KAAAA,EACAG,KAAAsO,SAAAA,GAGAlP,EAAAihB,SAAAiB,qBACAwE,SAAA3mB,KAAA4mB,YAAAC,SACAC,OAAA9mB,KAAA4mB,YAAAG,OACAC,SAAAhnB,KAAA4mB,YAAAK,IACAC,OAAAlnB,KAAA4mB,YAAAO,QAGAlnB,EAAAihB,SAAApgB,WACA9B,EAAA,EAAAuT,EAAA,EAAAC,EAAA,EAAApT,EAAA,EACA+O,eAAA,KACA+T,UAAAliB,KAAA4mB,YAAAO,QAMApnB,EAAAJ,QAAAM,EAAAihB,WrC+hGG/e,eAAe,KAAKilB,IAAI,SAAS/nB,EAAQU,EAAOJ,GsCtjGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAoC,WAAA,aAEApC,EAAAoC,WAAAvB,WACAsC,KAAA,KAAAH,SAAA,KACAU,UAAA,KACAxC,MAAA,EACAkC,MAAA,EAAAnC,KAAA,EAAAD,SAAA,GAAAsC,QAAA,EACAT,UAAA,EACAK,QAAA,EAAAS,YAAA,EAAAvC,IAAA,EACAqB,QAAA,KAAAC,MAAA,KAAAC,WAAA,KAAAC,QAAA,MAEA9C,EAAAJ,QAAAM,EAAAoC,atC0jGGF,eAAe,KAAKklB,IAAI,SAAShoB,EAAQU,EAAOJ,GuCtkGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAAmhB,kBAAA,SAAAzT,GAEA9M,KAAA+M,OAAA,GAAA3N,GAAAwN,OAAAE,GACA9M,KAAAgN,UACAhN,KAAAgN,OAAAhO,OAAA,EAAA8N,GAEA1N,EAAAmhB,kBAAAtgB,WACA0V,UAAA,EACAxI,cAAA,WAEA,MAAAnN,MAAAgN,OAAAhO,OAAA,GAEAoO,SAAA,SAAAC,EAAAhN,EAAAmH,EAAAC,GAEA4F,GAAA,EACArN,KAAAgN,OAAAK,GAAAhN,EACAL,KAAAgN,OAAAK,EAAA,GAAA7F,EACAxH,KAAAgN,OAAAK,EAAA,GAAA5F,GAEAvH,MAAA,SAAAC,EAAAC,EAAAC,EAAAkN,EAAA9M,GAEA,GAAAuM,GAAAhN,KAAAgN,MACA,MAAA3M,EAAA2M,EAAA,IAAA,CAEA,GAAAmE,GAAAhR,EAAA0V,MAAA7V,KAAA2V,UAEA,IAAAtV,GAAA2M,EAAAA,EAAAhO,OAAA,GAIA,MAFAmS,GAAA3J,IAAA2J,EAAAxP,KAAA6F,EAAAwF,EAAAA,EAAAhO,OAAA,GAAAmS,EAAA3J,GAAA/G,OACA0Q,EAAA1J,IAAA0J,EAAAxP,KAAA8F,EAAAuF,EAAAA,EAAAhO,OAAA,GAAAmS,EAAA1J,GAAAhH,EAKA,IAAA4M,GAAAjO,EAAAQ,UAAAc,aAAAsM,EAAA3M,EAAA,GACAia,EAAAtN,EAAAK,EAAA,GACAkN,EAAAvN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA5R,EAAA2R,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAAjS,KAAA+M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEAd,EAAA3J,IAAA2J,EAAAxP,KAAA6F,EAAA8S,GAAAtN,EAAAK,EAAA,GAAAiN,GAAArI,EAAAd,EAAA3J,GAAA/G,EACA0Q,EAAA1J,IAAA0J,EAAAxP,KAAA8F,EAAA8S,GAAAvN,EAAAK,EAAA,GAAAkN,GAAAtI,EAAAd,EAAA1J,GAAAhH,KAGAvB,EAAAJ,QAAAM,EAAAmhB,oBvC0kGGjf,eAAe,GAAGuM,cAAc,EAAEC,WAAW,KAAK2Y,IAAI,SAASjoB,EAAQU,EAAOJ,GwC7lGjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAiF,mBAAA7F,EAAA,wBACAY,EAAAqC,eAAAjD,EAAA,oBACAY,EAAAgL,sBAAA5L,EAAA,2BACAY,EAAAiG,MAAA7G,EAAA,WACAY,EAAA8F,UAAA1G,EAAA,eACAY,EAAA6F,YAAAzG,EAAA,iBACAY,EAAA+F,YAAA3G,EAAA,iBACAY,EAAAyN,mBAAArO,EAAA,wBACAY,EAAA4O,eAAAxP,EAAA,oBACAY,EAAA0R,SAAAtS,EAAA,cACAY,EAAAiP,KAAA7P,EAAA,UACAY,EAAA+K,sBAAA3L,EAAA,2BACAY,EAAAqS,cAAAjT,EAAA,mBACAY,EAAAwN,OAAApO,EAAA,YACAY,EAAA6U,kBAAAzV,EAAA,uBACAY,EAAAuV,UAAAnW,EAAA,eACAY,EAAAkV,MAAA9V,EAAA,WACAY,EAAAyV,cAAArW,EAAA,mBACAY,EAAA4V,YAAAxW,EAAA,iBACAY,EAAAsW,cAAAlX,EAAA,mBACAY,EAAA2W,cAAAvX,EAAA,mBACAY,EAAA2Y,iBAAAvZ,EAAA,sBACAY,EAAA6W,aAAAzX,EAAA,kBACAY,EAAA6Y,qBAAAzZ,EAAA,0BACAY,EAAA6K,eAAAzL,EAAA,oBACAY,EAAA4K,iBAAAxL,EAAA,sBACAY,EAAA4a,eAAAxb,EAAA,oBACAY,EAAAib,cAAA7b,EAAA,mBACAY,EAAAsd,eAAAle,EAAA,oBACAY,EAAAygB,aAAArhB,EAAA,kBACAY,EAAAsb,SAAAlc,EAAA,cACAY,EAAAohB,mBAAAhiB,EAAA,wBACAY,EAAAkhB,KAAA9hB,EAAA,aACAY,EAAA8K,sBAAA1L,EAAA,2BACAY,EAAAihB,SAAA7hB,EAAA,cACAY,EAAAqb,KAAAjc,EAAA,UACAY,EAAAoC,WAAAhD,EAAA,gBACAY,EAAAmhB,kBAAA/hB,EAAA,uBACAU,EAAAJ,QAAAM,IxC6nGGkC,eAAe,GAAGuM,cAAc,EAAE6Y,mBAAmB,EAAEC,uBAAuB,EAAEC,UAAU,EAAEC,0BAA0B,EAAEjd,cAAc,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAE+Z,uBAAuB,GAAGtS,mBAAmB,GAAG+K,SAAS,GAAGwH,aAAa,GAAGrY,0BAA0B,GAAGsY,kBAAkB,GAAGjW,WAAW,GAAGkW,sBAAsB,GAAGC,UAAU,GAAGC,cAAc,GAAGC,kBAAkB,GAAGC,gBAAgB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAG/H,iBAAiB,GAAGgI,qBAAqB,GAAGC,yBAAyB,GAAG9Y,mBAAmB,GAAGC,qBAAqB,GAAG8Y,mBAAmB,GAAGC,kBAAkB,GAAGoC,aAAa,GAAGC,mBAAmB,GAAGpC,iBAAiB,GAAGqC,uBAAuB,GAAGC,YAAY,GAAGrb,0BAA0B,GAAG4Q,SAAS,GAAGqI,aAAa,GAAG1gB,eAAe,GAAG2gB,sBAAsB,KAAKoC,IAAI,SAAS1oB,EAAQU,EAAOJ,GyClsG10BI,EAAAJ,SACA2X,OAAA,IAAAzV,KAAAmmB,GACAlX,OAAAjP,KAAAmmB,GAAA,IACAnQ,QACA4B,aAAA,mBAAA,cAAA4K,MAAA5K,aACAgL,YAAA,mBAAA,aAAAJ,MAAAI,kBzCusGMwD,IAAI,SAAS5oB,EAAQU,EAAOJ,G0CxrGlC,QAAAO,GAAAgoB,GAIA,GAFAloB,KAAAmoB,UAAAvoB,KAAAiB,OAEAqnB,EAEA,KAAA,IAAA1oB,OAAA,mCAGA,IAAA,gBAAA0oB,GAEA,KAAA,IAAA1oB,OAAA,2GAQAqB,MAAAqnB,UAAAA,EAOArnB,KAAAG,SAAA,GAAAf,GAAAsb,SAAA2M,GACArnB,KAAAG,SAAAwP,uBAOA3P,KAAA0B,UAAA,GAAAtC,GAAAiF,mBAAAgjB,GAOArnB,KAAAunB,MAAA,GAAAnoB,GAAAqC,eAAAzB,KAAA0B,WAOA1B,KAAAwnB,iBAEA,KAAA,GAAA/oB,GAAA,EAAAP,EAAA8B,KAAAG,SAAAuN,MAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0T,GAAAnS,KAAAG,SAAAuN,MAAAjP,GACAgM,EAAA0H,EAAA1H,WACAgd,EAAA,GAAAtoB,MAAAmoB,SAIA,IAHAtnB,KAAAwnB,eAAAhkB,KAAAikB,GACAznB,KAAA0nB,SAAAD,GAEAhd,YAAArL,GAAA4K,iBACA,CACA,GAAA2d,GAAAld,EAAAvD,eAAArH,KACA+nB,EAAA5nB,KAAA6nB,aAAA1V,EAAA1H,EACA0H,GAAA2V,cAAAF,EACAzV,EAAA4V,kBAAAJ,EACAF,EAAAC,SAAAE,OAEA,CAAA,KAAAnd,YAAArL,GAAA6K,gBASA,QAPA,IAAAiE,GAAAlO,KAAAgoB,WAAA7V,EAAA1H,EACA0H,GAAA8V,YAAA/Z,EACAiE,EAAA+V,gBAAAzd,EAAA5K,KACA4nB,EAAAC,SAAAxZ,IAcAlO,KAAAmoB,YAAA,EAzGA,GAAA/oB,GAAAZ,EAAA,mBACA4pB,EAAA5pB,EAAA,yBAGAY,GAAAiP,KAAAI,OAAA,EAwGApP,EAAAgpB,UAAA,SAAAC,GACA,GAAAzkB,GAAAukB,EAAAG,UAAAD,EAEA,KAAAzkB,EAEA,KAAA,IAAAlF,OAAA,eAAA2pB,EAAA,0CAGA,OAAA,IAAAjpB,GAAAwE,IAGAxE,EAAAY,UAAAuoB,OAAAC,OAAAtpB,KAAAmoB,UAAArnB,WACAZ,EAAAY,UAAAyoB,YAAArpB,EACAH,EAAAJ,QAAAO,EAEAA,EAAAspB,kBAAA,EAEAH,OAAAI,iBAAAvpB,EAAAY,WAYAkoB,YACAU,IAAA,WAEA,MAAA7oB,MAAA8oB,kBAAAzpB,EAAAY,UAAA8oB,qBAGAC,IAAA,SAAA9c,GAEAlM,KAAA8oB,gBAAA5c,EAAA7M,EAAAY,UAAA8oB,oBAAA5pB,KAAAmoB,UAAArnB,UAAA6oB,oBAUAzpB,EAAAY,UAAAiC,OAAA,SAAA+mB,GAEAjpB,KAAAunB,MAAArlB,OAAA+mB,GACAjpB,KAAAunB,MAAArnB,MAAAF,KAAAG,UACAH,KAAAG,SAAAwP,sBAKA,KAAA,GAHAwE,GAAAnU,KAAAG,SAAAgU,UACAzG,EAAA1N,KAAAG,SAAAuN,MAEAjP,EAAA,EAAAP,EAAAiW,EAAAnV,OAAAd,EAAAO,EAAAA,IAEAuB,KAAAkpB,SAAAzqB,GAAAuB,KAAAwnB,eAAArT,EAAA1V,GAGA,KAAAA,EAAA,EAAAP,EAAAwP,EAAA1O,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0T,GAAAzE,EAAAjP,GACAgM,EAAA0H,EAAA1H,WACAgd,EAAAznB,KAAAwnB,eAAA/oB,EAEA,IAAAgM,EAAA,CAMA,GAAAwG,GAAAxG,EAAAwG,IACA,IAAAA,IAAA7R,EAAA4O,eAAA1G,OACA,CACA,GAAAmD,EAAAvD,kBAEAiL,EAAA4V,mBAAA5V,EAAA4V,oBAAAtd,EAAAvD,eAAArH,MACA,CACA,GAAA8nB,GAAAld,EAAAvD,eAAArH,IAMA,IALAspB,SAAAhX,EAAA2V,gBAEA3V,EAAA2V,cAAAsB,SAAA,GAEAjX,EAAAkX,QAAAlX,EAAAkX,YACAF,SAAAhX,EAAAkX,QAAA1B,GAEAxV,EAAAkX,QAAA1B,GAAAyB,SAAA,MAGA,CACA,GAAAxB,GAAA5nB,KAAA6nB,aAAA1V,EAAA1H,EACAgd,GAAAC,SAAAE,GAEAzV,EAAA2V,cAAA3V,EAAAkX,QAAA1B,GACAxV,EAAA4V,kBAAAJ,EAIA,GAAAxW,GAAAgB,EAAAhB,IAEAsW,GAAA6B,SAAA9hB,EAAA2J,EAAAjC,OAAAzE,EAAAjD,EAAA2J,EAAAnC,IAAAvE,EAAAhD,EAAA0J,EAAAlC,IACAwY,EAAA6B,SAAA7hB,EAAA0J,EAAA9B,OAAA5E,EAAAjD,EAAA2J,EAAAhC,IAAA1E,EAAAhD,EAAA0J,EAAA/B,IACAqY,EAAA/G,MAAAlZ,EAAA2J,EAAA5B,YACAkY,EAAA/G,MAAAjZ,EAAA0J,EAAA3B,YACAiY,EAAA/Y,WAAAyD,EAAAhB,KAAA7B,cAAAlQ,EAAA6Q,QACAkB,EAAA1B,aACAgY,EAAA/G,MAAAlZ,GAAAigB,EAAA/G,MAAAlZ,EACAigB,EAAA/Y,UAAA+Y,EAAA/Y,UAEAyC,EAAAzB,YAAAtQ,EAAAiP,KAAAI,QACAgZ,EAAA/G,MAAAjZ,GAAAggB,EAAA/G,MAAAjZ,EACAggB,EAAA/Y,UAAA+Y,EAAA/Y,UAEAyD,EAAA2V,cAAAzG,UAAAlP,EAAAkP,UACAlP,EAAA2V,cAAAyB,KAAApqB,KAAAqqB,MAAAC,SAAAtX,EAAAhU,EAAAgU,EAAAT,EAAAS,EAAAR,QAEA,CAAA,GAAAV,IAAA7R,EAAA4O,eAAAG,aAAA8C,IAAA7R,EAAA4O,eAAAE,KA8BA,CACAuZ,EAAA2B,SAAA,CACA,UA9BA,IAAAjX,EAAA+V,iBAAA/V,EAAA+V,kBAAAzd,EAAA5K,KACA,CACA,GAAA8iB,GAAAlY,EAAA5K,IAQA,IAPAspB,SAAAhX,EAAA8V,cAEA9V,EAAA8V,YAAAmB,SAAA,GAGAjX,EAAAuX,OAAAvX,EAAAuX,WAEAP,SAAAhX,EAAAuX,OAAA/G,GAEAxQ,EAAAuX,OAAA/G,GAAAyG,SAAA,MAGA,CACA,GAAAlb,GAAAlO,KAAAgoB,WAAA7V,EAAA1H,EACAgd,GAAAC,SAAAxZ,GAGAiE,EAAA8V,YAAA9V,EAAAuX,OAAA/G,GACAxQ,EAAA+V,gBAAAvF,EAGAlY,EAAAyG,qBAAAiB,EAAAhB,KAAAhR,SAAAqH,EAAA2K,EAAAhB,KAAAhR,SAAAsH,EAAA0K,EAAAA,EAAA8V,YAAAjX,UAQAyW,EAAA2B,SAAA,EAEA3B,EAAAhnB,MAAA0R,EAAA5T,MArFAkpB,GAAA2B,SAAA,IA8FA/pB,EAAAY,UAAA8oB,oBAAA,WAEA,GAAA1pB,EAAAspB,iBAAA,CACA3oB,KAAAI,SAAAJ,KAAAI,UAAAupB,KAAAC,KACA,IAAAC,GAAA,MAAAF,KAAAC,MAAA5pB,KAAAI,SACAJ,MAAAI,SAAAupB,KAAAC,MACA5pB,KAAAkC,OAAA2nB,OAEA7pB,MAAAI,SAAA,CAGAjB,MAAAmoB,UAAArnB,UAAA6oB,gBAAA/pB,KAAAiB,OAUAX,EAAAY,UAAA4nB,aAAA,SAAA1V,EAAA1H,GAEA,GAAAqf,GAAArf,EAAAvD,eACA6iB,EAAAD,EAAA/jB,KAAAmB,eACA8iB,EAAA,GAAA7qB,MAAA8qB,UAAAH,EAAAtiB,EACAsiB,EAAAriB,EACAqiB,EAAAviB,OAAAuiB,EAAA1jB,OAAA0jB,EAAA5jB,MACA4jB,EAAAviB,OAAAuiB,EAAA5jB,MAAA4jB,EAAA1jB,QACA8jB,EAAA,GAAA/qB,MAAAgrB,QAAAJ,EAAAC,GACApC,EAAA,GAAAzoB,MAAAirB,OAAAF,GAEAG,EAAAP,EAAAviB,OAAA,GAAAvG,KAAAmmB,GAAA,CAUA,OATAS,GAAAlH,MAAAlZ,EAAAiD,EAAAvE,MAAA4jB,EAAA7hB,cAAAwC,EAAAmE,OACAgZ,EAAAlH,MAAAjZ,EAAAgD,EAAArE,OAAA0jB,EAAA5hB,eAAAuC,EAAAoE,OACA+Y,EAAAlZ,SAAA2b,EAAA5f,EAAAiE,SAAAtP,EAAA6Q,OACA2X,EAAA0C,OAAA9iB,GAAA,GAAAsiB,EAAA7hB,cAAA6hB,EAAA3hB,SAAA2hB,EAAA5jB,MACA0hB,EAAA0C,OAAA7iB,EAAA,GAAA,GAAAqiB,EAAA5hB,eAAA4hB,EAAA1hB,SAAA0hB,EAAA1jB,OACAwhB,EAAAnnB,MAAAgK,EAAAlM,EAEA4T,EAAAkX,QAAAlX,EAAAkX,YACAlX,EAAAkX,QAAAS,EAAAjqB,MAAA+nB,EACAA,GASAvoB,EAAAY,UAAA+nB,WAAA,SAAA7V,EAAA1H,GAEA,GAAAqf,GAAArf,EAAAvD,eACA6iB,EAAAD,EAAA/jB,KAAAmB,eACAD,EAAA,GAAA9H,MAAAgrB,QAAAJ,GAEAQ,EAAA,GAAAprB,MAAA+O,KAAAsc,KACAvjB,EACA,GAAA2R,cAAAnO,EAAA8N,IAAAvZ,QACA,GAAA4Z,cAAAnO,EAAA8N,KACA,GAAAqL,aAAAnZ,EAAAgO,WACAtZ,KAAA+O,KAAAsc,KAAAC,WAAAC,UASA,OAPAH,GAAAI,cAAA,IAEAJ,EAAA9pB,MAAAgK,EAAAlM,EAEA4T,EAAAuX,OAAAvX,EAAAuX,WACAvX,EAAAuX,OAAAjf,EAAA5K,MAAA0qB,EAEAA,K1CgtGG5K,kBAAkB,GAAGiL,yBAAyB,KAAKC,IAAI,SAASrsB,EAAQU,EAAOJ,G2C3hHlF,GAAAspB,GAAA5pB,EAAA,gBAEAW,MAAAI,QAAAurB,OAAAC,kBAAA3C,GACAjpB,KAAA6rB,OAAAC,IAAA7C,O3CyiHG8C,gBAAgB,KAAKC,IAAI,SAAS3sB,EAAQU,EAAOJ,G4CvjHpD,GAAAssB,GAAAjsB,KAAAI,QAAA6rB,SACAhsB,EAAAZ,EAAA,mBACA6sB,EAAA7sB,EAAA,wBAEA4pB,EAAAlpB,EAAAJ,QAAA,WACA,MAAA,UAAAwsB,EAAA/oB,GAEA,IAAA+oB,EAAA3pB,OAAA2pB,EAAAC,SAAAD,EAAA3pB,KAAAkU,MACA,MAAAtT,IAQA,IAAAipB,GAAAF,EAAAG,IAAAhf,OAAA,EAAA6e,EAAAG,IAAAC,YAAA,MAAA,SACAC,GACApjB,YAAA+iB,EAAA/iB,YACAqjB,QAAAR,EAAAS,kBAAAC,KACAC,SAAAT,EAAAS,SAAAC,eAEAC,GACA1jB,YAAA+iB,EAAA/iB,YACAwjB,SAAAT,EAAAS,SAAAG,eAEA5jB,EAAAgjB,EAAAG,IAAAhf,OAAA,EAAA6e,EAAAG,IAAAC,YAAA,KAAA,GAEAS,EAAAd,EAAArrB,KAAAsrB,EAAAzrB,KAAA,eAAAyI,EAAA2jB,EACAjsB,MAAAosB,IAAAd,EAAAzrB,KAAA,SAAA2rB,EAAAG,EAAA,SAAAU,GACA,GAAAjtB,GAAAiG,MAAArF,KAAAssB,IAAAC,aAAAJ,EAAA,SAAAK,GACA,GAAAC,GAAA,GAAArtB,GAAAohB,mBAAA,GAAAphB,GAAAgL,sBAAAoiB,IACA3oB,EAAA4oB,EAAA9L,iBAAA2K,EAAA3pB,KAEA2pB,GAAAjE,UAAAxjB,EACAynB,EAAAkB,WAAAA,EACApE,EAAAsE,gBACAtE,EAAAG,UAAA+C,EAAAzrB,MAAAyrB,EAAAjE,WAEA9kB,SAMA6lB,GAAAG,aACAH,EAAAsE,eAAA,I5C0jHG/M,kBAAkB,GAAGgN,uBAAuB,KAAKC,IAAI,SAASpuB,EAAQU,EAAOJ,G6CxmHhFN,EAAA,kBAEAU,GAAAJ,QAAA,SAAAksB,EAAA6B,EAAAvkB,EAAA2jB,GAKA,MAJA3jB,IAAAA,EAAAojB,YAAA,OAAApjB,EAAAtJ,OAAA,IAEAsJ,GAAA,KAEA,SAAA5C,EAAAF,GACA,GAAA3F,GAAAgtB,EAAAnnB,EACA+lB,EAAAnjB,EAAA5C,CACAslB,GAAAoB,IAAAvsB,EAAA4rB,EAAAQ,EAAA,SAAAX,GACA9lB,EAAA8lB,EAAArkB,QAAA8iB,mB7C8mHGpK,kBAAkB,KAAKmN,IAAI,SAAStuB,EAAQU,EAAOJ,G8CznHtDI,EAAAJ,SACAspB,YAAA5pB,EAAA,iBACAssB,OAAAtsB,EAAA,YACA4G,uBAAA5G,EAAA,4BACA6sB,mBAAA7sB,EAAA,2B9C6nHGuuB,WAAW,GAAG7B,gBAAgB,GAAGyB,uBAAuB,GAAGK,2BAA2B,KAAKC,IAAI,SAASzuB,EAAQU,EAAOJ,G+CjoH1HN,EAAA,kBAEAU,GAAAJ,QAAA,SAAAwJ,EAAAC,GAKA,MAJAD,IAAAA,EAAAojB,YAAA,OAAApjB,EAAAtJ,OAAA,IAEAsJ,GAAA,KAEA,SAAA5C,EAAAF,GACAA,EAAArG,KAAA+tB,YAAAC,UAAAznB,EAAA6C,Q/CsoHGoX,kBAAkB,UAAU","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n",null,"var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\nvar syncImageLoaderAdapter = require('../loaders/syncImageLoaderAdapter.js')\r\n\r\nspine.Atlas = function (atlasText, loaderFunction, callback)\r\n{\r\n    //TODO: remove this legacy later\r\n    if (typeof loaderFunction !== \"function\") {\r\n        //old syntax\r\n        var baseUrl = loaderFunction;\r\n        var crossOrigin = callback;\r\n        loaderFunction = syncImageLoaderAdapter(baseUrl, crossOrigin);\r\n        callback = null;\r\n    }\r\n\r\n    this.pages = [];\r\n    this.regions = [];\r\n\r\n    this.texturesLoading = 0;\r\n\r\n    var self = this;\r\n\r\n    var reader = new spine.AtlasReader(atlasText);\r\n    var tuple = [];\r\n    tuple.length = 4;\r\n    var page = null;\r\n\r\n    iterateParser();\r\n\r\n    function iterateParser() {\r\n        while (true) {\r\n            var line = reader.readLine();\r\n            if (line === null) {\r\n                return callback && callback(self);\r\n            }\r\n            line = reader.trim(line);\r\n            if (!line.length)\r\n                page = null;\r\n            else if (!page) {\r\n                page = new spine.AtlasPage();\r\n                page.name = line;\r\n\r\n                if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\r\n                    page.width = parseInt(tuple[0]);\r\n                    page.height = parseInt(tuple[1]);\r\n                    reader.readTuple(tuple);\r\n                } else {\r\n                    //old format, detect width and height by texture\r\n                }\r\n                page.format = spine.Atlas.Format[tuple[0]];\r\n\r\n                reader.readTuple(tuple);\r\n                page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\r\n                page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\r\n\r\n                var direction = reader.readValue();\r\n                page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\r\n                if (direction == \"x\")\r\n                    page.uWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"y\")\r\n                    page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n                else if (direction == \"xy\")\r\n                    page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\r\n\r\n                // @ivanpopelyshev: I so want to use generators and \"yield()\" here, or at least promises\r\n                loaderFunction(line, function (texture) {\r\n                    page.rendererObject = texture;\r\n                    self.pages.push(page);\r\n                    if (!page.width || !page.height) {\r\n                        page.width = texture.width;\r\n                        page.height = texture.height;\r\n                        if (!page.width || !page.height) {\r\n                            console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\r\n                        }\r\n                    }\r\n                    iterateParser();\r\n                });\r\n                break;\r\n            } else {\r\n                var region = new spine.AtlasRegion();\r\n                region.name = line;\r\n                region.page = page;\r\n\r\n                region.rotate = reader.readValue() == \"true\";\r\n\r\n                reader.readTuple(tuple);\r\n                var x = parseInt(tuple[0]);\r\n                var y = parseInt(tuple[1]);\r\n\r\n                reader.readTuple(tuple);\r\n                var width = parseInt(tuple[0]);\r\n                var height = parseInt(tuple[1]);\r\n\r\n                region.u = x / page.width;\r\n                region.v = y / page.height;\r\n                if (region.rotate) {\r\n                    region.u2 = (x + height) / page.width;\r\n                    region.v2 = (y + width) / page.height;\r\n                } else {\r\n                    region.u2 = (x + width) / page.width;\r\n                    region.v2 = (y + height) / page.height;\r\n                }\r\n                //detected resolution\r\n                var resolution = page.rendererObject.resolution;\r\n                region.x = x / resolution;\r\n                region.y = y / resolution;\r\n                region.width = Math.abs(width) / resolution;\r\n                region.height = Math.abs(height) / resolution;\r\n\r\n                if (reader.readTuple(tuple) == 4) { // split is optional\r\n                    region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                    if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\r\n                        region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\r\n\r\n                        reader.readTuple(tuple);\r\n                    }\r\n                }\r\n\r\n                region.originalWidth = parseInt(tuple[0]) / resolution;\r\n                region.originalHeight = parseInt(tuple[1]) / resolution;\r\n\r\n                reader.readTuple(tuple);\r\n                region.offsetX = parseInt(tuple[0]) / resolution;\r\n                region.offsetY = parseInt(tuple[1]) / resolution;\r\n\r\n                region.index = parseInt(reader.readValue());\r\n\r\n                self.regions.push(region);\r\n            }\r\n        }\r\n    }\r\n};\r\nspine.Atlas.prototype = {\r\n    findRegion: function (name)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n            if (regions[i].name == name) return regions[i];\r\n        return null;\r\n    },\r\n    dispose: function ()\r\n    {\r\n        var pages = this.pages;\r\n        for (var i = 0, n = pages.length; i < n; i++)\r\n            pages[i].rendererObject.destroy(true);\r\n    },\r\n    updateUVs: function (page)\r\n    {\r\n        var regions = this.regions;\r\n        for (var i = 0, n = regions.length; i < n; i++)\r\n        {\r\n            var region = regions[i];\r\n            if (region.page != page) continue;\r\n            region.u = region.x / page.width;\r\n            region.v = region.y / page.height;\r\n            if (region.rotate)\r\n            {\r\n                region.u2 = (region.x + region.height) / page.width;\r\n                region.v2 = (region.y + region.width) / page.height;\r\n            } else {\r\n                region.u2 = (region.x + region.width) / page.width;\r\n                region.v2 = (region.y + region.height) / page.height;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nspine.Atlas.Format = {\r\n    alpha: 0,\r\n    intensity: 1,\r\n    luminanceAlpha: 2,\r\n    rgb565: 3,\r\n    rgba4444: 4,\r\n    rgb888: 5,\r\n    rgba8888: 6\r\n};\r\n\r\nspine.Atlas.TextureFilter = {\r\n    nearest: 0,\r\n    linear: 1,\r\n    mipMap: 2,\r\n    mipMapNearestNearest: 3,\r\n    mipMapLinearNearest: 4,\r\n    mipMapNearestLinear: 5,\r\n    mipMapLinearLinear: 6\r\n};\r\n\r\nspine.Atlas.TextureWrap = {\r\n    mirroredRepeat: 0,\r\n    clampToEdge: 1,\r\n    repeat: 2\r\n};\r\nmodule.exports = spine.Atlas;\r\n","var spine = require('../SpineUtil');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.AtlasAttachmentParser = function (atlas)\r\n{\r\n    this.atlas = atlas;\r\n};\r\nspine.AtlasAttachmentParser.prototype = {\r\n    newRegionAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\r\n        var attachment = new spine.RegionAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.MeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newSkinnedMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.SkinnedMeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newBoundingBoxAttachment: function (skin, name)\r\n    {\r\n        return new spine.BoundingBoxAttachment(name);\r\n    }\r\n};\r\nmodule.exports = spine.AtlasAttachmentParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasRegion = function ()\r\n{};\r\nspine.AtlasRegion.prototype = {\r\n    page: null,\r\n    name: null,\r\n    x: 0, y: 0,\r\n    width: 0, height: 0,\r\n    u: 0, v: 0, u2: 0, v2: 0,\r\n    offsetX: 0, offsetY: 0,\r\n    originalWidth: 0, originalHeight: 0,\r\n    index: 0,\r\n    rotate: false,\r\n    splits: null,\r\n    pads: null\r\n};\r\nmodule.exports = spine.AtlasRegion;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = {\r\n    region: 0,\r\n    boundingbox: 1,\r\n    mesh: 2,\r\n    skinnedmesh: 3\r\n};\r\nmodule.exports = spine.AttachmentType;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = function (boneData, skeleton, parent)\r\n{\r\n    this.data = boneData;\r\n    this.skeleton = skeleton;\r\n    this.parent = parent;\r\n    this.setToSetupPose();\r\n};\r\nspine.Bone.yDown = false;\r\nspine.Bone.prototype = {\r\n    x: 0, y: 0,\r\n    rotation: 0, rotationIK: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    flipX: false, flipY: false,\r\n    m00: 0, m01: 0, worldX: 0, // a b x\r\n    m10: 0, m11: 0, worldY: 0, // c d y\r\n    worldRotation: 0,\r\n    worldScaleX: 1, worldScaleY: 1,\r\n    worldFlipX: false, worldFlipY: false,\r\n    updateWorldTransform: function ()\r\n    {\r\n        var parent = this.parent;\r\n        if (parent)\r\n        {\r\n            this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;\r\n            this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;\r\n            if (this.data.inheritScale)\r\n            {\r\n                this.worldScaleX = parent.worldScaleX * this.scaleX;\r\n                this.worldScaleY = parent.worldScaleY * this.scaleY;\r\n            } else {\r\n                this.worldScaleX = this.scaleX;\r\n                this.worldScaleY = this.scaleY;\r\n            }\r\n            this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;\r\n            this.worldFlipX = parent.worldFlipX != this.flipX;\r\n            this.worldFlipY = parent.worldFlipY != this.flipY;\r\n        } else {\r\n            var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;\r\n            this.worldX = skeletonFlipX ? -this.x : this.x;\r\n            this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;\r\n            this.worldScaleX = this.scaleX;\r\n            this.worldScaleY = this.scaleY;\r\n            this.worldRotation = this.rotationIK;\r\n            this.worldFlipX = skeletonFlipX != this.flipX;\r\n            this.worldFlipY = skeletonFlipY != this.flipY;\r\n        }\r\n        var radians = this.worldRotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        if (this.worldFlipX)\r\n        {\r\n            this.m00 = -cos * this.worldScaleX;\r\n            this.m01 = sin * this.worldScaleY;\r\n        } else {\r\n            this.m00 = cos * this.worldScaleX;\r\n            this.m01 = -sin * this.worldScaleY;\r\n        }\r\n        if (this.worldFlipY != spine.Bone.yDown)\r\n        {\r\n            this.m10 = -sin * this.worldScaleX;\r\n            this.m11 = -cos * this.worldScaleY;\r\n        } else {\r\n            this.m10 = sin * this.worldScaleX;\r\n            this.m11 = cos * this.worldScaleY;\r\n        }\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.rotationIK = this.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.flipX = data.flipX;\r\n        this.flipY = data.flipY;\r\n    },\r\n    worldToLocal: function (world)\r\n    {\r\n        var dx = world[0] - this.worldX, dy = world[1] - this.worldY;\r\n        var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;\r\n        if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown))\r\n        {\r\n            m00 = -m00;\r\n            m11 = -m11;\r\n        }\r\n        var invDet = 1 / (m00 * m11 - m01 * m10);\r\n        world[0] = dx * m00 * invDet - dy * m01 * invDet;\r\n        world[1] = dy * m11 * invDet - dx * m10 * invDet;\r\n    },\r\n    localToWorld: function (local)\r\n    {\r\n        var localX = local[0], localY = local[1];\r\n        local[0] = localX * this.m00 + localY * this.m01 + this.worldX;\r\n        local[1] = localX * this.m10 + localY * this.m11 + this.worldY;\r\n    }\r\n};\r\nmodule.exports = spine.Bone;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.BoneData = function (name, parent)\r\n{\r\n    this.name = name;\r\n    this.parent = parent;\r\n};\r\nspine.BoneData.prototype = {\r\n    length: 0,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    inheritScale: true,\r\n    inheritRotation: true,\r\n    flipX: false, flipY: false\r\n};\r\nmodule.exports = spine.BoneData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoundingBoxAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.vertices = [];\r\n};\r\nspine.BoundingBoxAttachment.prototype = {\r\n    type: spine.AttachmentType.boundingbox,\r\n    computeWorldVertices: function (x, y, bone, worldVertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        for (var i = 0, n = vertices.length; i < n; i += 2)\r\n        {\r\n            var px = vertices[i];\r\n            var py = vertices[i + 1];\r\n            worldVertices[i] = px * m00 + py * m01 + x;\r\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.BoundingBoxAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        if (slot.attachment != this.attachment) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipXTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipXTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipXTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipYTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipYTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipYTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;\n    var rotation = bone.rotation;\n    // worldY and targetY sign depends on global constant spine.Bone.yDown\n    var rotationIK = (spine.Bone.yDown?-spine.radDeg:spine.radDeg)* Math.atan2(targetY - bone.worldY, targetX - bone.worldX) - parentRotation;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha)\n{\n    var childRotation = child.rotation, parentRotation = parent.rotation;\n    if (!alpha)\n    {\n        child.rotationIK = childRotation;\n        parent.rotationIK = parentRotation;\n        return;\n    }\n    var positionX, positionY, tempPosition = spine.temp;\n    var parentParent = parent.parent;\n    if (parentParent)\n    {\n        tempPosition[0] = targetX;\n        tempPosition[1] = targetY;\n        parentParent.worldToLocal(tempPosition);\n        targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;\n        targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;\n    } else {\n        targetX -= parent.x;\n        targetY -= parent.y;\n    }\n    if (child.parent == parent)\n    {\n        positionX = child.x;\n        positionY = child.y;\n    } else {\n        tempPosition[0] = child.x;\n        tempPosition[1] = child.y;\n        child.parent.localToWorld(tempPosition);\n        parent.worldToLocal(tempPosition);\n        positionX = tempPosition[0];\n        positionY = tempPosition[1];\n    }\n    var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;\n    var offset = Math.atan2(childY, childX);\n    var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;\n    // Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/\n    var cosDenom = 2 * len1 * len2;\n    if (cosDenom < 0.0001)\n    {\n        child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;\n        return;\n    }\n    var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;\n    if (cos < -1)\n        cos = -1;\n    else if (cos > 1)\n        cos = 1;\n    var childAngle = Math.acos(cos) * bendDirection;\n    var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);\n    var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);\n    var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    parent.rotationIK = parentRotation + rotation * alpha;\n    rotation = (childAngle + offset) * spine.radDeg - childRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.MeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.MeshAttachment.prototype = {\r\n    type: spine.AttachmentType.mesh,\r\n    vertices: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function ()\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var bone = slot.bone;\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        var verticesCount = vertices.length;\r\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\r\n        for (var i = 0; i < verticesCount; i += 2)\r\n        {\r\n            var vx = vertices[i];\r\n            var vy = vertices[i + 1];\r\n            worldVertices[i] = vx * m00 + vy * m01 + x;\r\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.MeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.RegionAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.offset = [];\r\n    this.offset.length = 8;\r\n    this.uvs = [];\r\n    this.uvs.length = 8;\r\n};\r\nspine.RegionAttachment.prototype = {\r\n    type: spine.AttachmentType.region,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    width: 0, height: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    setUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var uvs = this.uvs;\r\n        if (rotate)\r\n        {\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v2;\r\n            uvs[4/*X3*/] = u;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v;\r\n            uvs[0/*X1*/] = u2;\r\n            uvs[1/*Y1*/] = v2;\r\n        } else {\r\n            uvs[0/*X1*/] = u;\r\n            uvs[1/*Y1*/] = v2;\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v;\r\n            uvs[4/*X3*/] = u2;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v2;\r\n        }\r\n    },\r\n    updateOffset: function ()\r\n    {\r\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\r\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\r\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\r\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\r\n        var localX2 = localX + this.regionWidth * regionScaleX;\r\n        var localY2 = localY + this.regionHeight * regionScaleY;\r\n        var radians = this.rotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        var localXCos = localX * cos + this.x;\r\n        var localXSin = localX * sin;\r\n        var localYCos = localY * cos + this.y;\r\n        var localYSin = localY * sin;\r\n        var localX2Cos = localX2 * cos + this.x;\r\n        var localX2Sin = localX2 * sin;\r\n        var localY2Cos = localY2 * cos + this.y;\r\n        var localY2Sin = localY2 * sin;\r\n        var offset = this.offset;\r\n        offset[0/*X1*/] = localXCos - localYSin;\r\n        offset[1/*Y1*/] = localYCos + localXSin;\r\n        offset[2/*X2*/] = localXCos - localY2Sin;\r\n        offset[3/*Y2*/] = localY2Cos + localXSin;\r\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\r\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\r\n        offset[6/*X4*/] = localX2Cos - localYSin;\r\n        offset[7/*Y4*/] = localYCos + localX2Sin;\r\n    },\r\n    computeVertices: function (x, y, bone, vertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var offset = this.offset;\r\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\r\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\r\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\r\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\r\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\r\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\r\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\r\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\r\n    }\r\n};\r\nmodule.exports = spine.RegionAttachment;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = require('./Bone');\r\nspine.Slot = require('./Slot');\r\nspine.IkConstraint = require('./IkConstraint');\r\nspine.Skeleton = function (skeletonData)\r\n{\r\n    this.data = skeletonData;\r\n\r\n    this.bones = [];\r\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\r\n    {\r\n        var boneData = skeletonData.bones[i];\r\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\r\n        this.bones.push(new spine.Bone(boneData, this, parent));\r\n    }\r\n\r\n    this.slots = [];\r\n    this.drawOrder = [];\r\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\r\n    {\r\n        var slotData = skeletonData.slots[i];\r\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\r\n        var slot = new spine.Slot(slotData, bone);\r\n        this.slots.push(slot);\r\n        this.drawOrder.push(i);\r\n    }\r\n\r\n    this.ikConstraints = [];\r\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\r\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\r\n\r\n    this.boneCache = [];\r\n    this.updateCache();\r\n};\r\nspine.Skeleton.prototype = {\r\n    x: 0, y: 0,\r\n    skin: null,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    time: 0,\r\n    flipX: false, flipY: false,\r\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\r\n    updateCache: function ()\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        var ikConstraintsCount = ikConstraints.length;\r\n\r\n        var arrayCount = ikConstraintsCount + 1;\r\n        var boneCache = this.boneCache;\r\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\r\n        for (var i = 0, n = boneCache.length; i < n; i++)\r\n            boneCache[i].length = 0;\r\n        while (boneCache.length < arrayCount)\r\n            boneCache[boneCache.length] = [];\r\n\r\n        var nonIkBones = boneCache[0];\r\n        var bones = this.bones;\r\n\r\n        outer:\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            var current = bone;\r\n            do {\r\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\r\n                {\r\n                    var ikConstraint = ikConstraints[ii];\r\n                    var parent = ikConstraint.bones[0];\r\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\r\n                    while (true)\r\n                    {\r\n                        if (current == child)\r\n                        {\r\n                            boneCache[ii].push(bone);\r\n                            boneCache[ii + 1].push(bone);\r\n                            continue outer;\r\n                        }\r\n                        if (child == parent) break;\r\n                        child = child.parent;\r\n                    }\r\n                }\r\n                current = current.parent;\r\n            } while (current);\r\n            nonIkBones[nonIkBones.length] = bone;\r\n        }\r\n    },\r\n    /** Updates the world transform for each bone. */\r\n    updateWorldTransform: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            bone.rotationIK = bone.rotation;\r\n        }\r\n        var i = 0, last = this.boneCache.length - 1;\r\n        while (true)\r\n        {\r\n            var cacheBones = this.boneCache[i];\r\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\r\n                cacheBones[ii].updateWorldTransform();\r\n            if (i == last) break;\r\n            this.ikConstraints[i].apply();\r\n            i++;\r\n        }\r\n    },\r\n    /** Sets the bones and slots to their setup pose values. */\r\n    setToSetupPose: function ()\r\n    {\r\n        this.setBonesToSetupPose();\r\n        this.setSlotsToSetupPose();\r\n    },\r\n    setBonesToSetupPose: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            bones[i].setToSetupPose();\r\n\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n        {\r\n            var ikConstraint = ikConstraints[i];\r\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\r\n            ikConstraint.mix = ikConstraint.data.mix;\r\n        }\r\n    },\r\n    setSlotsToSetupPose: function ()\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            slots[i].setToSetupPose(i);\r\n        }\r\n\r\n        this.resetDrawOrder();\r\n    },\r\n    /** @return May return null. */\r\n    getRootBone: function ()\r\n    {\r\n        return this.bones.length ? this.bones[0] : null;\r\n    },\r\n    /** @return May be null. */\r\n    findBone: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return bones[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findBoneIndex: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return i;\r\n        return -1;\r\n    },\r\n    /** @return May be null. */\r\n    findSlot: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return slots[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findSlotIndex: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return i;\r\n        return -1;\r\n    },\r\n    setSkinByName: function (skinName)\r\n    {\r\n        var skin = this.data.findSkin(skinName);\r\n        if (!skin) throw \"Skin not found: \" + skinName;\r\n        this.setSkin(skin);\r\n    },\r\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\r\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\r\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\r\n     * @param newSkin May be null. */\r\n    setSkin: function (newSkin)\r\n    {\r\n        if (newSkin)\r\n        {\r\n            if (this.skin)\r\n                newSkin._attachAll(this, this.skin);\r\n            else\r\n            {\r\n                var slots = this.slots;\r\n                for (var i = 0, n = slots.length; i < n; i++)\r\n                {\r\n                    var slot = slots[i];\r\n                    var name = slot.data.attachmentName;\r\n                    if (name)\r\n                    {\r\n                        var attachment = newSkin.getAttachment(i, name);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skin = newSkin;\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotName: function (slotName, attachmentName)\r\n    {\r\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\r\n    {\r\n        if (this.skin)\r\n        {\r\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n            if (attachment) return attachment;\r\n        }\r\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n        return null;\r\n    },\r\n    /** @param attachmentName May be null. */\r\n    setAttachment: function (slotName, attachmentName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slot = slots[i];\r\n            if (slot.data.name == slotName)\r\n            {\r\n                var attachment = null;\r\n                if (attachmentName)\r\n                {\r\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\r\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\r\n                }\r\n                slot.setAttachment(attachment);\r\n                return;\r\n            }\r\n        }\r\n        throw \"Slot not found: \" + slotName;\r\n    },\r\n    /** @return May be null. */\r\n    findIkConstraint: function (ikConstraintName)\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\r\n        return null;\r\n    },\r\n    update: function (delta)\r\n    {\r\n        this.time += delta;\r\n    },\r\n    resetDrawOrder: function () {\r\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\r\n        {\r\n            this.drawOrder[i] = i;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skeleton;\r\n\r\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\r\nspine.SkeletonData = require('./SkeletonData');\r\nspine.BoneData = require('./BoneData');\r\nspine.IkConstraintData = require('./IkConstraintData');\r\nspine.SlotData = require('./SlotData');\r\nspine.Skin = require('./Skin');\r\nspine.EventData = require('./EventData');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.ColorTimeline = require('./ColorTimeline');\r\nspine.AttachmentTimeline = require('./AttachmentTimeline');\r\nspine.RotateTimeline = require('./RotateTimeline');\r\nspine.ScaleTimeline = require('./ScaleTimeline');\r\nspine.TranslateTimeline = require('./TranslateTimeline');\r\nspine.FlipXTimeline = require('./FlipXTimeline');\r\nspine.FlipYTimeline = require('./FlipYTimeline');\r\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\r\nspine.FfdTimeline = require('./FfdTimeline');\r\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\r\nspine.EventTimeline = require('./EventTimeline');\r\nspine.Event = require('./Event');\r\nspine.Animation = require('./Animation');\r\nspine.SkeletonJsonParser = function (attachmentLoader)\r\n{\r\n    this.attachmentLoader = attachmentLoader;\r\n};\r\nspine.SkeletonJsonParser.prototype = {\r\n    scale: 1,\r\n    readSkeletonData: function (root, name)\r\n    {\r\n        var skeletonData = new spine.SkeletonData();\r\n        skeletonData.name = name;\r\n\r\n        // Skeleton.\r\n        var skeletonMap = root[\"skeleton\"];\r\n        if (skeletonMap)\r\n        {\r\n            skeletonData.hash = skeletonMap[\"hash\"];\r\n            skeletonData.version = skeletonMap[\"spine\"];\r\n            skeletonData.width = skeletonMap[\"width\"] || 0;\r\n            skeletonData.height = skeletonMap[\"height\"] || 0;\r\n        }\r\n\r\n        // Bones.\r\n        var bones = root[\"bones\"];\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var boneMap = bones[i];\r\n            var parent = null;\r\n            if (boneMap[\"parent\"])\r\n            {\r\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\r\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\r\n            }\r\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\r\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\r\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\r\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\r\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\r\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\r\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\r\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\r\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\r\n            skeletonData.bones.push(boneData);\r\n        }\r\n\r\n        // IK constraints.\r\n        var ik = root[\"ik\"];\r\n        if (ik)\r\n        {\r\n            for (var i = 0, n = ik.length; i < n; i++)\r\n            {\r\n                var ikMap = ik[i];\r\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\r\n\r\n                var bones = ikMap[\"bones\"];\r\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\r\n                {\r\n                    var bone = skeletonData.findBone(bones[ii]);\r\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\r\n                    ikConstraintData.bones.push(bone);\r\n                }\r\n\r\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\r\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\r\n\r\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\r\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\r\n\r\n                skeletonData.ikConstraints.push(ikConstraintData);\r\n            }\r\n        }\r\n\r\n        // Slots.\r\n        var slots = root[\"slots\"];\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slotMap = slots[i];\r\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\r\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\r\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\r\n\r\n            var color = slotMap[\"color\"];\r\n            if (color)\r\n            {\r\n                slotData.r = this.toColor(color, 0);\r\n                slotData.g = this.toColor(color, 1);\r\n                slotData.b = this.toColor(color, 2);\r\n                slotData.a = this.toColor(color, 3);\r\n            }\r\n\r\n            slotData.attachmentName = slotMap[\"attachment\"];\r\n\r\n\r\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\r\n\r\n            skeletonData.slots.push(slotData);\r\n        }\r\n\r\n        // Skins.\r\n        var skins = root[\"skins\"];\r\n        for (var skinName in skins)\r\n        {\r\n            if (!skins.hasOwnProperty(skinName)) continue;\r\n            var skinMap = skins[skinName];\r\n            var skin = new spine.Skin(skinName);\r\n            for (var slotName in skinMap)\r\n            {\r\n                if (!skinMap.hasOwnProperty(slotName)) continue;\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var slotEntry = skinMap[slotName];\r\n                for (var attachmentName in slotEntry)\r\n                {\r\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\r\n                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);\r\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\r\n                }\r\n            }\r\n            skeletonData.skins.push(skin);\r\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n        }\r\n\r\n        // Events.\r\n        var events = root[\"events\"];\r\n        for (var eventName in events)\r\n        {\r\n            if (!events.hasOwnProperty(eventName)) continue;\r\n            var eventMap = events[eventName];\r\n            var eventData = new spine.EventData(eventName);\r\n            eventData.intValue = eventMap[\"int\"] || 0;\r\n            eventData.floatValue = eventMap[\"float\"] || 0;\r\n            eventData.stringValue = eventMap[\"string\"] || null;\r\n            skeletonData.events.push(eventData);\r\n        }\r\n\r\n        // Animations.\r\n        var animations = root[\"animations\"];\r\n        for (var animationName in animations)\r\n        {\r\n            if (!animations.hasOwnProperty(animationName)) continue;\r\n            this.readAnimation(animationName, animations[animationName], skeletonData);\r\n        }\r\n\r\n        return skeletonData;\r\n    },\r\n    readAttachment: function (skin, name, map)\r\n    {\r\n        name = map[\"name\"] || name;\r\n\r\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\r\n        var path = map[\"path\"] || name;\r\n\r\n        var scale = this.scale;\r\n        if (type == spine.AttachmentType.region)\r\n        {\r\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n            if (!region) return null;\r\n            region.path = path;\r\n            region.x = (map[\"x\"] || 0) * scale;\r\n            region.y = (map[\"y\"] || 0) * scale;\r\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\r\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\r\n            region.rotation = map[\"rotation\"] || 0;\r\n            region.width = (map[\"width\"] || 0) * scale;\r\n            region.height = (map[\"height\"] || 0) * scale;\r\n\r\n            var color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                region.r = this.toColor(color, 0);\r\n                region.g = this.toColor(color, 1);\r\n                region.b = this.toColor(color, 2);\r\n                region.a = this.toColor(color, 3);\r\n            }\r\n\r\n            region.updateOffset();\r\n            return region;\r\n        } else if (type == spine.AttachmentType.mesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n            mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.skinnedmesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n\r\n            var uvs = this.getFloatArray(map, \"uvs\", 1);\r\n            var vertices = this.getFloatArray(map, \"vertices\", 1);\r\n            var weights = [];\r\n            var bones = [];\r\n            for (var i = 0, n = vertices.length; i < n; )\r\n            {\r\n                var boneCount = vertices[i++] | 0;\r\n                bones[bones.length] = boneCount;\r\n                for (var nn = i + boneCount * 4; i < nn; )\r\n                {\r\n                    bones[bones.length] = vertices[i];\r\n                    weights[weights.length] = vertices[i + 1] * scale;\r\n                    weights[weights.length] = vertices[i + 2] * scale;\r\n                    weights[weights.length] = vertices[i + 3];\r\n                    i += 4;\r\n                }\r\n            }\r\n            mesh.bones = bones;\r\n            mesh.weights = weights;\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = uvs;\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.boundingbox)\r\n        {\r\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n            var vertices = map[\"vertices\"];\r\n            for (var i = 0, n = vertices.length; i < n; i++)\r\n                attachment.vertices.push(vertices[i] * scale);\r\n            return attachment;\r\n        }\r\n        throw \"Unknown attachment type: \" + type;\r\n    },\r\n    readAnimation: function (name, map, skeletonData)\r\n    {\r\n        var timelines = [];\r\n        var duration = 0;\r\n\r\n        var slots = map[\"slots\"];\r\n        for (var slotName in slots)\r\n        {\r\n            if (!slots.hasOwnProperty(slotName)) continue;\r\n            var slotMap = slots[slotName];\r\n            var slotIndex = skeletonData.findSlotIndex(slotName);\r\n\r\n            for (var timelineName in slotMap)\r\n            {\r\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\r\n                var values = slotMap[timelineName];\r\n                if (timelineName == \"color\")\r\n                {\r\n                    var timeline = new spine.ColorTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var color = valueMap[\"color\"];\r\n                        var r = this.toColor(color, 0);\r\n                        var g = this.toColor(color, 1);\r\n                        var b = this.toColor(color, 2);\r\n                        var a = this.toColor(color, 3);\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\r\n\r\n                } else if (timelineName == \"attachment\")\r\n                {\r\n                    var timeline = new spine.AttachmentTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n\r\n                } else\r\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\r\n            }\r\n        }\r\n\r\n        var bones = map[\"bones\"];\r\n        for (var boneName in bones)\r\n        {\r\n            if (!bones.hasOwnProperty(boneName)) continue;\r\n            var boneIndex = skeletonData.findBoneIndex(boneName);\r\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\r\n            var boneMap = bones[boneName];\r\n\r\n            for (var timelineName in boneMap)\r\n            {\r\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\r\n                var values = boneMap[timelineName];\r\n                if (timelineName == \"rotate\")\r\n                {\r\n                    var timeline = new spine.RotateTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n\r\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\r\n                {\r\n                    var timeline;\r\n                    var timelineScale = 1;\r\n                    if (timelineName == \"scale\")\r\n                        timeline = new spine.ScaleTimeline(values.length);\r\n                    else\r\n                    {\r\n                        timeline = new spine.TranslateTimeline(values.length);\r\n                        timelineScale = this.scale;\r\n                    }\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\r\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n\r\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\r\n                {\r\n                    var x = timelineName == \"flipX\";\r\n                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var field = x ? \"x\" : \"y\";\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[field] || false);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n                } else\r\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\r\n            }\r\n        }\r\n\r\n        var ikMap = map[\"ik\"];\r\n        for (var ikConstraintName in ikMap)\r\n        {\r\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\r\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\r\n            var values = ikMap[ikConstraintName];\r\n            var timeline = new spine.IkConstraintTimeline(values.length);\r\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = values.length; i < n; i++)\r\n            {\r\n                var valueMap = values[i];\r\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\r\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\r\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\r\n                this.readCurve(timeline, frameIndex, valueMap);\r\n                frameIndex++;\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n        }\r\n\r\n        var ffd = map[\"ffd\"];\r\n        for (var skinName in ffd)\r\n        {\r\n            var skin = skeletonData.findSkin(skinName);\r\n            var slotMap = ffd[skinName];\r\n            for (slotName in slotMap)\r\n            {\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var meshMap = slotMap[slotName];\r\n                for (var meshName in meshMap)\r\n                {\r\n                    var values = meshMap[meshName];\r\n                    var timeline = new spine.FfdTimeline(values.length);\r\n                    var attachment = skin.getAttachment(slotIndex, meshName);\r\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\r\n                    timeline.slotIndex = slotIndex;\r\n                    timeline.attachment = attachment;\r\n\r\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\r\n                    var vertexCount;\r\n                    if (isMesh)\r\n                        vertexCount = attachment.vertices.length;\r\n                    else\r\n                        vertexCount = attachment.weights.length / 3 * 2;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var vertices;\r\n                        if (!valueMap[\"vertices\"])\r\n                        {\r\n                            if (isMesh)\r\n                                vertices = attachment.vertices;\r\n                            else\r\n                            {\r\n                                vertices = [];\r\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            }\r\n                        } else {\r\n                            var verticesValue = valueMap[\"vertices\"];\r\n                            vertices = [];\r\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            var start = valueMap[\"offset\"] || 0;\r\n                            var nn = verticesValue.length;\r\n                            if (this.scale == 1)\r\n                            {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii];\r\n                            } else {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\r\n                            }\r\n                            if (isMesh)\r\n                            {\r\n                                var meshVertices = attachment.vertices;\r\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\r\n                                    vertices[ii] += meshVertices[ii];\r\n                            }\r\n                        }\r\n\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines[timelines.length] = timeline;\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var drawOrderValues = map[\"drawOrder\"];\r\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\r\n        if (drawOrderValues)\r\n        {\r\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\r\n            var slotCount = skeletonData.slots.length;\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\r\n            {\r\n                var drawOrderMap = drawOrderValues[i];\r\n                var drawOrder = null;\r\n                if (drawOrderMap[\"offsets\"])\r\n                {\r\n                    drawOrder = [];\r\n                    drawOrder.length = slotCount;\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        drawOrder[ii] = -1;\r\n                    var offsets = drawOrderMap[\"offsets\"];\r\n                    var unchanged = [];\r\n                    unchanged.length = slotCount - offsets.length;\r\n                    var originalIndex = 0, unchangedIndex = 0;\r\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\r\n                    {\r\n                        var offsetMap = offsets[ii];\r\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\r\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\r\n                        // Collect unchanged items.\r\n                        while (originalIndex != slotIndex)\r\n                            unchanged[unchangedIndex++] = originalIndex++;\r\n                        // Set changed items.\r\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\r\n                    }\r\n                    // Collect remaining unchanged items.\r\n                    while (originalIndex < slotCount)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Fill in unchanged items.\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                }\r\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        var events = map[\"events\"];\r\n        if (events)\r\n        {\r\n            var timeline = new spine.EventTimeline(events.length);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = events.length; i < n; i++)\r\n            {\r\n                var eventMap = events[i];\r\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\r\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\r\n                var event = new spine.Event(eventData);\r\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\r\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\r\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\r\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\r\n    },\r\n    readCurve: function (timeline, frameIndex, valueMap)\r\n    {\r\n        var curve = valueMap[\"curve\"];\r\n        if (!curve)\r\n            timeline.curves.setLinear(frameIndex);\r\n        else if (curve == \"stepped\")\r\n            timeline.curves.setStepped(frameIndex);\r\n        else if (curve instanceof Array)\r\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\r\n    },\r\n    toColor: function (hexString, colorIndex)\r\n    {\r\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\r\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\r\n    },\r\n    getFloatArray: function (map, name, scale)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Float32Array(list.length);\r\n        var i = 0, n = list.length;\r\n        if (scale == 1)\r\n        {\r\n            for (; i < n; i++)\r\n                values[i] = list[i];\r\n        } else {\r\n            for (; i < n; i++)\r\n                values[i] = list[i] * scale;\r\n        }\r\n        return values;\r\n    },\r\n    getIntArray: function (map, name)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Uint16Array(list.length);\r\n        for (var i = 0, n = list.length; i < n; i++)\r\n            values[i] = list[i] | 0;\r\n        return values;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonJsonParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkinnedMeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.SkinnedMeshAttachment.prototype = {\r\n    type: spine.AttachmentType.skinnedmesh,\r\n    bones: null,\r\n    weights: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var skeletonBones = slot.bone.skeleton.bones;\r\n        var weights = this.weights;\r\n        var bones = this.bones;\r\n\r\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\r\n        var wx, wy, bone, vx, vy, weight;\r\n        if (!slot.attachmentVertices.length)\r\n        {\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b];\r\n                    vy = weights[b + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        } else {\r\n            var ffd = slot.attachmentVertices;\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3, f += 2)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b] + ffd[f];\r\n                    vy = weights[b + 1] + ffd[f + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.SkinnedMeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.FlipXTimeline = require('./FlipXTimeline');\nspine.FlipYTimeline = require('./FlipYTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n","module.exports = {\r\n    radDeg: 180 / Math.PI,\r\n    degRad: Math.PI / 180,\r\n    temp: [],\r\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\r\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array\r\n};\r\n\r\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nSpine.globalAutoUpdate = true;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            var bone = slot.bone;\n\n            slotContainer.position.x = bone.worldX + attachment.x * bone.m00 + attachment.y * bone.m01;\n            slotContainer.position.y = bone.worldY + attachment.x * bone.m10 + attachment.y * bone.m11;\n            slotContainer.scale.x = bone.worldScaleX;\n            slotContainer.scale.y = bone.worldScaleY;\n            slotContainer.rotation = -(slot.bone.worldRotation * spine.degRad);\n            if (bone.worldFlipX) {\n                slotContainer.scale.x = -slotContainer.scale.x;\n                slotContainer.rotation = -slotContainer.rotation;\n            }\n            if (bone.worldFlipY == spine.Bone.yDown) {\n                slotContainer.scale.y = -slotContainer.scale.y;\n                slotContainer.rotation = -slotContainer.rotation;\n            }\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    if (Spine.globalAutoUpdate) {\n        this.lastTime = this.lastTime || Date.now();\n        var timeDelta = (Date.now() - this.lastTime) * 0.001;\n        this.lastTime = Date.now();\n        this.update(timeDelta);\n    } else {\n        this.lastTime = 0;\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var spriteRect = new PIXI.Rectangle(descriptor.x,\n                                        descriptor.y,\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n    var sprite = new PIXI.Sprite(spriteTexture);\n\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n    sprite.scale.x = attachment.width / descriptor.originalWidth * attachment.scaleX;\n    sprite.scale.y = attachment.height / descriptor.originalHeight * attachment.scaleY;\n    sprite.rotation = baseRotation - (attachment.rotation * spine.degRad);\n    sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\n    sprite.anchor.y = 1.0 - ((0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height);\n    sprite.alpha = attachment.a;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\n    spine = require('../SpineRuntime'),\n    imageLoaderAdapter = require('./imageLoaderAdapter');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT,\n            metadata: resource.metadata.spineMetadata\n        };\n        var imageOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n        var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            new spine.Atlas(this.xhr.responseText, adapter, function(spineAtlas) {\n                var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n                resource.spineData = skeletonData;\n                resource.spineAtlas = spineAtlas;\n                if (atlasParser.enableCaching)\n                    atlasParser.AnimCache[resource.name] = resource.spineData;\n\n                next();\n            });\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n","var spine = require('../SpineRuntime');\n\nmodule.exports = function (loader, namePrefix, baseUrl, imageOptions) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\n    {\n        baseUrl += '/';\n    }\n    return function(line, callback) {\n        var name = namePrefix + line;\n        var url = baseUrl + line;\n        loader.add(name, url, imageOptions, function(resource) {\n            callback(resource.texture.baseTexture);\n        });\n    }\n};\n","module.exports = {\n    atlasParser: require('./atlasParser'),\n    Loader: require('./Loader'),\n    syncImageLoaderAdapter: require('./syncImageLoaderAdapter'),\n    imageLoaderAdapter: require('./imageLoaderAdapter')\n};\n","var spine = require('../SpineRuntime');\n\nmodule.exports = function (baseUrl, crossOrigin) {\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\n    {\n        baseUrl += '/';\n    }\n    return function(line, callback) {\n        callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\n    }\n};\n"],"sourceRoot":"./"}