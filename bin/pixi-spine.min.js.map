{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/WeightedMeshAttachment.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/imageLoaderAdapter.js","src/loaders/index.js","src/loaders/syncImageLoaderAdapter.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","syncImageLoaderAdapter","Atlas","atlasText","loaderFunction","callback","pages","regions","addSpineAtlas","addTexture","texture","page","rendererObject","baseTexture","width","realWidth","height","realHeight","format","minFilter","magFilter","uWrap","TextureWrap","clampToEdge","vWrap","region","addTextureHash","textures","iterateParser","line","reader","readLine","self","trim","readTuple","tuple","parseInt","Format","TextureFilter","direction","readValue","repeat","console","log","rotate","x","y","resolution","frame","Rectangle","splits","pads","originalWidth","originalHeight","offsetX","offsetY","orig","VERSION","Texture","frame2","crop","clone","baseUrl","crossOrigin","texturesLoading","findRegion","dispose","destroy","updateUVs","_updateUvs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","../loaders/syncImageLoaderAdapter.js","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","WeightedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","v","u2","v2","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","newWeightedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./WeightedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,"Object","defineProperties","get","tex","_uvs","x0","y0","x2","y2","warn","pixiOffsetY",10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","weightedmesh","skinnedmesh","linkedmesh","weightedlinkedmesh",12,"Bone","boneData","parent","matrix","Matrix","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","worldSignX","worldSignY","updateWorldTransform","cos","degRad","sin","la","lb","lc","ld","m","c","b","d","tx","ty","signum","pa","pb","pc","pd","inheritRotation","inheritScale","temp","psx","psy","za","zb","zc","zd","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY","getWorldRotationX","atan2","radDeg","getWorldRotationY","getWorldScaleX","sqrt","getWorldScaleY","worldX","worldY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","m00","m01","m10","m11","px","py","./AttachmentType",15,"ColorTimeline","g","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline",21,"FfdTimeline","frameVertices","slotAttachment","applyFFD","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"IkConstraint","bendDirection","bones","findBone","apply1","apply2","targetX","targetY","parentRotation","child","bendDir","offset1","offset2","sign2","csx","cy","pp","ppm","wx","wy","a1","a2","l1","l2","outer","abs","acos","ta","aa","bb","ll","dd","c0","c1","c2","q","r0","r1","minAngle","minDist","Infinity","minX","minY","maxAngle","maxDist","maxX","maxY","dist","PI","angle","offset",23,"IkConstraintData",24,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",25,"parentMesh","inheritFFD","uvs","regionUVs","triangles","hullLength","edges","Float32Array","w1","h1","w2","h2","x1","x3","y1","y3","verticesCount","vx","vy","sourceAttachment","setParentMesh",26,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","radians","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",27,"RotateTimeline","boneIndex","amount","prevFrameValue",28,"ScaleTimeline","prevFrameX","prevFrameY",29,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",30,"SkeletonBounds","polygonPool","polygons","boundingBoxes","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",31,"SkeletonData","skins","animations","version","hash","findEvent","eventName",32,"LinkedMesh","SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","linkedMeshes","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","size","linkedMesh","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",33,"attachments","oldSkin",34,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",35,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",36,37,38,"regionU2","regionU","regionV2","regionV","weight","skeletonBones","w",39,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",40,41,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","SlotContainerUpdateTransformV3","pt","worldTransform","wt","lt","localTransform","worldAlpha","_currentBounds","atlasParser","fromAtlas","resourceName","AnimCache","create","constructor","globalAutoUpdate","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","transform","_dirtyLocal","TransformStatic","_dirtyParentVersion","_versionLocal","copy","displayObjectUpdateTransform","tint","utils","rgb2hex","meshes","Date","now","timeDelta","descriptor","Sprite","anchor","position","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",42,"Loader","addPixiMiddleware","loader","use","./atlasParser",43,"Resource","imageLoaderAdapter","resource","isJson","atlasPath","url","lastIndexOf","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","metadata","spineMetadata","imageOptions","imageMetadata","adapter","add","res","xhr","responseText","spineAtlas","spineJsonParser","enableCaching","./imageLoaderAdapter",44,"namePrefix",45,"./Loader","./syncImageLoaderAdapter",46,"BaseTexture","fromImage"],"mappings":"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","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n\n},{\"./Spine\":41,\"./SpineRuntime\":39,\"./loaders\":45}],2:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n\n},{\"../SpineUtil\":40}],3:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n\n},{\"../SpineUtil\":40,\"./TrackEntry\":36}],4:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n\n},{\"../SpineUtil\":40}],5:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasRegion = require('./AtlasRegion');\nvar syncImageLoaderAdapter = require('../loaders/syncImageLoaderAdapter.js')\n\nspine.Atlas = function(atlasText, loaderFunction, callback) {\n    this.pages = [];\n    this.regions = [];\n    if (typeof atlasText === \"string\") {\n        this.addSpineAtlas.call(this, atlasText, loaderFunction, callback);\n    }\n};\n\nspine.Atlas.prototype = {\n    addTexture: function(name, texture) {\n        var pages = this.pages;\n        var page = null;\n        for (var i=0;i<pages.length;i++) {\n            if (pages[i].rendererObject === texture.baseTexture) {\n                page = pages[i];\n                break;\n            }\n        }\n        if (page === null) {\n            page = new AtlasPage();\n            page.name = 'texturePage';\n            var baseTexture = texture.baseTexture;\n            page.width = baseTexture.realWidth;\n            page.height = baseTexture.realHeight;\n            page.rendererObject = baseTexture;\n            //those fields are not relevant in Pixi\n            page.format = 'RGBA8888';\n            page.minFilter = page.magFilter = \"Nearest\";\n            page.uWrap = Atlas.TextureWrap.clampToEdge;\n            page.vWrap = Atlas.TextureWrap.clampToEdge;\n            pages.push(page);\n        }\n        var region = new AtlasRegion();\n        region.name = name;\n        region.page = page;\n        region.rendererObject = texture;\n        region.index = -1;\n        this.regions.push(region);\n        return region;\n    },\n    addTextureHash: function(textures) {\n        for (var key in textures) {\n            if (textures.hasOwnProperty(key)) {\n                this.addTexture(key, textures[key]);\n            }\n        }\n    },\n    addSpineAtlas: function (atlasText, loaderFunction, callback)\n    {\n        //TODO: remove this legacy later\n        if (typeof loaderFunction !== \"function\") {\n            //old syntax\n            var baseUrl = loaderFunction;\n            var crossOrigin = callback;\n            loaderFunction = syncImageLoaderAdapter(baseUrl, crossOrigin);\n            callback = null;\n        }\n\n        this.texturesLoading = 0;\n\n        var self = this;\n\n        var reader = new spine.AtlasReader(atlasText);\n        var tuple = [];\n        tuple.length = 4;\n        var page = null;\n\n        iterateParser();\n\n        function iterateParser() {\n            while (true) {\n                var line = reader.readLine();\n                if (line === null) {\n                    return callback && callback(self);\n                }\n                line = reader.trim(line);\n                if (!line.length)\n                    page = null;\n                else if (!page) {\n                    page = new spine.AtlasPage();\n                    page.name = line;\n\n                    if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\n                        page.width = parseInt(tuple[0]);\n                        page.height = parseInt(tuple[1]);\n                        reader.readTuple(tuple);\n                    } else {\n                        //old format, detect width and height by texture\n                    }\n                    page.format = spine.Atlas.Format[tuple[0]];\n\n                    reader.readTuple(tuple);\n                    page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\n                    page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\n\n                    var direction = reader.readValue();\n                    page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\n                    page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\n                    if (direction == \"x\")\n                        page.uWrap = spine.Atlas.TextureWrap.repeat;\n                    else if (direction == \"y\")\n                        page.vWrap = spine.Atlas.TextureWrap.repeat;\n                    else if (direction == \"xy\")\n                        page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\n\n                    // @ivanpopelyshev: I so want to use generators and \"yield()\" here, or at least promises\n                    loaderFunction(line, function (texture) {\n                        page.rendererObject = texture;\n                        self.pages.push(page);\n                        if (!page.width || !page.height) {\n                            page.width = texture.realWidth;\n                            page.height = texture.realHeight;\n                            if (!page.width || !page.height) {\n                                console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\n                            }\n                        }\n                        iterateParser();\n                    });\n                    break;\n                } else {\n                    var region = new spine.AtlasRegion();\n                    region.name = line;\n                    region.page = page;\n\n                    var rotate = reader.readValue() === \"true\" ? 6 : 0;\n\n                    reader.readTuple(tuple);\n                    var x = parseInt(tuple[0]);\n                    var y = parseInt(tuple[1]);\n\n                    reader.readTuple(tuple);\n                    var width = parseInt(tuple[0]);\n                    var height = parseInt(tuple[1]);\n\n                    var resolution = page.rendererObject.resolution;\n                    x /= resolution;\n                    y /= resolution;\n                    width /= resolution;\n                    height /= resolution;\n\n                    var frame = new PIXI.Rectangle(x, y, rotate ? height : width, rotate ? width : height);\n\n                    if (reader.readTuple(tuple) == 4) { // split is optional\n                        region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                        if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\n                            region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                            reader.readTuple(tuple);\n                        }\n                    }\n\n                    var originalWidth = parseInt(tuple[0]) / resolution;\n                    var originalHeight = parseInt(tuple[1]) / resolution;\n                    reader.readTuple(tuple);\n                    var offsetX = parseInt(tuple[0]) / resolution;\n                    var offsetY = parseInt(tuple[1]) / resolution;\n\n                    var orig = new PIXI.Rectangle(0, 0, originalWidth, originalHeight);\n                    var trim = new PIXI.Rectangle(offsetX, originalHeight - height - offsetY, width, height);\n\n                    //TODO: pixiv3 uses different frame/crop/trim\n\n                    if (PIXI.VERSION[0] == '4') {\n                        // pixi v4.0.0\n                        region.texture = new PIXI.Texture(region.page.rendererObject, frame, orig, trim, rotate);\n                    } else {\n                        // pixi v3.0.11\n                        var frame2 = new PIXI.Rectangle(x, y, width, height);\n                        var crop = frame2.clone();\n                        trim.width = originalWidth;\n                        trim.height = originalHeight;\n                        region.texture = new PIXI.Texture(region.page.rendererObject, frame2, crop, trim, rotate);\n                    }\n\n                    region.index = parseInt(reader.readValue());\n\n                    self.regions.push(region);\n                }\n            }\n        }\n    },\n    findRegion: function (name)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n            if (regions[i].name == name) return regions[i];\n        return null;\n    },\n    dispose: function ()\n    {\n        var pages = this.pages;\n        for (var i = 0, n = pages.length; i < n; i++)\n            pages[i].rendererObject.destroy(true);\n    },\n    updateUVs: function (page)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n        {\n            var region = regions[i];\n            if (region.page != page) continue;\n            region.texture._updateUvs();\n        }\n    }\n};\n\nspine.Atlas.Format = {\n    alpha: 0,\n    intensity: 1,\n    luminanceAlpha: 2,\n    rgb565: 3,\n    rgba4444: 4,\n    rgb888: 5,\n    rgba8888: 6\n};\n\nspine.Atlas.TextureFilter = {\n    nearest: 0,\n    linear: 1,\n    mipMap: 2,\n    mipMapNearestNearest: 3,\n    mipMapLinearNearest: 4,\n    mipMapNearestLinear: 5,\n    mipMapLinearLinear: 6\n};\n\nspine.Atlas.TextureWrap = {\n    mirroredRepeat: 0,\n    clampToEdge: 1,\n    repeat: 2\n};\nmodule.exports = spine.Atlas;\n\n},{\"../SpineUtil\":40,\"../loaders/syncImageLoaderAdapter.js\":46,\"./AtlasPage\":7,\"./AtlasReader\":8,\"./AtlasRegion\":9}],6:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.AtlasAttachmentParser = function (atlas)\n{\n    this.atlas = atlas;\n};\nspine.AtlasAttachmentParser.prototype = {\n    newRegionAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\n        var attachment = new spine.RegionAttachment(name);\n        attachment.rendererObject = region;\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\n        var attachment = new spine.MeshAttachment(name);\n        attachment.rendererObject = region;\n        return attachment;\n    },\n    newWeightedMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\n        var attachment = new spine.WeightedMeshAttachment(name);\n        attachment.rendererObject = region;\n        return attachment;\n    },\n    newBoundingBoxAttachment: function (skin, name)\n    {\n        return new spine.BoundingBoxAttachment(name);\n    }\n};\nmodule.exports = spine.AtlasAttachmentParser;\n\n\n},{\"../SpineUtil\":40,\"./BoundingBoxAttachment\":14,\"./MeshAttachment\":25,\"./RegionAttachment\":26,\"./WeightedMeshAttachment\":38}],7:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n\n},{\"../SpineUtil\":40}],8:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n\n},{\"../SpineUtil\":40}],9:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.AtlasRegion = function ()\n{};\nspine.AtlasRegion.prototype = {\n    name: null,\n    /**\n     * @member {PIXI.Texture}\n     */\n    texture: null,\n\n    /**\n     * @member {PIXI.spine.Spine.AtlasPage}\n     */\n    page: null,\n    index: 0,\n    splits: null,\n    pads: null\n};\n\nObject.defineProperties(spine.AtlasRegion.prototype, {\n    x: {\n        get: function() {\n            return this.texture.frame.x;\n        }\n    },\n    y: {\n        get: function() {\n            return this.texture.frame.y;\n        }\n    },\n    width: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return tex.crop.width;\n            }\n            if (tex.trim) {\n                return tex.trim.width;\n            }\n            return tex.orig.width;\n        }\n    },\n    height: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return tex.crop.height;\n            }\n            if (tex.trim) {\n                return tex.trim.height;\n            }\n            return tex.orig.height;\n        }\n    },\n    u: {\n        get: function() {\n            return this.texture._uvs.x0;\n        }\n    },\n    v: {\n        get: function() {\n            return this.texture._uvs.y0;\n        }\n    },\n    u2: {\n        get: function() {\n            return this.texture._uvs.x2;\n        }\n    },\n    v2: {\n        get: function() {\n            return this.texture._uvs.y2;\n        }\n    },\n    rotate: {\n        get: function() {\n            return !!this.texture.rotate;\n        }\n    },\n    offsetX: {\n        get: function() {\n            var tex = this.texture;\n            return tex.trim ? tex.trim.x : 0;\n        }\n    },\n    offsetY: {\n        get: function() {\n            console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n            var tex = this.texture;\n            return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n        }\n    },\n    pixiOffsetY: {\n        get: function() {\n            var tex = this.texture;\n            return tex.trim ? tex.trim.y : 0;\n        }\n    },\n    originalWidth: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.width;\n                }\n                return tex.crop.width;\n            }\n            return tex.orig.width;\n        }\n    },\n    originalHeight: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.height;\n                }\n                return tex.crop.height;\n            }\n            return tex.orig.height;\n        }\n    }\n});\n\nmodule.exports = spine.AtlasRegion;\n\n\n},{\"../SpineUtil\":40}],10:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],11:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.AttachmentType = {\n    region: 0,\n    boundingbox: 1,\n    mesh: 2,\n    weightedmesh : 3,\n    skinnedmesh: 3,\n    linkedmesh: 4,\n    weightedlinkedmesh: 5\n};\nmodule.exports = spine.AttachmentType;\n\n\n},{\"../SpineUtil\":40}],12:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.Bone = function (boneData, skeleton, parent)\n{\n    this.data = boneData;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.matrix = new PIXI.Matrix();\n    this.setToSetupPose();\n};\nspine.Bone.yDown = false;\nspine.Bone.prototype = {\n    x: 0, y: 0,\n    rotation: 0, rotationIK: 0,\n    scaleX: 1, scaleY: 1,\n    flipX: false, flipY: false,\n\n    worldSignX: 1, worldSignY: 1,\n    updateWorldTransform: function() {\n        var rotation = this.rotationIK;\n        var scaleX = this.scaleX;\n        var scaleY = this.scaleY;\n        var x = this.x;\n        var y = this.y;\n\n        var cos = Math.cos(rotation * spine.degRad), sin = Math.sin(rotation * spine.degRad);\n        var la = cos * scaleX, lb = -sin * scaleY, lc = sin * scaleX, ld = cos * scaleY;\n        var parent = this.parent;\n        var m = this.matrix;\n        var skeleton = this.skeleton;\n        if (!parent) { // Root bone.\n            if (skeleton.flipX) {\n                x = -x;\n                la = -la;\n                lb = -lb;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                y = -y;\n                lc = -lc;\n                ld = -ld;\n            }\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n            m.tx = x;\n            m.ty = y;\n            this.worldSignX = spine.signum(scaleX);\n            this.worldSignY = spine.signum(scaleY);\n            return;\n        }\n\n\n        var pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n        m.tx = pa * x + pb * y + parent.matrix.tx;\n        m.ty = pc * x + pd * y + parent.matrix.ty;\n        this.worldSignX = parent.worldSignX * spine.signum(scaleX);\n        this.worldSignY = parent.worldSignY * spine.signum(scaleY);\n        var data = this.data;\n\n        if (data.inheritRotation && data.inheritScale) {\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n        } else if (data.inheritRotation) { // No scale inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                cos = Math.cos(parent.rotationIK * spine.degRad);\n                sin = Math.sin(parent.rotationIK * spine.degRad);\n                var temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritRotation) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else if (data.inheritScale) { // No rotation inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                var r = parent.rotation;\n                cos = Math.cos(r * spine.degRad);\n                sin = Math.sin(r * spine.degRad);\n                var psx = parent.scaleX, psy = parent.scaleY;\n                var za = cos * psx, zb = -sin * psy, zc = sin * psx, zd = cos * psy;\n                temp = pa * za + pb * zc;\n                pb = pa * zb + pb * zd;\n                pa = temp;\n                temp = pc * za + pd * zc;\n                pd = pc * zb + pd * zd;\n                pc = temp;\n\n                if (psx < 0) {\n                    r = -r;\n                } else {\n                    sin = -sin;\n                }\n                temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritScale) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else {\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n        }\n    },\n\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.rotationIK = this.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n    },\n    worldToLocal: function (world)\n    {\n        var m = this.matrix;\n        var dx = world[0] - m.tx, dy = m.ty;\n        var invDet = 1 / (m.a * m.d - m.b * m.c);\n        //Yep, its a bug in original spine. I hope they'll fix it: https://github.com/EsotericSoftware/spine-runtimes/issues/544\n        world[0] = dx * m.a * invDet - dy * m.c * invDet;\n        world[1] = dy * m.d * invDet - dx * m.b * invDet;\n    },\n    localToWorld: function (local)\n    {\n        var localX = local[0], localY = local[1];\n        var m = this.matrix;\n        local[0] = localX * m.a + localY * m.c + m.tx;\n        local[1] = localX * m.b + localY * m.d + m.ty;\n    },\n    getWorldRotationX: function() {\n        return Math.atan2(this.matrix.b, this.matrix.a) * spine.radDeg;\n\n    },\n    getWorldRotationY: function() {\n        return Math.atan2(this.matrix.d, this.matrix.c) * spine.radDeg;\n    },\n    getWorldScaleX: function() {\n        var a = this.matrix.a;\n        var b = this.matrix.b;\n        return Math.sqrt(a*a+b*b);\n    },\n    getWorldScaleY: function() {\n        var c = this.matrix.c;\n        var d = this.matrix.d;\n        return Math.sqrt(c * c + d * d);\n    }\n};\n\nObject.defineProperties(spine.Bone.prototype, {\n    worldX: {\n        get: function() {\n            return this.matrix.tx;\n        }\n    },\n    worldY:  {\n        get: function() {\n            return this.matrix.ty;\n        }\n    }\n});\n\nmodule.exports = spine.Bone;\n\n},{\"../SpineUtil\":40}],13:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.BoneData = function (name, parent)\n{\n    this.name = name;\n    this.parent = parent;\n};\nspine.BoneData.prototype = {\n    length: 0,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    inheritScale: true,\n    inheritRotation: true\n};\nmodule.exports = spine.BoneData;\n\n\n},{\"../SpineUtil\":40}],14:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoundingBoxAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.vertices = [];\r\n};\r\nspine.BoundingBoxAttachment.prototype = {\r\n    type: spine.AttachmentType.boundingbox,\r\n    computeWorldVertices: function (x, y, bone, worldVertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.a, m01 = bone.c, m10 = bone.b, m11 = bone.d;\r\n        var vertices = this.vertices;\r\n        for (var i = 0, n = vertices.length; i < n; i += 2)\r\n        {\r\n            var px = vertices[i];\r\n            var py = vertices[i + 1];\r\n            worldVertices[i] = px * m00 + py * m01 + x;\r\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.BoundingBoxAttachment;\r\n\r\n\n},{\"../SpineUtil\":40,\"./AttachmentType\":11}],15:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],16:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n\n},{\"../SpineUtil\":40}],17:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2}],18:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n\n},{\"../SpineUtil\":40}],19:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n\n},{\"../SpineUtil\":40}],20:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2}],21:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        var slotAttachment = slot.attachment;\n        if (!slotAttachment.applyFFD || !slotAttachment.applyFFD(this.attachment)) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],22:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = bone.parent ? bone.parent.getWorldRotationX(): 0;\n    var rotation = bone.rotation;\n    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;\n    if ((bone.worldSignX != bone.worldSignY) != (bone.skeleton.flipX != (bone.skeleton.flipY != spine.Bone.yDown))) rotationIK = 360 - rotationIK;\n    if (rotationIK > 180)\n        rotationIK -= 360;\n    else if (rotationIK < -180) rotationIK += 360;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDir, alpha)\n{\n    if (alpha == 0) return;\n    var px = parent.x, py = parent.y, psx = parent.scaleX, psy = parent.scaleY, csx = child.scaleX, cy = child.y;\n    var offset1, offset2, sign2;\n    if (psx < 0) {\n        psx = -psx;\n        offset1 = 180;\n        sign2 = -1;\n    } else {\n        offset1 = 0;\n        sign2 = 1;\n    }\n    if (psy < 0) {\n        psy = -psy;\n        sign2 = -sign2;\n    }\n    if (csx < 0) {\n        csx = -csx;\n        offset2 = 180;\n    } else\n        offset2 = 0;\n    var pp = parent.parent;\n    var ppm = pp.matrix;\n    var tx, ty, dx, dy;\n    if (pp == null) {\n        tx = targetX - px;\n        ty = targetY - py;\n        dx = child.worldX - px;\n        dy = child.worldY - py;\n    } else {\n        var a = ppm.a, b = ppm.c, c = ppm.b, d = ppm.d, invDet = 1 / (a * d - b * c);\n        var wx = ppm.tx, wy = ppm.ty, x = targetX - wx, y = targetY - wy;\n        tx = (x * d - y * b) * invDet - px;\n        ty = (y * a - x * c) * invDet - py;\n        x = child.worldX - wx;\n        y = child.worldY - wy;\n        dx = (x * d - y * b) * invDet - px;\n        dy = (y * a - x * c) * invDet - py;\n    }\n    var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n    outer:\n        if (Math.abs(psx - psy) <= 0.0001) {\n            l2 *= psx;\n            var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1)\n                cos = -1;\n            else if (cos > 1) cos = 1;\n            a2 = Math.acos(cos) * bendDir;\n            var a = l1 + l2 * cos, o = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * o, tx * a + ty * o);\n        } else {\n            cy = 0;\n            var a = psx * l2, b = psy * l2, ta = Math.atan2(ty, tx);\n            var aa = a * a, bb = b * b, ll = l1 * l1, dd = tx * tx + ty * ty;\n            var c0 = bb * ll + aa * dd - aa * bb, c1 = -2 * bb * l1, c2 = bb - aa;\n            var d = c1 * c1 - 4 * c2 * c0;\n            if (d >= 0) {\n                var q = Math.sqrt(d);\n                if (c1 < 0) q = -q;\n                q = -(c1 + q) / 2;\n                var r0 = q / c2, r1 = c0 / q;\n                var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                if (r * r <= dd) {\n                    var y = Math.sqrt(dd - r * r) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            var minAngle = 0, minDist = Infinity, minX = 0, minY = 0;\n            var maxAngle = 0, maxDist = 0, maxX = 0, maxY = 0;\n            var x = l1 + a, dist = x * x;\n            if (dist > maxDist) {\n                maxAngle = 0;\n                maxDist = dist;\n                maxX = x;\n            }\n            x = l1 - a;\n            dist = x * x;\n            if (dist < minDist) {\n                minAngle = Math.PI;\n                minDist = dist;\n                minX = x;\n            }\n            var angle = Math.acos(-a * l1 / (aa - bb));\n            x = a * Math.cos(angle) + l1;\n            var y = b * Math.sin(angle);\n            dist = x * x + y * y;\n            if (dist < minDist) {\n                minAngle = angle;\n                minDist = dist;\n                minX = x;\n                minY = y;\n            }\n            if (dist > maxDist) {\n                maxAngle = angle;\n                maxDist = dist;\n                maxX = x;\n                maxY = y;\n            }\n            if (dd <= (minDist + maxDist) / 2) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            } else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n    var offset = Math.atan2(cy, child.x) * sign2;\n    a1 = (a1 - offset) * spine.radDeg + offset1;\n    a2 = (a2 + offset) * spine.radDeg * sign2 + offset2;\n    if (a1 > 180)\n        a1 -= 360;\n    else if (a1 < -180) a1 += 360;\n    if (a2 > 180)\n        a2 -= 360;\n    else if (a2 < -180) a2 += 360;\n    var rotation = parent.rotation;\n    parent.rotationIK = rotation + (a1 - rotation) * alpha;\n    rotation = child.rotation;\n    child.rotationIK = rotation + (a2 - rotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n\n},{\"../SpineUtil\":40}],23:[function(require,module,exports){\nvar spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n\n},{\"../SpineUtil\":40}],24:[function(require,module,exports){\nvar spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],25:[function(require,module,exports){\nvar spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.MeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.MeshAttachment.prototype = {\n    type: spine.AttachmentType.mesh,\n    parentMesh: null,\n    inheritFFD: false,\n    vertices: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function ()\n    {\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        var region = this.rendererObject;\n        if (!region) return;\n        var texture = region.texture;\n        var r = texture._uvs;\n        var w1 = region.width, h1 = region.height, w2 = region.originalWidth, h2 = region.originalHeight;\n        var x = region.offsetX, y = region.pixiOffsetY;\n        for (var i = 0; i < n; i += 2)\n        {\n            var u = this.regionUVs[i], v = this.regionUVs[i+1];\n            u = (u * w2 - x) / w1;\n            v = (v * h2 - y) / h1;\n            this.uvs[i] = (r.x0 * (1 - u) + r.x1 * u) * (1-v) + (r.x3 * (1 - u) + r.x2 * u) * v;\n            this.uvs[i+1] = (r.y0 * (1 - u) + r.y1 * u) * (1-v) + (r.y3 * (1 - u) + r.y2 * u) * v;\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var bone = slot.bone;\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var vertices = this.vertices;\n        var verticesCount = vertices.length;\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\n        for (var i = 0; i < verticesCount; i += 2)\n        {\n            var vx = vertices[i];\n            var vy = vertices[i + 1];\n            worldVertices[i] = vx * m00 + vy * m01 + x;\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.vertices = parentMesh.vertices;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.MeshAttachment;\n\n\n},{\"../SpineUtil\":40,\"./AttachmentType\":11}],26:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.RegionAttachment = function (name)\n{\n    this.name = name;\n    this.offset = [];\n    this.offset.length = 8;\n    this.uvs = [];\n    this.uvs.length = 8;\n};\nspine.RegionAttachment.prototype = {\n    type: spine.AttachmentType.region,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    width: 0, height: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    setUVs: function (u, v, u2, v2, rotate)\n    {\n        var uvs = this.uvs;\n        if (rotate)\n        {\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v2;\n            uvs[4/*X3*/] = u;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v;\n            uvs[0/*X1*/] = u2;\n            uvs[1/*Y1*/] = v2;\n        } else {\n            uvs[0/*X1*/] = u;\n            uvs[1/*Y1*/] = v2;\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v;\n            uvs[4/*X3*/] = u2;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v2;\n        }\n    },\n    updateOffset: function ()\n    {\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\n        var localX2 = localX + this.regionWidth * regionScaleX;\n        var localY2 = localY + this.regionHeight * regionScaleY;\n        var radians = this.rotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        var localXCos = localX * cos + this.x;\n        var localXSin = localX * sin;\n        var localYCos = localY * cos + this.y;\n        var localYSin = localY * sin;\n        var localX2Cos = localX2 * cos + this.x;\n        var localX2Sin = localX2 * sin;\n        var localY2Cos = localY2 * cos + this.y;\n        var localY2Sin = localY2 * sin;\n        var offset = this.offset;\n        offset[0/*X1*/] = localXCos - localYSin;\n        offset[1/*Y1*/] = localYCos + localXSin;\n        offset[2/*X2*/] = localXCos - localY2Sin;\n        offset[3/*Y2*/] = localY2Cos + localXSin;\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\n        offset[6/*X4*/] = localX2Cos - localYSin;\n        offset[7/*Y4*/] = localYCos + localX2Sin;\n    },\n    computeVertices: function (x, y, bone, vertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var offset = this.offset;\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\n    }\n};\nmodule.exports = spine.RegionAttachment;\n\n\n},{\"../SpineUtil\":40,\"./AttachmentType\":11}],27:[function(require,module,exports){\nvar spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],28:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],29:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.Bone = require('./Bone');\nspine.Slot = require('./Slot');\nspine.IkConstraint = require('./IkConstraint');\nspine.Skeleton = function (skeletonData)\n{\n    this.data = skeletonData;\n\n    this.bones = [];\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\n    {\n        var boneData = skeletonData.bones[i];\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\n        this.bones.push(new spine.Bone(boneData, this, parent));\n    }\n\n    this.slots = [];\n    this.drawOrder = [];\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\n    {\n        var slotData = skeletonData.slots[i];\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\n        var slot = new spine.Slot(slotData, bone);\n        this.slots.push(slot);\n        this.drawOrder.push(i);\n    }\n\n    this.ikConstraints = [];\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\n\n    this.boneCache = [];\n    this.updateCache();\n};\nspine.Skeleton.prototype = {\n    x: 0, y: 0,\n    skin: null,\n    r: 1, g: 1, b: 1, a: 1,\n    time: 0,\n    flipX: false, flipY: false,\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\n    updateCache: function ()\n    {\n        var ikConstraints = this.ikConstraints;\n        var ikConstraintsCount = ikConstraints.length;\n\n        var arrayCount = ikConstraintsCount + 1;\n        var boneCache = this.boneCache;\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\n        for (var i = 0, n = boneCache.length; i < n; i++)\n            boneCache[i].length = 0;\n        while (boneCache.length < arrayCount)\n            boneCache[boneCache.length] = [];\n\n        var nonIkBones = boneCache[0];\n        var bones = this.bones;\n\n        outer:\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            var current = bone;\n            do {\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\n                {\n                    var ikConstraint = ikConstraints[ii];\n                    var parent = ikConstraint.bones[0];\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\n                    while (true)\n                    {\n                        if (current == child)\n                        {\n                            boneCache[ii].push(bone);\n                            boneCache[ii + 1].push(bone);\n                            continue outer;\n                        }\n                        if (child == parent) break;\n                        child = child.parent;\n                    }\n                }\n                current = current.parent;\n            } while (current);\n            nonIkBones[nonIkBones.length] = bone;\n        }\n    },\n    /** Updates the world transform for each bone. */\n    updateWorldTransform: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            bone.rotationIK = bone.rotation;\n        }\n        var i = 0, last = this.boneCache.length - 1;\n        while (true)\n        {\n            var cacheBones = this.boneCache[i];\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\n                cacheBones[ii].updateWorldTransform();\n            if (i == last) break;\n            this.ikConstraints[i].apply();\n            i++;\n        }\n    },\n    /** Sets the bones and slots to their setup pose values. */\n    setToSetupPose: function ()\n    {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    },\n    setBonesToSetupPose: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n        {\n            var ikConstraint = ikConstraints[i];\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\n            ikConstraint.mix = ikConstraint.data.mix;\n        }\n    },\n    setSlotsToSetupPose: function ()\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            slots[i].setToSetupPose(i);\n        }\n\n        this.resetDrawOrder();\n    },\n    /** @return May return null. */\n    getRootBone: function ()\n    {\n        return this.bones.length ? this.bones[0] : null;\n    },\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return slots[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    },\n    setSkinByName: function (skinName)\n    {\n        var skin = this.data.findSkin(skinName);\n        if (!skin) throw \"Skin not found: \" + skinName;\n        this.setSkin(skin);\n    },\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\n     * @param newSkin May be null. */\n    setSkin: function (newSkin)\n    {\n        if (newSkin)\n        {\n            if (this.skin)\n                newSkin._attachAll(this, this.skin);\n            else\n            {\n                var slots = this.slots;\n                for (var i = 0, n = slots.length; i < n; i++)\n                {\n                    var slot = slots[i];\n                    var name = slot.data.attachmentName;\n                    if (name)\n                    {\n                        var attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n    },\n    /** @return May be null. */\n    getAttachmentBySlotName: function (slotName, attachmentName)\n    {\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\n    },\n    /** @return May be null. */\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\n    {\n        if (this.skin)\n        {\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    },\n    /** @param attachmentName May be null. */\n    setAttachment: function (slotName, attachmentName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slot = slots[i];\n            if (slot.data.name == slotName)\n            {\n                var attachment = null;\n                if (attachmentName)\n                {\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw \"Slot not found: \" + slotName;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\n        return null;\n    },\n    update: function (delta)\n    {\n        this.time += delta;\n    },\n    resetDrawOrder: function () {\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\n        {\n            this.drawOrder[i] = i;\n        }\n    }\n};\nmodule.exports = spine.Skeleton;\n\n\n},{\"../SpineUtil\":40,\"./Bone\":12,\"./IkConstraint\":22,\"./Slot\":34}],30:[function(require,module,exports){\nvar spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n\n},{\"../SpineRuntime\":39,\"./AttachmentType\":11}],31:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n\n},{\"../SpineUtil\":40}],32:[function(require,module,exports){\nvar spine = require('../SpineUtil');\nspine.SkeletonData = require('./SkeletonData');\nspine.BoneData = require('./BoneData');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.SlotData = require('./SlotData');\nspine.Skin = require('./Skin');\nspine.EventData = require('./EventData');\nspine.AttachmentType = require('./AttachmentType');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.TranslateTimeline = require('./TranslateTimeline');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventTimeline = require('./EventTimeline');\nspine.Event = require('./Event');\nspine.Animation = require('./Animation');\n\nfunction LinkedMesh(mesh, skin, slotIndex, parent) {\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n}\n\nspine.SkeletonJsonParser = function (attachmentLoader)\n{\n    this.attachmentLoader = attachmentLoader;\n    this.linkedMeshes = [];\n};\nspine.SkeletonJsonParser.prototype = {\n    scale: 1,\n    readSkeletonData: function (root, name)\n    {\n        var skeletonData = new spine.SkeletonData();\n        skeletonData.name = name;\n\n        // Skeleton.\n        var skeletonMap = root[\"skeleton\"];\n        if (skeletonMap)\n        {\n            skeletonData.hash = skeletonMap[\"hash\"];\n            skeletonData.version = skeletonMap[\"spine\"];\n            skeletonData.width = skeletonMap[\"width\"] || 0;\n            skeletonData.height = skeletonMap[\"height\"] || 0;\n        }\n\n        // Bones.\n        var bones = root[\"bones\"];\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var boneMap = bones[i];\n            var parent = null;\n            if (boneMap[\"parent\"])\n            {\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\n            }\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\n            skeletonData.bones.push(boneData);\n        }\n\n        // IK constraints.\n        var ik = root[\"ik\"];\n        if (ik)\n        {\n            for (var i = 0, n = ik.length; i < n; i++)\n            {\n                var ikMap = ik[i];\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\n\n                var bones = ikMap[\"bones\"];\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\n                {\n                    var bone = skeletonData.findBone(bones[ii]);\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\n                    ikConstraintData.bones.push(bone);\n                }\n\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\n\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\n\n                skeletonData.ikConstraints.push(ikConstraintData);\n            }\n        }\n\n        // Slots.\n        var slots = root[\"slots\"];\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slotMap = slots[i];\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\n\n            var color = slotMap[\"color\"];\n            if (color)\n            {\n                slotData.r = this.toColor(color, 0);\n                slotData.g = this.toColor(color, 1);\n                slotData.b = this.toColor(color, 2);\n                slotData.a = this.toColor(color, 3);\n            }\n\n            slotData.attachmentName = slotMap[\"attachment\"];\n\n\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\n\n            skeletonData.slots.push(slotData);\n        }\n\n        // Skins.\n        var skins = root[\"skins\"];\n        for (var skinName in skins)\n        {\n            if (!skins.hasOwnProperty(skinName)) continue;\n            var skinMap = skins[skinName];\n            var skin = new spine.Skin(skinName);\n            for (var slotName in skinMap)\n            {\n                if (!skinMap.hasOwnProperty(slotName)) continue;\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var slotEntry = skinMap[slotName];\n                for (var attachmentName in slotEntry)\n                {\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\n                    var attachment = this.readAttachment(skin, slotIndex, attachmentName, slotEntry[attachmentName]);\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\n                }\n            }\n            skeletonData.skins.push(skin);\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n        }\n\n        var linkedMeshes = this.linkedMeshes;\n        // Linked meshes.\n        for (var i = 0, n = linkedMeshes.size; i < n; i++) {\n            var linkedMesh = linkedMeshes[i];\n            var skin = linkedMesh.skin ? skeletonData.findSkin(linkedMesh.skin): skeletonData.defaultSkin;\n            var parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            linkedMesh.mesh.setParentMesh(parent);\n            linkedMesh.mesh.updateUVs();\n        }\n        linkedMeshes.length = 0;\n\n        // Events.\n        var events = root[\"events\"];\n        for (var eventName in events)\n        {\n            if (!events.hasOwnProperty(eventName)) continue;\n            var eventMap = events[eventName];\n            var eventData = new spine.EventData(eventName);\n            eventData.intValue = eventMap[\"int\"] || 0;\n            eventData.floatValue = eventMap[\"float\"] || 0;\n            eventData.stringValue = eventMap[\"string\"] || null;\n            skeletonData.events.push(eventData);\n        }\n\n        // Animations.\n        var animations = root[\"animations\"];\n        for (var animationName in animations)\n        {\n            if (!animations.hasOwnProperty(animationName)) continue;\n            this.readAnimation(animationName, animations[animationName], skeletonData);\n        }\n\n        return skeletonData;\n    },\n    readAttachment: function (skin, slotIndex, name, map)\n    {\n        name = map[\"name\"] || name;\n\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\n        var path = map[\"path\"] || name;\n\n        var scale = this.scale;\n        if (type == spine.AttachmentType.region)\n        {\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n            if (!region) return null;\n            region.path = path;\n            region.x = (map[\"x\"] || 0) * scale;\n            region.y = (map[\"y\"] || 0) * scale;\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\n            region.rotation = map[\"rotation\"] || 0;\n            region.width = (map[\"width\"] || 0) * scale;\n            region.height = (map[\"height\"] || 0) * scale;\n\n            var color = map[\"color\"];\n            if (color)\n            {\n                region.r = this.toColor(color, 0);\n                region.g = this.toColor(color, 1);\n                region.b = this.toColor(color, 2);\n                region.a = this.toColor(color, 3);\n            }\n\n            region.updateOffset();\n            return region;\n        } else if (type == spine.AttachmentType.boundingbox)\n        {\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n            var vertices = map[\"vertices\"];\n            for (var i = 0, n = vertices.length; i < n; i++)\n                attachment.vertices.push(vertices[i] * scale);\n            return attachment;\n        } else if (type == spine.AttachmentType.mesh || type == spine.AttachmentType.linkedmesh)\n        {\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\n                mesh.updateUVs();\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        } else if (type == spine.AttachmentType.weightedmesh || type == spine.AttachmentType.weightedlinkedmesh)\n        {\n            var mesh = this.attachmentLoader.newWeightedMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                var uvs = this.getFloatArray(map, \"uvs\", 1);\n                var vertices = this.getFloatArray(map, \"vertices\", 1);\n                var weights = [];\n                var bones = [];\n                for (var i = 0, n = vertices.length; i < n; )\n                {\n                    var boneCount = vertices[i++] | 0;\n                    bones[bones.length] = boneCount;\n                    for (var nn = i + boneCount * 4; i < nn; )\n                    {\n                        bones[bones.length] = vertices[i];\n                        weights[weights.length] = vertices[i + 1] * scale;\n                        weights[weights.length] = vertices[i + 2] * scale;\n                        weights[weights.length] = vertices[i + 3];\n                        i += 4;\n                    }\n                }\n                mesh.bones = bones;\n                mesh.weights = weights;\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = uvs;\n                mesh.updateUVs();\n\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        }\n        throw \"Unknown attachment type: \" + type;\n    },\n    readAnimation: function (name, map, skeletonData)\n    {\n        var timelines = [];\n        var duration = 0;\n\n        var slots = map[\"slots\"];\n        for (var slotName in slots)\n        {\n            if (!slots.hasOwnProperty(slotName)) continue;\n            var slotMap = slots[slotName];\n            var slotIndex = skeletonData.findSlotIndex(slotName);\n\n            for (var timelineName in slotMap)\n            {\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\n                var values = slotMap[timelineName];\n                if (timelineName == \"color\")\n                {\n                    var timeline = new spine.ColorTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var color = valueMap[\"color\"];\n                        var r = this.toColor(color, 0);\n                        var g = this.toColor(color, 1);\n                        var b = this.toColor(color, 2);\n                        var a = this.toColor(color, 3);\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\n\n                } else if (timelineName == \"attachment\")\n                {\n                    var timeline = new spine.AttachmentTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n\n                } else\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\n            }\n        }\n\n        var bones = map[\"bones\"];\n        for (var boneName in bones)\n        {\n            if (!bones.hasOwnProperty(boneName)) continue;\n            var boneIndex = skeletonData.findBoneIndex(boneName);\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\n            var boneMap = bones[boneName];\n\n            for (var timelineName in boneMap)\n            {\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\n                var values = boneMap[timelineName];\n                if (timelineName == \"rotate\")\n                {\n                    var timeline = new spine.RotateTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\n                {\n                    var timeline;\n                    var timelineScale = 1;\n                    if (timelineName == \"scale\")\n                        timeline = new spine.ScaleTimeline(values.length);\n                    else\n                    {\n                        timeline = new spine.TranslateTimeline(values.length);\n                        timelineScale = this.scale;\n                    }\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\n                {\n                    throw \"flipX and flipY are not supported in spine v3: (\" + boneName + \")\";\n                } else\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\n            }\n        }\n\n        var ikMap = map[\"ik\"];\n        for (var ikConstraintName in ikMap)\n        {\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\n            var values = ikMap[ikConstraintName];\n            var timeline = new spine.IkConstraintTimeline(values.length);\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\n            var frameIndex = 0;\n            for (var i = 0, n = values.length; i < n; i++)\n            {\n                var valueMap = values[i];\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\n                this.readCurve(timeline, frameIndex, valueMap);\n                frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n        }\n\n        var ffd = map[\"ffd\"];\n        for (var skinName in ffd)\n        {\n            var skin = skeletonData.findSkin(skinName);\n            var slotMap = ffd[skinName];\n            for (slotName in slotMap)\n            {\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var meshMap = slotMap[slotName];\n                for (var meshName in meshMap)\n                {\n                    var values = meshMap[meshName];\n                    var timeline = new spine.FfdTimeline(values.length);\n                    var attachment = skin.getAttachment(slotIndex, meshName);\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\n                    timeline.slotIndex = slotIndex;\n                    timeline.attachment = attachment;\n\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\n                    var vertexCount;\n                    if (isMesh)\n                        vertexCount = attachment.vertices.length;\n                    else\n                        vertexCount = attachment.weights.length / 3 * 2;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var vertices;\n                        if (!valueMap[\"vertices\"])\n                        {\n                            if (isMesh)\n                                vertices = attachment.vertices;\n                            else\n                            {\n                                vertices = [];\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            }\n                        } else {\n                            var verticesValue = valueMap[\"vertices\"];\n                            vertices = [];\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            var start = valueMap[\"offset\"] || 0;\n                            var nn = verticesValue.length;\n                            if (this.scale == 1)\n                            {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii];\n                            } else {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\n                            }\n                            if (isMesh)\n                            {\n                                var meshVertices = attachment.vertices;\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\n                                    vertices[ii] += meshVertices[ii];\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines[timelines.length] = timeline;\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                }\n            }\n        }\n\n        var drawOrderValues = map[\"drawOrder\"];\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\n        if (drawOrderValues)\n        {\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\n            var slotCount = skeletonData.slots.length;\n            var frameIndex = 0;\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\n            {\n                var drawOrderMap = drawOrderValues[i];\n                var drawOrder = null;\n                if (drawOrderMap[\"offsets\"])\n                {\n                    drawOrder = [];\n                    drawOrder.length = slotCount;\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        drawOrder[ii] = -1;\n                    var offsets = drawOrderMap[\"offsets\"];\n                    var unchanged = [];\n                    unchanged.length = slotCount - offsets.length;\n                    var originalIndex = 0, unchangedIndex = 0;\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\n                    {\n                        var offsetMap = offsets[ii];\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        var events = map[\"events\"];\n        if (events)\n        {\n            var timeline = new spine.EventTimeline(events.length);\n            var frameIndex = 0;\n            for (var i = 0, n = events.length; i < n; i++)\n            {\n                var eventMap = events[i];\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\n                var event = new spine.Event(eventData);\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\n    },\n    readCurve: function (timeline, frameIndex, valueMap)\n    {\n        var curve = valueMap[\"curve\"];\n        if (!curve)\n            timeline.curves.setLinear(frameIndex);\n        else if (curve == \"stepped\")\n            timeline.curves.setStepped(frameIndex);\n        else if (curve instanceof Array)\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n    },\n    toColor: function (hexString, colorIndex)\n    {\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\n    },\n    getFloatArray: function (map, name, scale)\n    {\n        var list = map[name];\n        var values = new spine.Float32Array(list.length);\n        var i = 0, n = list.length;\n        if (scale == 1)\n        {\n            for (; i < n; i++)\n                values[i] = list[i];\n        } else {\n            for (; i < n; i++)\n                values[i] = list[i] * scale;\n        }\n        return values;\n    },\n    getIntArray: function (map, name)\n    {\n        var list = map[name];\n        var values = new spine.Uint16Array(list.length);\n        for (var i = 0, n = list.length; i < n; i++)\n            values[i] = list[i] | 0;\n        return values;\n    }\n};\nmodule.exports = spine.SkeletonJsonParser;\n\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./AttachmentTimeline\":10,\"./AttachmentType\":11,\"./BoneData\":13,\"./ColorTimeline\":15,\"./DrawOrderTimeline\":17,\"./Event\":18,\"./EventData\":19,\"./EventTimeline\":20,\"./FfdTimeline\":21,\"./IkConstraintData\":23,\"./IkConstraintTimeline\":24,\"./RotateTimeline\":27,\"./ScaleTimeline\":28,\"./SkeletonData\":31,\"./Skin\":33,\"./SlotData\":35,\"./TranslateTimeline\":37}],33:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n\n},{\"../SpineUtil\":40}],34:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n\n},{\"../SpineUtil\":40}],35:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n\n},{\"../SpineUtil\":40}],36:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n\n},{\"../SpineUtil\":40}],37:[function(require,module,exports){\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./Curves\":16}],38:[function(require,module,exports){\nvar spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.WeightedMeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.WeightedMeshAttachment.prototype = {\n    type: spine.AttachmentType.weightedmesh,\n    parentMesh: null,\n    inheritFFD: false,\n    bones: null,\n    weights: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function (u, v, u2, v2, rotate)\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        var region = this.rendererObject;\n        if (!region) return;\n        var texture = region.texture;\n        var r = texture._uvs;\n        var w1 = region.width, h1 = region.height, w2 = region.originalWidth, h2 = region.originalHeight;\n        var x = region.offsetX, y = region.pixiOffsetY;\n        for (var i = 0; i < n; i += 2)\n        {\n            var u = this.regionUVs[i], v = this.regionUVs[i+1];\n            u = (u * w2 - x) / w1;\n            v = (v * h2 - y) / h1;\n            this.uvs[i] = (r.x0 * (1 - u) + r.x1 * u) * (1-v) + (r.x3 * (1 - u) + r.x2 * u) * v;\n            this.uvs[i+1] = (r.y0 * (1 - u) + r.y1 * u) * (1-v) + (r.y3 * (1 - u) + r.y2 * u) * v;\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var skeletonBones = slot.bone.skeleton.bones;\n        var weights = this.weights;\n        var bones = this.bones;\n\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\n        var wx, wy, vx, vy, weight;\n        var m;\n        if (!slot.attachmentVertices.length)\n        {\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b];\n                    vy = weights[b + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        } else {\n            var ffd = slot.attachmentVertices;\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3, f += 2)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b] + ffd[f];\n                    vy = weights[b + 1] + ffd[f + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.bones = parentMesh.bones;\n            this.weights = parentMesh.weights;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.WeightedMeshAttachment;\n\n\n},{\"../SpineUtil\":40,\"./AttachmentType\":11}],39:[function(require,module,exports){\n/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n\n},{\"../SpineUtil\":40,\"./Animation\":2,\"./AnimationState\":3,\"./AnimationStateData\":4,\"./Atlas\":5,\"./AtlasAttachmentParser\":6,\"./AtlasPage\":7,\"./AtlasReader\":8,\"./AtlasRegion\":9,\"./AttachmentTimeline\":10,\"./AttachmentType\":11,\"./Bone\":12,\"./BoneData\":13,\"./BoundingBoxAttachment\":14,\"./ColorTimeline\":15,\"./Curves\":16,\"./DrawOrderTimeline\":17,\"./Event\":18,\"./EventData\":19,\"./EventTimeline\":20,\"./FfdTimeline\":21,\"./IkConstraint\":22,\"./IkConstraintData\":23,\"./IkConstraintTimeline\":24,\"./MeshAttachment\":25,\"./RegionAttachment\":26,\"./RotateTimeline\":27,\"./ScaleTimeline\":28,\"./Skeleton\":29,\"./SkeletonBounds\":30,\"./SkeletonData\":31,\"./SkeletonJsonParser\":32,\"./Skin.js\":33,\"./Slot\":34,\"./SlotData\":35,\"./TrackEntry\":36,\"./TranslateTimeline\":37,\"./WeightedMeshAttachment\":38}],40:[function(require,module,exports){\nmodule.exports = {\n    radDeg: 180 / Math.PI,\n    degRad: Math.PI / 180,\n    temp: [],\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array,\n    signum: function(x) {\n        if (x>0) return 1;\n        if (x<0) return -1;\n        return 0;\n    }\n};\n\n\n},{}],41:[function(require,module,exports){\nvar spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nSpine.globalAutoUpdate = true;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            if (slotContainer.transform ) {\n                //PIXI v4.0\n                if (!slotContainer.transform._dirtyLocal) {\n                    slotContainer.transform = new PIXI.TransformStatic();\n                }\n                var transform = slotContainer.transform;\n                var lt = transform.localTransform;\n                transform._dirtyParentVersion = -1;\n                transform._dirtyLocal = 1;\n                transform._versionLocal = 1;\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n            } else {\n                //PIXI v3\n                var lt = slotContainer.localTransform || new PIXI.Matrix();\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n                slotContainer.localTransform = lt;\n                slotContainer.displayObjectUpdateTransform = SlotContainerUpdateTransformV3;\n            }\n\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    if (Spine.globalAutoUpdate) {\n        this.lastTime = this.lastTime || Date.now();\n        var timeDelta = (Date.now() - this.lastTime) * 0.001;\n        this.lastTime = Date.now();\n        this.update(timeDelta);\n    } else {\n        this.lastTime = 0;\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var texture = descriptor.texture;\n    var sprite = new PIXI.Sprite(texture);\n    sprite.scale.x = attachment.scaleX * attachment.width / descriptor.originalWidth;\n    sprite.scale.y = - attachment.scaleY * attachment.height / descriptor.originalHeight;\n    sprite.rotation = attachment.rotation * spine.degRad;\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n    sprite.position.x = attachment.x;\n    sprite.position.y = attachment.y;\n    sprite.alpha = attachment.a;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n\nfunction SlotContainerUpdateTransformV3()\n{\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n    var lt = this.localTransform;\n    wt.a  = lt.a  * pt.a + lt.b  * pt.c;\n    wt.b  = lt.a  * pt.b + lt.b  * pt.d;\n    wt.c  = lt.c  * pt.a + lt.d  * pt.c;\n    wt.d  = lt.c  * pt.b + lt.d  * pt.d;\n    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    this._currentBounds = null;\n};\n\n},{\"../SpineRuntime\":39,\"../loaders/atlasParser\":43}],42:[function(require,module,exports){\n/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n\n},{\"./atlasParser\":43}],43:[function(require,module,exports){\nvar Resource = PIXI.loaders.Resource,\n    spine = require('../SpineRuntime'),\n    imageLoaderAdapter = require('./imageLoaderAdapter');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT,\n            metadata: resource.metadata ? resource.metadata.spineMetadata : null\n        };\n        var imageOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata ? resource.metadata.imageMetadata: null\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n        var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            new spine.Atlas(this.xhr.responseText, adapter, function(spineAtlas) {\n                var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n                resource.spineData = skeletonData;\n                resource.spineAtlas = spineAtlas;\n                if (atlasParser.enableCaching)\n                    atlasParser.AnimCache[resource.name] = resource.spineData;\n\n                next();\n            });\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n\n},{\"../SpineRuntime\":39,\"./imageLoaderAdapter\":44}],44:[function(require,module,exports){\nvar spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (loader, namePrefix, baseUrl, imageOptions) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        var name = namePrefix + line;\r\n        var url = baseUrl + line;\r\n        loader.add(name, url, imageOptions, function(resource) {\r\n            callback(resource.texture.baseTexture);\r\n        });\r\n    }\r\n};\r\n\n},{\"../SpineRuntime\":39}],45:[function(require,module,exports){\nmodule.exports = {\r\n    atlasParser: require('./atlasParser'),\r\n    Loader: require('./Loader'),\r\n    syncImageLoaderAdapter: require('./syncImageLoaderAdapter'),\r\n    imageLoaderAdapter: require('./imageLoaderAdapter')\r\n};\r\n\n},{\"./Loader\":42,\"./atlasParser\":43,\"./imageLoaderAdapter\":44,\"./syncImageLoaderAdapter\":46}],46:[function(require,module,exports){\nvar spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (baseUrl, crossOrigin) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\r\n    }\r\n};\r\n\n},{\"../SpineRuntime\":39}]},{},[1])\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasRegion = require('./AtlasRegion');\nvar syncImageLoaderAdapter = require('../loaders/syncImageLoaderAdapter.js')\n\nspine.Atlas = function(atlasText, loaderFunction, callback) {\n    this.pages = [];\n    this.regions = [];\n    if (typeof atlasText === \"string\") {\n        this.addSpineAtlas.call(this, atlasText, loaderFunction, callback);\n    }\n};\n\nspine.Atlas.prototype = {\n    addTexture: function(name, texture) {\n        var pages = this.pages;\n        var page = null;\n        for (var i=0;i<pages.length;i++) {\n            if (pages[i].rendererObject === texture.baseTexture) {\n                page = pages[i];\n                break;\n            }\n        }\n        if (page === null) {\n            page = new AtlasPage();\n            page.name = 'texturePage';\n            var baseTexture = texture.baseTexture;\n            page.width = baseTexture.realWidth;\n            page.height = baseTexture.realHeight;\n            page.rendererObject = baseTexture;\n            //those fields are not relevant in Pixi\n            page.format = 'RGBA8888';\n            page.minFilter = page.magFilter = \"Nearest\";\n            page.uWrap = Atlas.TextureWrap.clampToEdge;\n            page.vWrap = Atlas.TextureWrap.clampToEdge;\n            pages.push(page);\n        }\n        var region = new AtlasRegion();\n        region.name = name;\n        region.page = page;\n        region.rendererObject = texture;\n        region.index = -1;\n        this.regions.push(region);\n        return region;\n    },\n    addTextureHash: function(textures) {\n        for (var key in textures) {\n            if (textures.hasOwnProperty(key)) {\n                this.addTexture(key, textures[key]);\n            }\n        }\n    },\n    addSpineAtlas: function (atlasText, loaderFunction, callback)\n    {\n        //TODO: remove this legacy later\n        if (typeof loaderFunction !== \"function\") {\n            //old syntax\n            var baseUrl = loaderFunction;\n            var crossOrigin = callback;\n            loaderFunction = syncImageLoaderAdapter(baseUrl, crossOrigin);\n            callback = null;\n        }\n\n        this.texturesLoading = 0;\n\n        var self = this;\n\n        var reader = new spine.AtlasReader(atlasText);\n        var tuple = [];\n        tuple.length = 4;\n        var page = null;\n\n        iterateParser();\n\n        function iterateParser() {\n            while (true) {\n                var line = reader.readLine();\n                if (line === null) {\n                    return callback && callback(self);\n                }\n                line = reader.trim(line);\n                if (!line.length)\n                    page = null;\n                else if (!page) {\n                    page = new spine.AtlasPage();\n                    page.name = line;\n\n                    if (reader.readTuple(tuple) == 2) { // size is only optional for an atlas packed with an old TexturePacker.\n                        page.width = parseInt(tuple[0]);\n                        page.height = parseInt(tuple[1]);\n                        reader.readTuple(tuple);\n                    } else {\n                        //old format, detect width and height by texture\n                    }\n                    page.format = spine.Atlas.Format[tuple[0]];\n\n                    reader.readTuple(tuple);\n                    page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\n                    page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\n\n                    var direction = reader.readValue();\n                    page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\n                    page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\n                    if (direction == \"x\")\n                        page.uWrap = spine.Atlas.TextureWrap.repeat;\n                    else if (direction == \"y\")\n                        page.vWrap = spine.Atlas.TextureWrap.repeat;\n                    else if (direction == \"xy\")\n                        page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\n\n                    // @ivanpopelyshev: I so want to use generators and \"yield()\" here, or at least promises\n                    loaderFunction(line, function (texture) {\n                        page.rendererObject = texture;\n                        self.pages.push(page);\n                        if (!page.width || !page.height) {\n                            page.width = texture.realWidth;\n                            page.height = texture.realHeight;\n                            if (!page.width || !page.height) {\n                                console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\n                            }\n                        }\n                        iterateParser();\n                    });\n                    break;\n                } else {\n                    var region = new spine.AtlasRegion();\n                    region.name = line;\n                    region.page = page;\n\n                    var rotate = reader.readValue() === \"true\" ? 6 : 0;\n\n                    reader.readTuple(tuple);\n                    var x = parseInt(tuple[0]);\n                    var y = parseInt(tuple[1]);\n\n                    reader.readTuple(tuple);\n                    var width = parseInt(tuple[0]);\n                    var height = parseInt(tuple[1]);\n\n                    var resolution = page.rendererObject.resolution;\n                    x /= resolution;\n                    y /= resolution;\n                    width /= resolution;\n                    height /= resolution;\n\n                    var frame = new PIXI.Rectangle(x, y, rotate ? height : width, rotate ? width : height);\n\n                    if (reader.readTuple(tuple) == 4) { // split is optional\n                        region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                        if (reader.readTuple(tuple) == 4) { // pad is optional, but only present with splits\n                            region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                            reader.readTuple(tuple);\n                        }\n                    }\n\n                    var originalWidth = parseInt(tuple[0]) / resolution;\n                    var originalHeight = parseInt(tuple[1]) / resolution;\n                    reader.readTuple(tuple);\n                    var offsetX = parseInt(tuple[0]) / resolution;\n                    var offsetY = parseInt(tuple[1]) / resolution;\n\n                    var orig = new PIXI.Rectangle(0, 0, originalWidth, originalHeight);\n                    var trim = new PIXI.Rectangle(offsetX, originalHeight - height - offsetY, width, height);\n\n                    //TODO: pixiv3 uses different frame/crop/trim\n\n                    if (PIXI.VERSION[0] == '4') {\n                        // pixi v4.0.0\n                        region.texture = new PIXI.Texture(region.page.rendererObject, frame, orig, trim, rotate);\n                    } else {\n                        // pixi v3.0.11\n                        var frame2 = new PIXI.Rectangle(x, y, width, height);\n                        var crop = frame2.clone();\n                        trim.width = originalWidth;\n                        trim.height = originalHeight;\n                        region.texture = new PIXI.Texture(region.page.rendererObject, frame2, crop, trim, rotate);\n                    }\n\n                    region.index = parseInt(reader.readValue());\n\n                    self.regions.push(region);\n                }\n            }\n        }\n    },\n    findRegion: function (name)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n            if (regions[i].name == name) return regions[i];\n        return null;\n    },\n    dispose: function ()\n    {\n        var pages = this.pages;\n        for (var i = 0, n = pages.length; i < n; i++)\n            pages[i].rendererObject.destroy(true);\n    },\n    updateUVs: function (page)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n        {\n            var region = regions[i];\n            if (region.page != page) continue;\n            region.texture._updateUvs();\n        }\n    }\n};\n\nspine.Atlas.Format = {\n    alpha: 0,\n    intensity: 1,\n    luminanceAlpha: 2,\n    rgb565: 3,\n    rgba4444: 4,\n    rgb888: 5,\n    rgba8888: 6\n};\n\nspine.Atlas.TextureFilter = {\n    nearest: 0,\n    linear: 1,\n    mipMap: 2,\n    mipMapNearestNearest: 3,\n    mipMapLinearNearest: 4,\n    mipMapNearestLinear: 5,\n    mipMapLinearLinear: 6\n};\n\nspine.Atlas.TextureWrap = {\n    mirroredRepeat: 0,\n    clampToEdge: 1,\n    repeat: 2\n};\nmodule.exports = spine.Atlas;\n","var spine = require('../SpineUtil');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.AtlasAttachmentParser = function (atlas)\n{\n    this.atlas = atlas;\n};\nspine.AtlasAttachmentParser.prototype = {\n    newRegionAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\n        var attachment = new spine.RegionAttachment(name);\n        attachment.rendererObject = region;\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\n        var attachment = new spine.MeshAttachment(name);\n        attachment.rendererObject = region;\n        return attachment;\n    },\n    newWeightedMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\n        var attachment = new spine.WeightedMeshAttachment(name);\n        attachment.rendererObject = region;\n        return attachment;\n    },\n    newBoundingBoxAttachment: function (skin, name)\n    {\n        return new spine.BoundingBoxAttachment(name);\n    }\n};\nmodule.exports = spine.AtlasAttachmentParser;\n\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AtlasRegion = function ()\n{};\nspine.AtlasRegion.prototype = {\n    name: null,\n    /**\n     * @member {PIXI.Texture}\n     */\n    texture: null,\n\n    /**\n     * @member {PIXI.spine.Spine.AtlasPage}\n     */\n    page: null,\n    index: 0,\n    splits: null,\n    pads: null\n};\n\nObject.defineProperties(spine.AtlasRegion.prototype, {\n    x: {\n        get: function() {\n            return this.texture.frame.x;\n        }\n    },\n    y: {\n        get: function() {\n            return this.texture.frame.y;\n        }\n    },\n    width: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return tex.crop.width;\n            }\n            if (tex.trim) {\n                return tex.trim.width;\n            }\n            return tex.orig.width;\n        }\n    },\n    height: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                return tex.crop.height;\n            }\n            if (tex.trim) {\n                return tex.trim.height;\n            }\n            return tex.orig.height;\n        }\n    },\n    u: {\n        get: function() {\n            return this.texture._uvs.x0;\n        }\n    },\n    v: {\n        get: function() {\n            return this.texture._uvs.y0;\n        }\n    },\n    u2: {\n        get: function() {\n            return this.texture._uvs.x2;\n        }\n    },\n    v2: {\n        get: function() {\n            return this.texture._uvs.y2;\n        }\n    },\n    rotate: {\n        get: function() {\n            return !!this.texture.rotate;\n        }\n    },\n    offsetX: {\n        get: function() {\n            var tex = this.texture;\n            return tex.trim ? tex.trim.x : 0;\n        }\n    },\n    offsetY: {\n        get: function() {\n            console.warn(\"Deprecation Warning: @Hackerham: I guess, if you are using PIXI-SPINE ATLAS region.offsetY, you want a texture, right? Use region.texture from now on.\");\n            var tex = this.texture;\n            return this.originalHeight - this.height - (tex.trim ? tex.trim.y : 0);\n        }\n    },\n    pixiOffsetY: {\n        get: function() {\n            var tex = this.texture;\n            return tex.trim ? tex.trim.y : 0;\n        }\n    },\n    originalWidth: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.width;\n                }\n                return tex.crop.width;\n            }\n            return tex.orig.width;\n        }\n    },\n    originalHeight: {\n        get: function() {\n            var tex = this.texture;\n            if (PIXI.VERSION[0] == '3') {\n                if (tex.trim) {\n                    return tex.trim.height;\n                }\n                return tex.crop.height;\n            }\n            return tex.orig.height;\n        }\n    }\n});\n\nmodule.exports = spine.AtlasRegion;\n\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AttachmentType = {\n    region: 0,\n    boundingbox: 1,\n    mesh: 2,\n    weightedmesh : 3,\n    skinnedmesh: 3,\n    linkedmesh: 4,\n    weightedlinkedmesh: 5\n};\nmodule.exports = spine.AttachmentType;\n\n","var spine = require('../SpineUtil');\nspine.Bone = function (boneData, skeleton, parent)\n{\n    this.data = boneData;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.matrix = new PIXI.Matrix();\n    this.setToSetupPose();\n};\nspine.Bone.yDown = false;\nspine.Bone.prototype = {\n    x: 0, y: 0,\n    rotation: 0, rotationIK: 0,\n    scaleX: 1, scaleY: 1,\n    flipX: false, flipY: false,\n\n    worldSignX: 1, worldSignY: 1,\n    updateWorldTransform: function() {\n        var rotation = this.rotationIK;\n        var scaleX = this.scaleX;\n        var scaleY = this.scaleY;\n        var x = this.x;\n        var y = this.y;\n\n        var cos = Math.cos(rotation * spine.degRad), sin = Math.sin(rotation * spine.degRad);\n        var la = cos * scaleX, lb = -sin * scaleY, lc = sin * scaleX, ld = cos * scaleY;\n        var parent = this.parent;\n        var m = this.matrix;\n        var skeleton = this.skeleton;\n        if (!parent) { // Root bone.\n            if (skeleton.flipX) {\n                x = -x;\n                la = -la;\n                lb = -lb;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                y = -y;\n                lc = -lc;\n                ld = -ld;\n            }\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n            m.tx = x;\n            m.ty = y;\n            this.worldSignX = spine.signum(scaleX);\n            this.worldSignY = spine.signum(scaleY);\n            return;\n        }\n\n\n        var pa = parent.matrix.a, pb = parent.matrix.c, pc = parent.matrix.b, pd = parent.matrix.d;\n        m.tx = pa * x + pb * y + parent.matrix.tx;\n        m.ty = pc * x + pd * y + parent.matrix.ty;\n        this.worldSignX = parent.worldSignX * spine.signum(scaleX);\n        this.worldSignY = parent.worldSignY * spine.signum(scaleY);\n        var data = this.data;\n\n        if (data.inheritRotation && data.inheritScale) {\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n        } else if (data.inheritRotation) { // No scale inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                cos = Math.cos(parent.rotationIK * spine.degRad);\n                sin = Math.sin(parent.rotationIK * spine.degRad);\n                var temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritRotation) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else if (data.inheritScale) { // No rotation inheritance.\n            pa = 1;\n            pb = 0;\n            pc = 0;\n            pd = 1;\n            do {\n                var r = parent.rotation;\n                cos = Math.cos(r * spine.degRad);\n                sin = Math.sin(r * spine.degRad);\n                var psx = parent.scaleX, psy = parent.scaleY;\n                var za = cos * psx, zb = -sin * psy, zc = sin * psx, zd = cos * psy;\n                temp = pa * za + pb * zc;\n                pb = pa * zb + pb * zd;\n                pa = temp;\n                temp = pc * za + pd * zc;\n                pd = pc * zb + pd * zd;\n                pc = temp;\n\n                if (psx < 0) {\n                    r = -r;\n                } else {\n                    sin = -sin;\n                }\n                temp = pa * cos + pb * sin;\n                pb = pa * -sin + pb * cos;\n                pa = temp;\n                temp = pc * cos + pd * sin;\n                pd = pc * -sin + pd * cos;\n                pc = temp;\n\n                if (!parent.data.inheritScale) break;\n                parent = parent.parent;\n            } while (parent != null);\n            m.a = pa * la + pb * lc;\n            m.c = pa * lb + pb * ld;\n            m.b = pc * la + pd * lc;\n            m.d = pc * lb + pd * ld;\n            if (skeleton.flipX) {\n                m.a = -m.a;\n                m.c = -m.c;\n            }\n            if (skeleton.flipY !== spine.Bone.yDown) {\n                m.b = -m.b;\n                m.d = -m.d;\n            }\n        } else {\n            m.a = la;\n            m.c = lb;\n            m.b = lc;\n            m.d = ld;\n        }\n    },\n\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.rotationIK = this.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n    },\n    worldToLocal: function (world)\n    {\n        var m = this.matrix;\n        var dx = world[0] - m.tx, dy = m.ty;\n        var invDet = 1 / (m.a * m.d - m.b * m.c);\n        //Yep, its a bug in original spine. I hope they'll fix it: https://github.com/EsotericSoftware/spine-runtimes/issues/544\n        world[0] = dx * m.a * invDet - dy * m.c * invDet;\n        world[1] = dy * m.d * invDet - dx * m.b * invDet;\n    },\n    localToWorld: function (local)\n    {\n        var localX = local[0], localY = local[1];\n        var m = this.matrix;\n        local[0] = localX * m.a + localY * m.c + m.tx;\n        local[1] = localX * m.b + localY * m.d + m.ty;\n    },\n    getWorldRotationX: function() {\n        return Math.atan2(this.matrix.b, this.matrix.a) * spine.radDeg;\n\n    },\n    getWorldRotationY: function() {\n        return Math.atan2(this.matrix.d, this.matrix.c) * spine.radDeg;\n    },\n    getWorldScaleX: function() {\n        var a = this.matrix.a;\n        var b = this.matrix.b;\n        return Math.sqrt(a*a+b*b);\n    },\n    getWorldScaleY: function() {\n        var c = this.matrix.c;\n        var d = this.matrix.d;\n        return Math.sqrt(c * c + d * d);\n    }\n};\n\nObject.defineProperties(spine.Bone.prototype, {\n    worldX: {\n        get: function() {\n            return this.matrix.tx;\n        }\n    },\n    worldY:  {\n        get: function() {\n            return this.matrix.ty;\n        }\n    }\n});\n\nmodule.exports = spine.Bone;\n","var spine = require('../SpineUtil');\nspine.BoneData = function (name, parent)\n{\n    this.name = name;\n    this.parent = parent;\n};\nspine.BoneData.prototype = {\n    length: 0,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    inheritScale: true,\n    inheritRotation: true\n};\nmodule.exports = spine.BoneData;\n\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoundingBoxAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.vertices = [];\r\n};\r\nspine.BoundingBoxAttachment.prototype = {\r\n    type: spine.AttachmentType.boundingbox,\r\n    computeWorldVertices: function (x, y, bone, worldVertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.a, m01 = bone.c, m10 = bone.b, m11 = bone.d;\r\n        var vertices = this.vertices;\r\n        for (var i = 0, n = vertices.length; i < n; i += 2)\r\n        {\r\n            var px = vertices[i];\r\n            var py = vertices[i + 1];\r\n            worldVertices[i] = px * m00 + py * m01 + x;\r\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.BoundingBoxAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        var slotAttachment = slot.attachment;\n        if (!slotAttachment.applyFFD || !slotAttachment.applyFFD(this.attachment)) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = bone.parent ? bone.parent.getWorldRotationX(): 0;\n    var rotation = bone.rotation;\n    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;\n    if ((bone.worldSignX != bone.worldSignY) != (bone.skeleton.flipX != (bone.skeleton.flipY != spine.Bone.yDown))) rotationIK = 360 - rotationIK;\n    if (rotationIK > 180)\n        rotationIK -= 360;\n    else if (rotationIK < -180) rotationIK += 360;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDir, alpha)\n{\n    if (alpha == 0) return;\n    var px = parent.x, py = parent.y, psx = parent.scaleX, psy = parent.scaleY, csx = child.scaleX, cy = child.y;\n    var offset1, offset2, sign2;\n    if (psx < 0) {\n        psx = -psx;\n        offset1 = 180;\n        sign2 = -1;\n    } else {\n        offset1 = 0;\n        sign2 = 1;\n    }\n    if (psy < 0) {\n        psy = -psy;\n        sign2 = -sign2;\n    }\n    if (csx < 0) {\n        csx = -csx;\n        offset2 = 180;\n    } else\n        offset2 = 0;\n    var pp = parent.parent;\n    var ppm = pp.matrix;\n    var tx, ty, dx, dy;\n    if (pp == null) {\n        tx = targetX - px;\n        ty = targetY - py;\n        dx = child.worldX - px;\n        dy = child.worldY - py;\n    } else {\n        var a = ppm.a, b = ppm.c, c = ppm.b, d = ppm.d, invDet = 1 / (a * d - b * c);\n        var wx = ppm.tx, wy = ppm.ty, x = targetX - wx, y = targetY - wy;\n        tx = (x * d - y * b) * invDet - px;\n        ty = (y * a - x * c) * invDet - py;\n        x = child.worldX - wx;\n        y = child.worldY - wy;\n        dx = (x * d - y * b) * invDet - px;\n        dy = (y * a - x * c) * invDet - py;\n    }\n    var l1 = Math.sqrt(dx * dx + dy * dy), l2 = child.data.length * csx, a1, a2;\n    outer:\n        if (Math.abs(psx - psy) <= 0.0001) {\n            l2 *= psx;\n            var cos = (tx * tx + ty * ty - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n            if (cos < -1)\n                cos = -1;\n            else if (cos > 1) cos = 1;\n            a2 = Math.acos(cos) * bendDir;\n            var a = l1 + l2 * cos, o = l2 * Math.sin(a2);\n            a1 = Math.atan2(ty * a - tx * o, tx * a + ty * o);\n        } else {\n            cy = 0;\n            var a = psx * l2, b = psy * l2, ta = Math.atan2(ty, tx);\n            var aa = a * a, bb = b * b, ll = l1 * l1, dd = tx * tx + ty * ty;\n            var c0 = bb * ll + aa * dd - aa * bb, c1 = -2 * bb * l1, c2 = bb - aa;\n            var d = c1 * c1 - 4 * c2 * c0;\n            if (d >= 0) {\n                var q = Math.sqrt(d);\n                if (c1 < 0) q = -q;\n                q = -(c1 + q) / 2;\n                var r0 = q / c2, r1 = c0 / q;\n                var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n                if (r * r <= dd) {\n                    var y = Math.sqrt(dd - r * r) * bendDir;\n                    a1 = ta - Math.atan2(y, r);\n                    a2 = Math.atan2(y / psy, (r - l1) / psx);\n                    break outer;\n                }\n            }\n            var minAngle = 0, minDist = Infinity, minX = 0, minY = 0;\n            var maxAngle = 0, maxDist = 0, maxX = 0, maxY = 0;\n            var x = l1 + a, dist = x * x;\n            if (dist > maxDist) {\n                maxAngle = 0;\n                maxDist = dist;\n                maxX = x;\n            }\n            x = l1 - a;\n            dist = x * x;\n            if (dist < minDist) {\n                minAngle = Math.PI;\n                minDist = dist;\n                minX = x;\n            }\n            var angle = Math.acos(-a * l1 / (aa - bb));\n            x = a * Math.cos(angle) + l1;\n            var y = b * Math.sin(angle);\n            dist = x * x + y * y;\n            if (dist < minDist) {\n                minAngle = angle;\n                minDist = dist;\n                minX = x;\n                minY = y;\n            }\n            if (dist > maxDist) {\n                maxAngle = angle;\n                maxDist = dist;\n                maxX = x;\n                maxY = y;\n            }\n            if (dd <= (minDist + maxDist) / 2) {\n                a1 = ta - Math.atan2(minY * bendDir, minX);\n                a2 = minAngle * bendDir;\n            } else {\n                a1 = ta - Math.atan2(maxY * bendDir, maxX);\n                a2 = maxAngle * bendDir;\n            }\n        }\n    var offset = Math.atan2(cy, child.x) * sign2;\n    a1 = (a1 - offset) * spine.radDeg + offset1;\n    a2 = (a2 + offset) * spine.radDeg * sign2 + offset2;\n    if (a1 > 180)\n        a1 -= 360;\n    else if (a1 < -180) a1 += 360;\n    if (a2 > 180)\n        a2 -= 360;\n    else if (a2 < -180) a2 += 360;\n    var rotation = parent.rotation;\n    parent.rotationIK = rotation + (a1 - rotation) * alpha;\n    rotation = child.rotation;\n    child.rotationIK = rotation + (a2 - rotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.MeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.MeshAttachment.prototype = {\n    type: spine.AttachmentType.mesh,\n    parentMesh: null,\n    inheritFFD: false,\n    vertices: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function ()\n    {\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        var region = this.rendererObject;\n        if (!region) return;\n        var texture = region.texture;\n        var r = texture._uvs;\n        var w1 = region.width, h1 = region.height, w2 = region.originalWidth, h2 = region.originalHeight;\n        var x = region.offsetX, y = region.pixiOffsetY;\n        for (var i = 0; i < n; i += 2)\n        {\n            var u = this.regionUVs[i], v = this.regionUVs[i+1];\n            u = (u * w2 - x) / w1;\n            v = (v * h2 - y) / h1;\n            this.uvs[i] = (r.x0 * (1 - u) + r.x1 * u) * (1-v) + (r.x3 * (1 - u) + r.x2 * u) * v;\n            this.uvs[i+1] = (r.y0 * (1 - u) + r.y1 * u) * (1-v) + (r.y3 * (1 - u) + r.y2 * u) * v;\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var bone = slot.bone;\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var vertices = this.vertices;\n        var verticesCount = vertices.length;\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\n        for (var i = 0; i < verticesCount; i += 2)\n        {\n            var vx = vertices[i];\n            var vy = vertices[i + 1];\n            worldVertices[i] = vx * m00 + vy * m01 + x;\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.vertices = parentMesh.vertices;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.MeshAttachment;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.RegionAttachment = function (name)\n{\n    this.name = name;\n    this.offset = [];\n    this.offset.length = 8;\n    this.uvs = [];\n    this.uvs.length = 8;\n};\nspine.RegionAttachment.prototype = {\n    type: spine.AttachmentType.region,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    width: 0, height: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    setUVs: function (u, v, u2, v2, rotate)\n    {\n        var uvs = this.uvs;\n        if (rotate)\n        {\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v2;\n            uvs[4/*X3*/] = u;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v;\n            uvs[0/*X1*/] = u2;\n            uvs[1/*Y1*/] = v2;\n        } else {\n            uvs[0/*X1*/] = u;\n            uvs[1/*Y1*/] = v2;\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v;\n            uvs[4/*X3*/] = u2;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v2;\n        }\n    },\n    updateOffset: function ()\n    {\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\n        var localX2 = localX + this.regionWidth * regionScaleX;\n        var localY2 = localY + this.regionHeight * regionScaleY;\n        var radians = this.rotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        var localXCos = localX * cos + this.x;\n        var localXSin = localX * sin;\n        var localYCos = localY * cos + this.y;\n        var localYSin = localY * sin;\n        var localX2Cos = localX2 * cos + this.x;\n        var localX2Sin = localX2 * sin;\n        var localY2Cos = localY2 * cos + this.y;\n        var localY2Sin = localY2 * sin;\n        var offset = this.offset;\n        offset[0/*X1*/] = localXCos - localYSin;\n        offset[1/*Y1*/] = localYCos + localXSin;\n        offset[2/*X2*/] = localXCos - localY2Sin;\n        offset[3/*Y2*/] = localY2Cos + localXSin;\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\n        offset[6/*X4*/] = localX2Cos - localYSin;\n        offset[7/*Y4*/] = localYCos + localX2Sin;\n    },\n    computeVertices: function (x, y, bone, vertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.matrix.a, m01 = bone.matrix.c, m10 = bone.matrix.b, m11 = bone.matrix.d;\n        var offset = this.offset;\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\n    }\n};\nmodule.exports = spine.RegionAttachment;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Bone = require('./Bone');\nspine.Slot = require('./Slot');\nspine.IkConstraint = require('./IkConstraint');\nspine.Skeleton = function (skeletonData)\n{\n    this.data = skeletonData;\n\n    this.bones = [];\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\n    {\n        var boneData = skeletonData.bones[i];\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\n        this.bones.push(new spine.Bone(boneData, this, parent));\n    }\n\n    this.slots = [];\n    this.drawOrder = [];\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\n    {\n        var slotData = skeletonData.slots[i];\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\n        var slot = new spine.Slot(slotData, bone);\n        this.slots.push(slot);\n        this.drawOrder.push(i);\n    }\n\n    this.ikConstraints = [];\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\n\n    this.boneCache = [];\n    this.updateCache();\n};\nspine.Skeleton.prototype = {\n    x: 0, y: 0,\n    skin: null,\n    r: 1, g: 1, b: 1, a: 1,\n    time: 0,\n    flipX: false, flipY: false,\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\n    updateCache: function ()\n    {\n        var ikConstraints = this.ikConstraints;\n        var ikConstraintsCount = ikConstraints.length;\n\n        var arrayCount = ikConstraintsCount + 1;\n        var boneCache = this.boneCache;\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\n        for (var i = 0, n = boneCache.length; i < n; i++)\n            boneCache[i].length = 0;\n        while (boneCache.length < arrayCount)\n            boneCache[boneCache.length] = [];\n\n        var nonIkBones = boneCache[0];\n        var bones = this.bones;\n\n        outer:\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            var current = bone;\n            do {\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\n                {\n                    var ikConstraint = ikConstraints[ii];\n                    var parent = ikConstraint.bones[0];\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\n                    while (true)\n                    {\n                        if (current == child)\n                        {\n                            boneCache[ii].push(bone);\n                            boneCache[ii + 1].push(bone);\n                            continue outer;\n                        }\n                        if (child == parent) break;\n                        child = child.parent;\n                    }\n                }\n                current = current.parent;\n            } while (current);\n            nonIkBones[nonIkBones.length] = bone;\n        }\n    },\n    /** Updates the world transform for each bone. */\n    updateWorldTransform: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            bone.rotationIK = bone.rotation;\n        }\n        var i = 0, last = this.boneCache.length - 1;\n        while (true)\n        {\n            var cacheBones = this.boneCache[i];\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\n                cacheBones[ii].updateWorldTransform();\n            if (i == last) break;\n            this.ikConstraints[i].apply();\n            i++;\n        }\n    },\n    /** Sets the bones and slots to their setup pose values. */\n    setToSetupPose: function ()\n    {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    },\n    setBonesToSetupPose: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n        {\n            var ikConstraint = ikConstraints[i];\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\n            ikConstraint.mix = ikConstraint.data.mix;\n        }\n    },\n    setSlotsToSetupPose: function ()\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            slots[i].setToSetupPose(i);\n        }\n\n        this.resetDrawOrder();\n    },\n    /** @return May return null. */\n    getRootBone: function ()\n    {\n        return this.bones.length ? this.bones[0] : null;\n    },\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return slots[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    },\n    setSkinByName: function (skinName)\n    {\n        var skin = this.data.findSkin(skinName);\n        if (!skin) throw \"Skin not found: \" + skinName;\n        this.setSkin(skin);\n    },\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\n     * @param newSkin May be null. */\n    setSkin: function (newSkin)\n    {\n        if (newSkin)\n        {\n            if (this.skin)\n                newSkin._attachAll(this, this.skin);\n            else\n            {\n                var slots = this.slots;\n                for (var i = 0, n = slots.length; i < n; i++)\n                {\n                    var slot = slots[i];\n                    var name = slot.data.attachmentName;\n                    if (name)\n                    {\n                        var attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n    },\n    /** @return May be null. */\n    getAttachmentBySlotName: function (slotName, attachmentName)\n    {\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\n    },\n    /** @return May be null. */\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\n    {\n        if (this.skin)\n        {\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    },\n    /** @param attachmentName May be null. */\n    setAttachment: function (slotName, attachmentName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slot = slots[i];\n            if (slot.data.name == slotName)\n            {\n                var attachment = null;\n                if (attachmentName)\n                {\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw \"Slot not found: \" + slotName;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\n        return null;\n    },\n    update: function (delta)\n    {\n        this.time += delta;\n    },\n    resetDrawOrder: function () {\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\n        {\n            this.drawOrder[i] = i;\n        }\n    }\n};\nmodule.exports = spine.Skeleton;\n\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\nspine.SkeletonData = require('./SkeletonData');\nspine.BoneData = require('./BoneData');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.SlotData = require('./SlotData');\nspine.Skin = require('./Skin');\nspine.EventData = require('./EventData');\nspine.AttachmentType = require('./AttachmentType');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.TranslateTimeline = require('./TranslateTimeline');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventTimeline = require('./EventTimeline');\nspine.Event = require('./Event');\nspine.Animation = require('./Animation');\n\nfunction LinkedMesh(mesh, skin, slotIndex, parent) {\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n}\n\nspine.SkeletonJsonParser = function (attachmentLoader)\n{\n    this.attachmentLoader = attachmentLoader;\n    this.linkedMeshes = [];\n};\nspine.SkeletonJsonParser.prototype = {\n    scale: 1,\n    readSkeletonData: function (root, name)\n    {\n        var skeletonData = new spine.SkeletonData();\n        skeletonData.name = name;\n\n        // Skeleton.\n        var skeletonMap = root[\"skeleton\"];\n        if (skeletonMap)\n        {\n            skeletonData.hash = skeletonMap[\"hash\"];\n            skeletonData.version = skeletonMap[\"spine\"];\n            skeletonData.width = skeletonMap[\"width\"] || 0;\n            skeletonData.height = skeletonMap[\"height\"] || 0;\n        }\n\n        // Bones.\n        var bones = root[\"bones\"];\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var boneMap = bones[i];\n            var parent = null;\n            if (boneMap[\"parent\"])\n            {\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\n            }\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\n            skeletonData.bones.push(boneData);\n        }\n\n        // IK constraints.\n        var ik = root[\"ik\"];\n        if (ik)\n        {\n            for (var i = 0, n = ik.length; i < n; i++)\n            {\n                var ikMap = ik[i];\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\n\n                var bones = ikMap[\"bones\"];\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\n                {\n                    var bone = skeletonData.findBone(bones[ii]);\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\n                    ikConstraintData.bones.push(bone);\n                }\n\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\n\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\n\n                skeletonData.ikConstraints.push(ikConstraintData);\n            }\n        }\n\n        // Slots.\n        var slots = root[\"slots\"];\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slotMap = slots[i];\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\n\n            var color = slotMap[\"color\"];\n            if (color)\n            {\n                slotData.r = this.toColor(color, 0);\n                slotData.g = this.toColor(color, 1);\n                slotData.b = this.toColor(color, 2);\n                slotData.a = this.toColor(color, 3);\n            }\n\n            slotData.attachmentName = slotMap[\"attachment\"];\n\n\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\n\n            skeletonData.slots.push(slotData);\n        }\n\n        // Skins.\n        var skins = root[\"skins\"];\n        for (var skinName in skins)\n        {\n            if (!skins.hasOwnProperty(skinName)) continue;\n            var skinMap = skins[skinName];\n            var skin = new spine.Skin(skinName);\n            for (var slotName in skinMap)\n            {\n                if (!skinMap.hasOwnProperty(slotName)) continue;\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var slotEntry = skinMap[slotName];\n                for (var attachmentName in slotEntry)\n                {\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\n                    var attachment = this.readAttachment(skin, slotIndex, attachmentName, slotEntry[attachmentName]);\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\n                }\n            }\n            skeletonData.skins.push(skin);\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n        }\n\n        var linkedMeshes = this.linkedMeshes;\n        // Linked meshes.\n        for (var i = 0, n = linkedMeshes.size; i < n; i++) {\n            var linkedMesh = linkedMeshes[i];\n            var skin = linkedMesh.skin ? skeletonData.findSkin(linkedMesh.skin): skeletonData.defaultSkin;\n            var parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n            linkedMesh.mesh.setParentMesh(parent);\n            linkedMesh.mesh.updateUVs();\n        }\n        linkedMeshes.length = 0;\n\n        // Events.\n        var events = root[\"events\"];\n        for (var eventName in events)\n        {\n            if (!events.hasOwnProperty(eventName)) continue;\n            var eventMap = events[eventName];\n            var eventData = new spine.EventData(eventName);\n            eventData.intValue = eventMap[\"int\"] || 0;\n            eventData.floatValue = eventMap[\"float\"] || 0;\n            eventData.stringValue = eventMap[\"string\"] || null;\n            skeletonData.events.push(eventData);\n        }\n\n        // Animations.\n        var animations = root[\"animations\"];\n        for (var animationName in animations)\n        {\n            if (!animations.hasOwnProperty(animationName)) continue;\n            this.readAnimation(animationName, animations[animationName], skeletonData);\n        }\n\n        return skeletonData;\n    },\n    readAttachment: function (skin, slotIndex, name, map)\n    {\n        name = map[\"name\"] || name;\n\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\n        var path = map[\"path\"] || name;\n\n        var scale = this.scale;\n        if (type == spine.AttachmentType.region)\n        {\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n            if (!region) return null;\n            region.path = path;\n            region.x = (map[\"x\"] || 0) * scale;\n            region.y = (map[\"y\"] || 0) * scale;\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\n            region.rotation = map[\"rotation\"] || 0;\n            region.width = (map[\"width\"] || 0) * scale;\n            region.height = (map[\"height\"] || 0) * scale;\n\n            var color = map[\"color\"];\n            if (color)\n            {\n                region.r = this.toColor(color, 0);\n                region.g = this.toColor(color, 1);\n                region.b = this.toColor(color, 2);\n                region.a = this.toColor(color, 3);\n            }\n\n            region.updateOffset();\n            return region;\n        } else if (type == spine.AttachmentType.boundingbox)\n        {\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n            var vertices = map[\"vertices\"];\n            for (var i = 0, n = vertices.length; i < n; i++)\n                attachment.vertices.push(vertices[i] * scale);\n            return attachment;\n        } else if (type == spine.AttachmentType.mesh || type == spine.AttachmentType.linkedmesh)\n        {\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\n                mesh.updateUVs();\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        } else if (type == spine.AttachmentType.weightedmesh || type == spine.AttachmentType.weightedlinkedmesh)\n        {\n            var mesh = this.attachmentLoader.newWeightedMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n\n            var parent = map[\"parent\"];\n            if (!parent) {\n                var uvs = this.getFloatArray(map, \"uvs\", 1);\n                var vertices = this.getFloatArray(map, \"vertices\", 1);\n                var weights = [];\n                var bones = [];\n                for (var i = 0, n = vertices.length; i < n; )\n                {\n                    var boneCount = vertices[i++] | 0;\n                    bones[bones.length] = boneCount;\n                    for (var nn = i + boneCount * 4; i < nn; )\n                    {\n                        bones[bones.length] = vertices[i];\n                        weights[weights.length] = vertices[i + 1] * scale;\n                        weights[weights.length] = vertices[i + 2] * scale;\n                        weights[weights.length] = vertices[i + 3];\n                        i += 4;\n                    }\n                }\n                mesh.bones = bones;\n                mesh.weights = weights;\n                mesh.triangles = this.getIntArray(map, \"triangles\");\n                mesh.regionUVs = uvs;\n                mesh.updateUVs();\n\n                mesh.hullLength = (map[\"hull\"] || 0) * 2;\n                if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            } else {\n                mesh.inheritFFD = !!map[\"ffd\"];\n                this.linkedMeshes.push(new LinkedMesh(mesh, map[\"skin\"] || null, slotIndex, parent));\n            }\n            return mesh;\n        }\n        throw \"Unknown attachment type: \" + type;\n    },\n    readAnimation: function (name, map, skeletonData)\n    {\n        var timelines = [];\n        var duration = 0;\n\n        var slots = map[\"slots\"];\n        for (var slotName in slots)\n        {\n            if (!slots.hasOwnProperty(slotName)) continue;\n            var slotMap = slots[slotName];\n            var slotIndex = skeletonData.findSlotIndex(slotName);\n\n            for (var timelineName in slotMap)\n            {\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\n                var values = slotMap[timelineName];\n                if (timelineName == \"color\")\n                {\n                    var timeline = new spine.ColorTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var color = valueMap[\"color\"];\n                        var r = this.toColor(color, 0);\n                        var g = this.toColor(color, 1);\n                        var b = this.toColor(color, 2);\n                        var a = this.toColor(color, 3);\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\n\n                } else if (timelineName == \"attachment\")\n                {\n                    var timeline = new spine.AttachmentTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n\n                } else\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\n            }\n        }\n\n        var bones = map[\"bones\"];\n        for (var boneName in bones)\n        {\n            if (!bones.hasOwnProperty(boneName)) continue;\n            var boneIndex = skeletonData.findBoneIndex(boneName);\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\n            var boneMap = bones[boneName];\n\n            for (var timelineName in boneMap)\n            {\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\n                var values = boneMap[timelineName];\n                if (timelineName == \"rotate\")\n                {\n                    var timeline = new spine.RotateTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\n                {\n                    var timeline;\n                    var timelineScale = 1;\n                    if (timelineName == \"scale\")\n                        timeline = new spine.ScaleTimeline(values.length);\n                    else\n                    {\n                        timeline = new spine.TranslateTimeline(values.length);\n                        timelineScale = this.scale;\n                    }\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\n                {\n                    throw \"flipX and flipY are not supported in spine v3: (\" + boneName + \")\";\n                } else\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\n            }\n        }\n\n        var ikMap = map[\"ik\"];\n        for (var ikConstraintName in ikMap)\n        {\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\n            var values = ikMap[ikConstraintName];\n            var timeline = new spine.IkConstraintTimeline(values.length);\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\n            var frameIndex = 0;\n            for (var i = 0, n = values.length; i < n; i++)\n            {\n                var valueMap = values[i];\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\n                this.readCurve(timeline, frameIndex, valueMap);\n                frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n        }\n\n        var ffd = map[\"ffd\"];\n        for (var skinName in ffd)\n        {\n            var skin = skeletonData.findSkin(skinName);\n            var slotMap = ffd[skinName];\n            for (slotName in slotMap)\n            {\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var meshMap = slotMap[slotName];\n                for (var meshName in meshMap)\n                {\n                    var values = meshMap[meshName];\n                    var timeline = new spine.FfdTimeline(values.length);\n                    var attachment = skin.getAttachment(slotIndex, meshName);\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\n                    timeline.slotIndex = slotIndex;\n                    timeline.attachment = attachment;\n\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\n                    var vertexCount;\n                    if (isMesh)\n                        vertexCount = attachment.vertices.length;\n                    else\n                        vertexCount = attachment.weights.length / 3 * 2;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var vertices;\n                        if (!valueMap[\"vertices\"])\n                        {\n                            if (isMesh)\n                                vertices = attachment.vertices;\n                            else\n                            {\n                                vertices = [];\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            }\n                        } else {\n                            var verticesValue = valueMap[\"vertices\"];\n                            vertices = [];\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\n                            var start = valueMap[\"offset\"] || 0;\n                            var nn = verticesValue.length;\n                            if (this.scale == 1)\n                            {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii];\n                            } else {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\n                            }\n                            if (isMesh)\n                            {\n                                var meshVertices = attachment.vertices;\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\n                                    vertices[ii] += meshVertices[ii];\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines[timelines.length] = timeline;\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                }\n            }\n        }\n\n        var drawOrderValues = map[\"drawOrder\"];\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\n        if (drawOrderValues)\n        {\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\n            var slotCount = skeletonData.slots.length;\n            var frameIndex = 0;\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\n            {\n                var drawOrderMap = drawOrderValues[i];\n                var drawOrder = null;\n                if (drawOrderMap[\"offsets\"])\n                {\n                    drawOrder = [];\n                    drawOrder.length = slotCount;\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        drawOrder[ii] = -1;\n                    var offsets = drawOrderMap[\"offsets\"];\n                    var unchanged = [];\n                    unchanged.length = slotCount - offsets.length;\n                    var originalIndex = 0, unchangedIndex = 0;\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\n                    {\n                        var offsetMap = offsets[ii];\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        var events = map[\"events\"];\n        if (events)\n        {\n            var timeline = new spine.EventTimeline(events.length);\n            var frameIndex = 0;\n            for (var i = 0, n = events.length; i < n; i++)\n            {\n                var eventMap = events[i];\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\n                var event = new spine.Event(eventData);\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\n    },\n    readCurve: function (timeline, frameIndex, valueMap)\n    {\n        var curve = valueMap[\"curve\"];\n        if (!curve)\n            timeline.curves.setLinear(frameIndex);\n        else if (curve == \"stepped\")\n            timeline.curves.setStepped(frameIndex);\n        else if (curve instanceof Array)\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n    },\n    toColor: function (hexString, colorIndex)\n    {\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\n    },\n    getFloatArray: function (map, name, scale)\n    {\n        var list = map[name];\n        var values = new spine.Float32Array(list.length);\n        var i = 0, n = list.length;\n        if (scale == 1)\n        {\n            for (; i < n; i++)\n                values[i] = list[i];\n        } else {\n            for (; i < n; i++)\n                values[i] = list[i] * scale;\n        }\n        return values;\n    },\n    getIntArray: function (map, name)\n    {\n        var list = map[name];\n        var values = new spine.Uint16Array(list.length);\n        for (var i = 0, n = list.length; i < n; i++)\n            values[i] = list[i] | 0;\n        return values;\n    }\n};\nmodule.exports = spine.SkeletonJsonParser;\n\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.WeightedMeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.WeightedMeshAttachment.prototype = {\n    type: spine.AttachmentType.weightedmesh,\n    parentMesh: null,\n    inheritFFD: false,\n    bones: null,\n    weights: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function (u, v, u2, v2, rotate)\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        var region = this.rendererObject;\n        if (!region) return;\n        var texture = region.texture;\n        var r = texture._uvs;\n        var w1 = region.width, h1 = region.height, w2 = region.originalWidth, h2 = region.originalHeight;\n        var x = region.offsetX, y = region.pixiOffsetY;\n        for (var i = 0; i < n; i += 2)\n        {\n            var u = this.regionUVs[i], v = this.regionUVs[i+1];\n            u = (u * w2 - x) / w1;\n            v = (v * h2 - y) / h1;\n            this.uvs[i] = (r.x0 * (1 - u) + r.x1 * u) * (1-v) + (r.x3 * (1 - u) + r.x2 * u) * v;\n            this.uvs[i+1] = (r.y0 * (1 - u) + r.y1 * u) * (1-v) + (r.y3 * (1 - u) + r.y2 * u) * v;\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var skeletonBones = slot.bone.skeleton.bones;\n        var weights = this.weights;\n        var bones = this.bones;\n\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\n        var wx, wy, vx, vy, weight;\n        var m;\n        if (!slot.attachmentVertices.length)\n        {\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b];\n                    vy = weights[b + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        } else {\n            var ffd = slot.attachmentVertices;\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3, f += 2)\n                {\n                    m = skeletonBones[bones[v]].matrix;\n                    vx = weights[b] + ffd[f];\n                    vy = weights[b + 1] + ffd[f + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * m.a + vy * m.c + m.tx) * weight;\n                    wy += (vx * m.b + vy * m.d + m.ty) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        }\n    },\n    applyFFD: function(sourceAttachment) {\n        return this === sourceAttachment || (this.inheritFFD && parentMesh === sourceAttachment);\n    },\n    setParentMesh: function(parentMesh) {\n        this.parentMesh = parentMesh;\n        if (parentMesh != null) {\n            this.bones = parentMesh.bones;\n            this.weights = parentMesh.weights;\n            this.regionUVs = parentMesh.regionUVs;\n            this.triangles = parentMesh.triangles;\n            this.hullLength = parentMesh.hullLength;\n        }\n    }\n};\nmodule.exports = spine.WeightedMeshAttachment;\n\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.WeightedMeshAttachment = require('./WeightedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n","module.exports = {\n    radDeg: 180 / Math.PI,\n    degRad: Math.PI / 180,\n    temp: [],\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array,\n    signum: function(x) {\n        if (x>0) return 1;\n        if (x<0) return -1;\n        return 0;\n    }\n};\n\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nSpine.globalAutoUpdate = true;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            if (slotContainer.transform ) {\n                //PIXI v4.0\n                if (!slotContainer.transform._dirtyLocal) {\n                    slotContainer.transform = new PIXI.TransformStatic();\n                }\n                var transform = slotContainer.transform;\n                var lt = transform.localTransform;\n                transform._dirtyParentVersion = -1;\n                transform._dirtyLocal = 1;\n                transform._versionLocal = 1;\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n            } else {\n                //PIXI v3\n                var lt = slotContainer.localTransform || new PIXI.Matrix();\n                slot.bone.matrix.copy(lt);\n                lt.tx += slot.bone.skeleton.x;\n                lt.ty += slot.bone.skeleton.y;\n                slotContainer.localTransform = lt;\n                slotContainer.displayObjectUpdateTransform = SlotContainerUpdateTransformV3;\n            }\n\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    if (Spine.globalAutoUpdate) {\n        this.lastTime = this.lastTime || Date.now();\n        var timeDelta = (Date.now() - this.lastTime) * 0.001;\n        this.lastTime = Date.now();\n        this.update(timeDelta);\n    } else {\n        this.lastTime = 0;\n    }\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var texture = descriptor.texture;\n    var sprite = new PIXI.Sprite(texture);\n    sprite.scale.x = attachment.scaleX * attachment.width / descriptor.originalWidth;\n    sprite.scale.y = - attachment.scaleY * attachment.height / descriptor.originalHeight;\n    sprite.rotation = attachment.rotation * spine.degRad;\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n    sprite.position.x = attachment.x;\n    sprite.position.y = attachment.y;\n    sprite.alpha = attachment.a;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n\nfunction SlotContainerUpdateTransformV3()\n{\n    var pt = this.parent.worldTransform;\n    var wt = this.worldTransform;\n    var lt = this.localTransform;\n    wt.a  = lt.a  * pt.a + lt.b  * pt.c;\n    wt.b  = lt.a  * pt.b + lt.b  * pt.d;\n    wt.c  = lt.c  * pt.a + lt.d  * pt.c;\n    wt.d  = lt.c  * pt.b + lt.d  * pt.d;\n    wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n    wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n    this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    this._currentBounds = null;\n};\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\n    spine = require('../SpineRuntime'),\n    imageLoaderAdapter = require('./imageLoaderAdapter');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT,\n            metadata: resource.metadata ? resource.metadata.spineMetadata : null\n        };\n        var imageOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata ? resource.metadata.imageMetadata: null\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n        var adapter = imageLoaderAdapter(this, resource.name + '_atlas_page_', baseUrl, imageOptions);\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            new spine.Atlas(this.xhr.responseText, adapter, function(spineAtlas) {\n                var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n                var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n                resource.spineData = skeletonData;\n                resource.spineAtlas = spineAtlas;\n                if (atlasParser.enableCaching)\n                    atlasParser.AnimCache[resource.name] = resource.spineData;\n\n                next();\n            });\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (loader, namePrefix, baseUrl, imageOptions) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        var name = namePrefix + line;\r\n        var url = baseUrl + line;\r\n        loader.add(name, url, imageOptions, function(resource) {\r\n            callback(resource.texture.baseTexture);\r\n        });\r\n    }\r\n};\r\n","module.exports = {\r\n    atlasParser: require('./atlasParser'),\r\n    Loader: require('./Loader'),\r\n    syncImageLoaderAdapter: require('./syncImageLoaderAdapter'),\r\n    imageLoaderAdapter: require('./imageLoaderAdapter')\r\n};\r\n","var spine = require('../SpineRuntime');\r\n\r\nmodule.exports = function (baseUrl, crossOrigin) {\r\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\r\n    {\r\n        baseUrl += '/';\r\n    }\r\n    return function(line, callback) {\r\n        callback(PIXI.BaseTexture.fromImage(line, crossOrigin));\r\n    }\r\n};\r\n"],"sourceRoot":"./"}