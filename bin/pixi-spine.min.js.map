{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","pixi-spine.min.js","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/FlipXTimeline.js","src/SpineRuntime/FlipYTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/SkinnedMeshAttachment.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","PIXI","spine","Spine","SpineRuntime","loaders","./Spine","./SpineRuntime","./loaders",2,"Animation","name","timelines","duration","this","prototype","apply","skeleton","lastTime","time","loop","events","mix","alpha","binarySearch","values","target","step","low","high","Math","floor","current","binarySearch1","linearSearch","last","../SpineUtil",3,"TrackEntry","AnimationState","stateData","data","tracks","onStart","onEnd","onComplete","onEvent","timeScale","update","delta","previous","previousDelta","mixTime","next","delay","setCurrent","endTime","clearTrack","resetDrawOrder","previousTime","animation","mixDuration","ii","nn","event","count","clearTracks","trackIndex","_expandToIndex","index","push","entry","getMix","setAnimationByName","animationName","skeletonData","findAnimation","setAnimation","addAnimationByName","addAnimation","getCurrent","./TrackEntry",4,"AnimationStateData","animationToMixTime","defaultMix","setMixByName","fromName","toName","from","to","setMix","key","hasOwnProperty",5,"AtlasReader","AtlasPage","AtlasRegion","Atlas","atlasText","baseUrl","crossOrigin","lastIndexOf","pages","regions","texturesLoading","resolution","utils","getResolutionOfUrl","reader","tuple","page","line","readLine","trim","region","rotate","readValue","readTuple","x","parseInt","y","width","height","v","u2","v2","abs","splits","pads","originalWidth","originalHeight","offsetX","offsetY","console","log","format","Format","minFilter","TextureFilter","magFilter","direction","uWrap","TextureWrap","clampToEdge","vWrap","repeat","rendererObject","BaseTexture","fromImage","findRegion","dispose","destroy","updateUVs","intensity","luminanceAlpha","rgb565","rgba4444","rgb888","rgba8888","nearest","linear","mipMap","mipMapNearestNearest","mipMapLinearNearest","mipMapNearestLinear","mipMapLinearLinear","mirroredRepeat","./AtlasPage","./AtlasReader","./AtlasRegion",6,"RegionAttachment","MeshAttachment","SkinnedMeshAttachment","BoundingBoxAttachment","AtlasAttachmentParser","atlas","newRegionAttachment","skin","path","attachment","setUVs","regionOffsetX","regionOffsetY","regionWidth","regionHeight","regionOriginalWidth","regionOriginalHeight","newMeshAttachment","regionU","regionV","regionU2","regionV2","regionRotate","newSkinnedMeshAttachment","newBoundingBoxAttachment","./BoundingBoxAttachment","./MeshAttachment","./RegionAttachment","./SkinnedMeshAttachment",7,8,"text","lines","split","value","replace","colon","indexOf","substring","lastMatch","comma","substr",9,10,"Curves","AttachmentTimeline","frameCount","curves","frames","attachmentNames","slotIndex","getFrameCount","setFrame","frameIndex","attachmentName","firedEvents","Number","MAX_VALUE","slots","setAttachment","getAttachmentBySlotIndex","./Animation","./Curves",11,"AttachmentType","boundingbox","mesh","skinnedmesh",12,"Bone","boneData","parent","setToSetupPose","yDown","rotation","rotationIK","scaleX","scaleY","flipX","flipY","m00","m01","worldX","m10","m11","worldY","worldRotation","worldScaleX","worldScaleY","worldFlipX","worldFlipY","updateWorldTransform","inheritScale","inheritRotation","skeletonFlipX","skeletonFlipY","radians","degRad","cos","sin","worldToLocal","world","dx","dy","invDet","localToWorld","local","localX","localY",13,"BoneData",14,"vertices","type","computeWorldVertices","bone","worldVertices","px","py","./AttachmentType",15,"ColorTimeline","g","b","prevFrameR","prevFrameG","prevFrameB","prevFrameA","frameTime","percent","getCurvePercent","slot",16,"setLinear","setStepped","setCurve","cx1","cy1","cx2","cy2","subdiv1","subdiv2","subdiv3","pre1","pre2","pre4","pre5","tmp1x","tmp1y","tmp2x","tmp2y","dfx","dfy","ddfx","ddfy","dddfx","dddfy","start","prevX","prevY",17,"DrawOrderTimeline","drawOrders","drawOrder","drawOrderToSetupIndex",18,"Event","intValue","floatValue","stringValue",19,"EventData",20,"EventTimeline","frame",21,"FfdTimeline","frameVertices","vertexCount","attachmentVertices","k","lastVertices","prevVertices","nextVertices","prev",22,"FlipXTimeline","boneIndex","flip","bones",23,"FlipYTimeline",24,"IkConstraint","bendDirection","findBone","apply1","apply2","targetX","targetY","parentRotation","radDeg","atan2","child","childRotation","positionX","positionY","tempPosition","temp","parentParent","childX","childY","offset","len1","sqrt","len2","cosDenom","childAngle","acos","adjacent","opposite","parentAngle",25,"IkConstraintData",26,"IkConstraintTimeline","ikConstraintIndex","ikConstraint","ikConstraints","prevFrameMix",27,"uvs","regionUVs","triangles","hullLength","edges","Float32Array","verticesCount","vx","vy",28,"updateOffset","regionScaleX","regionScaleY","localX2","localY2","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","computeVertices",29,"RotateTimeline","angle","amount","prevFrameValue",30,"ScaleTimeline","prevFrameX","prevFrameY",31,"Slot","Skeleton","slotData","boneCache","updateCache","ikConstraintsCount","arrayCount","nonIkBones","outer","cacheBones","setBonesToSetupPose","setSlotsToSetupPose","getRootBone","boneName","findBoneIndex","findSlot","slotName","findSlotIndex","setSkinByName","skinName","findSkin","setSkin","newSkin","_attachAll","getAttachment","getAttachmentBySlotName","defaultSkin","findIkConstraint","ikConstraintName","./Bone","./IkConstraint","./Slot",32,"SkeletonBounds","polygonPool","polygons","boundingBoxes","minX","minY","maxX","maxY","updateAabb","slotCount","boundingBox","polygon","poolCount","splice","aabbCompute","MIN_VALUE","min","max","aabbContainsPoint","aabbIntersectsSegment","x1","y1","x2","y2","m","aabbIntersectsSkeleton","bounds","containsPoint","polygonContainsPoint","intersectsSegment","prevIndex","inside","vertexY","vertexX","polygonIntersectsSegment","width12","height12","det1","x3","y3","x4","y4","det2","width34","height34","det3","getPolygon","getWidth","getHeight","../SpineRuntime",33,"SkeletonData","skins","animations","version","hash","findEvent","eventName",34,"SlotData","Skin","TranslateTimeline","SkeletonJsonParser","attachmentLoader","scale","readSkeletonData","root","skeletonMap","boneMap","ik","ikMap","ikConstraintData","slotMap","color","toColor","blendMode","PIXI_BLEND_MODE_MAP","skinMap","slotEntry","readAttachment","addAttachment","eventMap","eventData","readAnimation","map","getFloatArray","getIntArray","weights","boneCount","timelineName","timeline","valueMap","readCurve","timelineScale","field","ffd","meshMap","meshName","isMesh","verticesValue","j","meshVertices","drawOrderValues","drawOrderMap","offsets","unchanged","originalIndex","unchangedIndex","offsetMap","curve","Array","hexString","colorIndex","list","Uint16Array","./AttachmentTimeline","./BoneData","./ColorTimeline","./DrawOrderTimeline","./Event","./EventData","./EventTimeline","./FfdTimeline","./FlipXTimeline","./FlipYTimeline","./IkConstraintData","./IkConstraintTimeline","./RotateTimeline","./ScaleTimeline","./SkeletonData","./Skin","./SlotData","./TranslateTimeline",35,"attachments","oldSkin",36,"wx","wy","weight","skeletonBones","w",37,"_attachmentTime","setAttachmentTime","getAttachmentTime","slotDatas",38,"multiply","BLEND_MODES","MULTIPLY","screen","SCREEN","additive","ADD","normal","NORMAL",39,40,41,"./AnimationState","./AnimationStateData","./Atlas","./AtlasAttachmentParser","./Skeleton","./SkeletonBounds","./SkeletonJsonParser","./Skin.js",42,"PI",43,"spineData","Container","state","slotContainers","slotContainer","addChild","spriteName","sprite","createSprite","currentSprite","currentSpriteName","createMesh","currentMesh","currentMeshName","autoUpdate","atlasParser","fromAtlas","resourceName","AnimCache","Object","create","constructor","defineProperties","get","updateTransform","autoUpdateTransform","set","dt","children","undefined","visible","sprites","position","tint","rgb2hex","meshes","Date","now","timeDelta","descriptor","baseTexture","spriteRect","Rectangle","spriteTexture","Texture","Sprite","baseRotation","anchor","texture","strip","Mesh","DRAW_MODES","TRIANGLES","canvasPadding","../loaders/atlasParser",44,"Loader","addPixiMiddleware","loader","use","./atlasParser",45,"Resource","async","resource","isJson","atlasPath","url","atlasOptions","xhrType","XHR_RESPONSE_TYPE","TEXT","add","res","spineAtlas","xhr","responseText","spineJsonParser","enableCaching","each","done","hasLoaded","once",46,"./Loader"],"mappings":"CAAA,QAAAA,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAK,GAAA,GAAAC,OAAA,uBAAAN,EAAA,IAAA,MAAAK,GAAAE,KAAA,mBAAAF,EAAA,GAAAG,GAAAX,EAAAG,IAAAS,WAAAb,GAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAS,QAAA,IAAA,GAAAL,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCGAI,EAAAJ,QAAAK,KAAAC,OACAC,MAAAb,EAAA,WACAc,aAAAd,EAAA,kBACAe,QAAAf,EAAA,gBCIGgB,UAAU,GAAGC,iBAAiB,GAAGC,YAAY,KAAKC,GAAG,SAASnB,EAAQU,EAAOJ,GCVhF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAA,SAAAC,EAAAC,EAAAC,GAEAC,KAAAH,KAAAA,EACAG,KAAAF,UAAAA,EACAE,KAAAD,SAAAA,GAEAX,EAAAQ,UAAAK,WACAC,MAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEAD,GAAA,GAAAN,KAAAD,WAEAM,GAAAL,KAAAD,SACAK,GAAAJ,KAAAD,SAGA,KAAA,GADAD,GAAAE,KAAAF,UACArB,EAAA,EAAAP,EAAA4B,EAAAd,OAAAd,EAAAO,EAAAA,IACAqB,EAAArB,GAAAyB,MAAAC,EAAAC,EAAAC,EAAAE,EAAA,IAEAC,IAAA,SAAAL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,GAEAH,GAAA,GAAAN,KAAAD,WAEAM,GAAAL,KAAAD,SACAK,GAAAJ,KAAAD,SAGA,KAAA,GADAD,GAAAE,KAAAF,UACArB,EAAA,EAAAP,EAAA4B,EAAAd,OAAAd,EAAAO,EAAAA,IACAqB,EAAArB,GAAAyB,MAAAC,EAAAC,EAAAC,EAAAE,EAAAE,KAGArB,EAAAQ,UAAAc,aAAA,SAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,EACAC,EAAAC,KAAAC,MAAAN,EAAA3B,OAAA6B,GAAA,CACA,KAAAE,EAAA,MAAAF,EAEA,KADA,GAAAK,GAAAH,IAAA,IAEA,CAKA,GAJAJ,GAAAO,EAAA,GAAAL,IAAAD,EACAE,EAAAI,EAAA,EAEAH,EAAAG,EACAJ,GAAAC,EAAA,OAAAD,EAAA,GAAAD,CACAK,GAAAJ,EAAAC,IAAA,IAGA3B,EAAAQ,UAAAuB,cAAA,SAAAR,EAAAC,GAEA,GAAAE,GAAA,EACAC,EAAAJ,EAAA3B,OAAA,CACA,KAAA+B,EAAA,MAAA,EAEA,KADA,GAAAG,GAAAH,IAAA,IAEA,CAKA,GAJAJ,EAAAO,EAAA,IAAAN,EACAE,EAAAI,EAAA,EAEAH,EAAAG,EACAJ,GAAAC,EAAA,MAAAD,GAAA,CACAI,GAAAJ,EAAAC,IAAA,IAGA3B,EAAAQ,UAAAwB,aAAA,SAAAT,EAAAC,EAAAC,GAEA,IAAA,GAAApC,GAAA,EAAA4C,EAAAV,EAAA3B,OAAA6B,EAAAQ,GAAA5C,EAAAA,GAAAoC,EACA,GAAAF,EAAAlC,GAAAmC,EAAA,MAAAnC,EACA,OAAA,IAEAS,EAAAJ,QAAAM,EAAAQ,YDaG0B,eAAe,KAAKC,GAAG,SAAS/C,EAAQU,EAAOJ,GElFlD,GAAAM,GAAAZ,EAAA,eACAY,GAAAoC,WAAAhD,EAAA,gBACAY,EAAAqC,eAAA,SAAAC,GAEA1B,KAAA2B,KAAAD,EACA1B,KAAA4B,UACA5B,KAAAO,WAEAnB,EAAAqC,eAAAxB,WACA4B,QAAA,KACAC,MAAA,KACAC,WAAA,KACAC,QAAA,KACAC,UAAA,EACAC,OAAA,SAAAC,GAEAA,GAAAnC,KAAAiC,SACA,KAAA,GAAAxD,GAAA,EAAAA,EAAAuB,KAAA4B,OAAA5C,OAAAP,IACA,CACA,GAAAyC,GAAAlB,KAAA4B,OAAAnD,EACA,IAAAyC,EAAA,CAGA,GADAA,EAAAb,MAAA8B,EAAAjB,EAAAe,UACAf,EAAAkB,SACA,CACA,GAAAC,GAAAF,EAAAjB,EAAAkB,SAAAH,SACAf,GAAAkB,SAAA/B,MAAAgC,EACAnB,EAAAoB,SAAAD,EAGA,GAAAE,GAAArB,EAAAqB,IACAA,IAEAA,EAAAlC,KAAAa,EAAAd,SAAAmC,EAAAC,MACAD,EAAAlC,MAAA,GAAAL,KAAAyC,WAAAhE,EAAA8D,KAGArB,EAAAZ,MAAAY,EAAAd,UAAAc,EAAAwB,SAAA1C,KAAA2C,WAAAlE,MAIAyB,MAAA,SAAAC,GAEAA,EAAAyC,gBAEA,KAAA,GAAAnE,GAAA,EAAAA,EAAAuB,KAAA4B,OAAA5C,OAAAP,IACA,CACA,GAAAyC,GAAAlB,KAAA4B,OAAAnD,EACA,IAAAyC,EAAA,CAEAlB,KAAAO,OAAAvB,OAAA,CAEA,IAAAqB,GAAAa,EAAAb,KACAD,EAAAc,EAAAd,SACAsC,EAAAxB,EAAAwB,QACApC,EAAAY,EAAAZ,MACAA,GAAAD,EAAAqC,IAAArC,EAAAqC,EAEA,IAAAN,GAAAlB,EAAAkB,QACA,IAAAA,EAMA,CACA,GAAAS,GAAAT,EAAA/B,MACA+B,EAAA9B,MAAAuC,EAAAT,EAAAM,UAAAG,EAAAT,EAAAM,SACAN,EAAAU,UAAA5C,MAAAC,EAAA0C,EAAAA,EAAAT,EAAA9B,KAAA,KAEA,IAAAG,GAAAS,EAAAoB,QAAApB,EAAA6B,YAAA7B,EAAAV,GACAC,IAAA,IAEAA,EAAA,EACAS,EAAAkB,SAAA,MAEAlB,EAAA4B,UAAAtC,IAAAL,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,OAAAE,OAfA,IAAAS,EAAAV,IACAU,EAAA4B,UAAA5C,MAAAC,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,QAEAW,EAAA4B,UAAAtC,IAAAL,EAAAe,EAAAd,SAAAC,EAAAC,EAAAN,KAAAO,OAAAW,EAAAV,IAeA,KAAA,GAAAwC,GAAA,EAAAC,EAAAjD,KAAAO,OAAAvB,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAE,GAAAlD,KAAAO,OAAAyC,EACA9B,GAAAc,SAAAd,EAAAc,QAAAvD,EAAAyE,GACAlD,KAAAgC,SAAAhC,KAAAgC,QAAAvD,EAAAyE,GAIA,GAAA5C,EAAAF,EAAAsC,EAAArC,EAAAqC,EAAAA,EAAAtC,GAAAC,GAAAqC,EACA,CACA,GAAAS,GAAAnC,KAAAC,MAAAZ,EAAAqC,EACAxB,GAAAa,YAAAb,EAAAa,WAAAtD,EAAA0E,GACAnD,KAAA+B,YAAA/B,KAAA+B,WAAAtD,EAAA0E,GAGAjC,EAAAd,SAAAc,EAAAb,QAGA+C,YAAA,WAEA,IAAA,GAAA3E,GAAA,EAAAP,EAAA8B,KAAA4B,OAAA5C,OAAAd,EAAAO,EAAAA,IACAuB,KAAA2C,WAAAlE,EACAuB,MAAA4B,OAAA5C,OAAA,GAEA2D,WAAA,SAAAU,GAEA,KAAAA,GAAArD,KAAA4B,OAAA5C,QAAA,CACA,GAAAkC,GAAAlB,KAAA4B,OAAAyB,EACAnC,KAEAA,EAAAY,OAAAZ,EAAAY,MAAAuB,GACArD,KAAA8B,OAAA9B,KAAA8B,MAAAuB,GAEArD,KAAA4B,OAAAyB,GAAA,QAEAC,eAAA,SAAAC,GAEA,GAAAA,EAAAvD,KAAA4B,OAAA5C,OAAA,MAAAgB,MAAA4B,OAAA2B,EACA,MAAAA,GAAAvD,KAAA4B,OAAA5C,QACAgB,KAAA4B,OAAA4B,KAAA,KACA,OAAA,OAEAf,WAAA,SAAAc,EAAAE,GAEA,GAAAvC,GAAAlB,KAAAsD,eAAAC,EACA,IAAArC,EACA,CACA,GAAAkB,GAAAlB,EAAAkB,QACAlB,GAAAkB,SAAA,KAEAlB,EAAAY,OAAAZ,EAAAY,MAAAyB,GACAvD,KAAA8B,OAAA9B,KAAA8B,MAAAyB,GAEAE,EAAAV,YAAA/C,KAAA2B,KAAA+B,OAAAxC,EAAA4B,UAAAW,EAAAX,WACAW,EAAAV,YAAA,IAEAU,EAAAnB,QAAA,EAEAF,GAAAlB,EAAAoB,QAAApB,EAAA6B,YAAA,GACAU,EAAArB,SAAAA,EAEAqB,EAAArB,SAAAlB,GAIAlB,KAAA4B,OAAA2B,GAAAE,EAEAA,EAAA5B,SAAA4B,EAAA5B,QAAA0B,GACAvD,KAAA6B,SAAA7B,KAAA6B,QAAA0B,IAEAI,mBAAA,SAAAN,EAAAO,EAAAtD,GAEA,GAAAwC,GAAA9C,KAAA2B,KAAAkC,aAAAC,cAAAF,EACA,KAAAd,EAAA,KAAA,wBAAAc,CACA,OAAA5D,MAAA+D,aAAAV,EAAAP,EAAAxC,IAGAyD,aAAA,SAAAV,EAAAP,EAAAxC,GAEA,GAAAmD,GAAA,GAAArE,GAAAoC,UAKA,OAJAiC,GAAAX,UAAAA,EACAW,EAAAnD,KAAAA,EACAmD,EAAAf,QAAAI,EAAA/C,SACAC,KAAAyC,WAAAY,EAAAI,GACAA,GAEAO,mBAAA,SAAAX,EAAAO,EAAAtD,EAAAkC,GAEA,GAAAM,GAAA9C,KAAA2B,KAAAkC,aAAAC,cAAAF,EACA,KAAAd,EAAA,KAAA,wBAAAc,CACA,OAAA5D,MAAAiE,aAAAZ,EAAAP,EAAAxC,EAAAkC,IAIAyB,aAAA,SAAAZ,EAAAP,EAAAxC,EAAAkC,GAEA,GAAAiB,GAAA,GAAArE,GAAAoC,UACAiC,GAAAX,UAAAA,EACAW,EAAAnD,KAAAA,EACAmD,EAAAf,QAAAI,EAAA/C,QAEA,IAAAsB,GAAArB,KAAAsD,eAAAD,EACA,IAAAhC,EACA,CACA,KAAAA,EAAAkB,MACAlB,EAAAA,EAAAkB,IACAlB,GAAAkB,KAAAkB,MAEAzD,MAAA4B,OAAAyB,GAAAI,CAWA,OATA,IAAAjB,IAEAnB,EACAmB,GAAAnB,EAAAqB,QAAA1C,KAAA2B,KAAA+B,OAAArC,EAAAyB,UAAAA,GAEAN,EAAA,GAEAiB,EAAAjB,MAAAA,EAEAiB,GAGAS,WAAA,SAAAb,GAEA,MAAAA,IAAArD,KAAA4B,OAAA5C,OAAA,KACAgB,KAAA4B,OAAAyB,KAGAnE,EAAAJ,QAAAM,EAAAqC,iBFsFGH,eAAe,GAAG6C,eAAe,KAAKC,GAAG,SAAS5F,EAAQU,EAAOJ,GGrSpE,GAAAM,GAAAZ,EAAA,eACAY,GAAAiF,mBAAA,SAAAR,GAEA7D,KAAA6D,aAAAA,EACA7D,KAAAsE,uBAEAlF,EAAAiF,mBAAApE,WACAsE,WAAA,EACAC,aAAA,SAAAC,EAAAC,EAAA3E,GAEA,GAAA4E,GAAA3E,KAAA6D,aAAAC,cAAAW,EACA,KAAAE,EAAA,KAAA,wBAAAF,CACA,IAAAG,GAAA5E,KAAA6D,aAAAC,cAAAY,EACA,KAAAE,EAAA,KAAA,wBAAAF,CACA1E,MAAA6E,OAAAF,EAAAC,EAAA7E,IAEA8E,OAAA,SAAAF,EAAAC,EAAA7E,GAEAC,KAAAsE,mBAAAK,EAAA9E,KAAA,IAAA+E,EAAA/E,MAAAE,GAEA2D,OAAA,SAAAiB,EAAAC,GAEA,GAAAE,GAAAH,EAAA9E,KAAA,IAAA+E,EAAA/E,IACA,OAAAG,MAAAsE,mBAAAS,eAAAD,GAAA9E,KAAAsE,mBAAAQ,GAAA9E,KAAAuE,aAGArF,EAAAJ,QAAAM,EAAAiF,qBHySG/C,eAAe,KAAK0D,GAAG,SAASxG,EAAQU,EAAOJ,GInUlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA6F,YAAAzG,EAAA,iBACAY,EAAA8F,UAAA1G,EAAA,eACAY,EAAA+F,YAAA3G,EAAA,iBAEAY,EAAAgG,MAAA,SAAAC,EAAAC,EAAAC,GAEAD,GAAAA,EAAAE,YAAA,OAAAF,EAAAtG,OAAA,IAEAsG,GAAA,KAGAtF,KAAAyF,SACAzF,KAAA0F,WAEA1F,KAAA2F,gBAAA,CAEA,IACAC,GAAAzG,KAAA0G,MAAAC,mBAAAR,GAEAS,EAAA,GAAA3G,GAAA6F,YAAAI,GACAW,IACAA,GAAAhH,OAAA,CAEA,KADA,GAAAiH,GAAA,OAEA,CACA,GAAAC,GAAAH,EAAAI,UACA,IAAA,OAAAD,EAAA,KAEA,IADAA,EAAAH,EAAAK,KAAAF,GACAA,EAAAlH,OAEA,GAAAiH,EAkCA,CACA,GAAAI,GAAA,GAAAjH,GAAA+F,WACAkB,GAAAxG,KAAAqG,EACAG,EAAAJ,KAAAA,EAEAI,EAAAC,OAAA,QAAAP,EAAAQ,YAEAR,EAAAS,UAAAR,EACA,IAAAS,GAAAC,SAAAV,EAAA,IAAAJ,EACAe,EAAAD,SAAAV,EAAA,IAAAJ,CAEAG,GAAAS,UAAAR,EACA,IAAAY,GAAAF,SAAAV,EAAA,IAAAJ,EACAiB,EAAAH,SAAAV,EAAA,IAAAJ,CAEAS,GAAA/H,EAAAmI,EAAAR,EAAAW,MACAP,EAAAS,EAAAH,EAAAV,EAAAY,OACAR,EAAAC,QAEAD,EAAAU,IAAAN,EAAAI,GAAAZ,EAAAW,MACAP,EAAAW,IAAAL,EAAAC,GAAAX,EAAAY,SAEAR,EAAAU,IAAAN,EAAAG,GAAAX,EAAAW,MACAP,EAAAW,IAAAL,EAAAE,GAAAZ,EAAAY,QAEAR,EAAAI,EAAAA,EACAJ,EAAAM,EAAAA,EACAN,EAAAO,MAAA5F,KAAAiG,IAAAL,GACAP,EAAAQ,OAAA7F,KAAAiG,IAAAJ,GAEA,GAAAd,EAAAS,UAAAR,KAEAK,EAAAa,QAAAR,SAAAV,EAAA,IAAAU,SAAAV,EAAA,IAAAU,SAAAV,EAAA,IAAAU,SAAAV,EAAA,KAEA,GAAAD,EAAAS,UAAAR,KAEAK,EAAAc,MAAAT,SAAAV,EAAA,IAAAU,SAAAV,EAAA,IAAAU,SAAAV,EAAA,IAAAU,SAAAV,EAAA,KAEAD,EAAAS,UAAAR,KAIAK,EAAAe,cAAAV,SAAAV,EAAA,IAAAJ,EACAS,EAAAgB,eAAAX,SAAAV,EAAA,IAAAJ,EAEAG,EAAAS,UAAAR,GACAK,EAAAiB,QAAAZ,SAAAV,EAAA,IAAAJ,EACAS,EAAAkB,QAAAb,SAAAV,EAAA,IAAAJ,EAEAS,EAAA9C,MAAAmD,SAAAX,EAAAQ,aAEAvG,KAAA0F,QAAAlC,KAAA6C,OApFA,CACAJ,EAAA,GAAA7G,GAAA8F,UACAe,EAAApG,KAAAqG,EAEA,GAAAH,EAAAS,UAAAR,IAEAC,EAAAW,MAAAF,SAAAV,EAAA,IACAC,EAAAY,OAAAH,SAAAV,EAAA,IACAD,EAAAS,UAAAR,IAGAwB,QAAAC,IAAA,0BAAAxB,EAAApG,KAAA,oIAEAoG,EAAAyB,OAAAtI,EAAAgG,MAAAuC,OAAA3B,EAAA,IAEAD,EAAAS,UAAAR,GACAC,EAAA2B,UAAAxI,EAAAgG,MAAAyC,cAAA7B,EAAA,IACAC,EAAA6B,UAAA1I,EAAAgG,MAAAyC,cAAA7B,EAAA,GAEA,IAAA+B,GAAAhC,EAAAQ,WACAN,GAAA+B,MAAA5I,EAAAgG,MAAA6C,YAAAC,YACAjC,EAAAkC,MAAA/I,EAAAgG,MAAA6C,YAAAC,YACA,KAAAH,EACA9B,EAAA+B,MAAA5I,EAAAgG,MAAA6C,YAAAG,OACA,KAAAL,EACA9B,EAAAkC,MAAA/I,EAAAgG,MAAA6C,YAAAG,OACA,MAAAL,IACA9B,EAAA+B,MAAA/B,EAAAkC,MAAA/I,EAAAgG,MAAA6C,YAAAG,QAEAnC,EAAAoC,eAAAlJ,KAAAmJ,YAAAC,UAAAjD,EAAAY,EAAAX,GAEAvF,KAAAyF,MAAAjC,KAAAyC,OAjCAA,GAAA,OA0FA7G,EAAAgG,MAAAnF,WACAuI,WAAA,SAAA3I,GAGA,IAAA,GADA6F,GAAA1F,KAAA0F,QACAjH,EAAA,EAAAP,EAAAwH,EAAA1G,OAAAd,EAAAO,EAAAA,IACA,GAAAiH,EAAAjH,GAAAoB,MAAAA,EAAA,MAAA6F,GAAAjH,EACA,OAAA,OAEAgK,QAAA,WAGA,IAAA,GADAhD,GAAAzF,KAAAyF,MACAhH,EAAA,EAAAP,EAAAuH,EAAAzG,OAAAd,EAAAO,EAAAA,IACAgH,EAAAhH,GAAA4J,eAAAK,SAAA,IAEAC,UAAA,SAAA1C,GAGA,IAAA,GADAP,GAAA1F,KAAA0F,QACAjH,EAAA,EAAAP,EAAAwH,EAAA1G,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA4H,GAAAX,EAAAjH,EACA4H,GAAAJ,MAAAA,IACAI,EAAA/H,EAAA+H,EAAAI,EAAAR,EAAAW,MACAP,EAAAS,EAAAT,EAAAM,EAAAV,EAAAY,OACAR,EAAAC,QAEAD,EAAAU,IAAAV,EAAAI,EAAAJ,EAAAQ,QAAAZ,EAAAW,MACAP,EAAAW,IAAAX,EAAAM,EAAAN,EAAAO,OAAAX,EAAAY,SAEAR,EAAAU,IAAAV,EAAAI,EAAAJ,EAAAO,OAAAX,EAAAW,MACAP,EAAAW,IAAAX,EAAAM,EAAAN,EAAAQ,QAAAZ,EAAAY,YAMAzH,EAAAgG,MAAAuC,QACAlH,MAAA,EACAmI,UAAA,EACAC,eAAA,EACAC,OAAA,EACAC,SAAA,EACAC,OAAA,EACAC,SAAA,GAGA7J,EAAAgG,MAAAyC,eACAqB,QAAA,EACAC,OAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,oBAAA,EACAC,oBAAA,EACAC,mBAAA,GAGApK,EAAAgG,MAAA6C,aACAwB,eAAA,EACAvB,YAAA,EACAE,OAAA,GAEAlJ,EAAAJ,QAAAM,EAAAgG,QJsUG9D,eAAe,GAAGoI,cAAc,EAAEC,gBAAgB,EAAEC,gBAAgB,IAAIC,GAAG,SAASrL,EAAQU,EAAOJ,GK1ftG,GAAAM,GAAAZ,EAAA,eACAY,GAAA0K,iBAAAtL,EAAA,sBACAY,EAAA2K,eAAAvL,EAAA,oBACAY,EAAA4K,sBAAAxL,EAAA,2BACAY,EAAA6K,sBAAAzL,EAAA,2BACAY,EAAA8K,sBAAA,SAAAC,GAEAnK,KAAAmK,MAAAA,GAEA/K,EAAA8K,sBAAAjK,WACAmK,oBAAA,SAAAC,EAAAxK,EAAAyK,GAEA,GAAAjE,GAAArG,KAAAmK,MAAA3B,WAAA8B,EACA,KAAAjE,EAAA,KAAA,8BAAAiE,EAAA,wBAAAzK,EAAA,GACA,IAAA0K,GAAA,GAAAnL,GAAA0K,iBAAAjK,EASA,OARA0K,GAAAlC,eAAAhC,EACAkE,EAAAC,OAAAnE,EAAA/H,EAAA+H,EAAAS,EAAAT,EAAAU,GAAAV,EAAAW,GAAAX,EAAAC,QACAiE,EAAAE,cAAApE,EAAAiB,QACAiD,EAAAG,cAAArE,EAAAkB,QACAgD,EAAAI,YAAAtE,EAAAO,MACA2D,EAAAK,aAAAvE,EAAAQ,OACA0D,EAAAM,oBAAAxE,EAAAe,cACAmD,EAAAO,qBAAAzE,EAAAgB,eACAkD,GAEAQ,kBAAA,SAAAV,EAAAxK,EAAAyK,GAEA,GAAAjE,GAAArG,KAAAmK,MAAA3B,WAAA8B,EACA,KAAAjE,EAAA,KAAA,8BAAAiE,EAAA,sBAAAzK,EAAA,GACA,IAAA0K,GAAA,GAAAnL,GAAA2K,eAAAlK,EAaA,OAZA0K,GAAAlC,eAAAhC,EACAkE,EAAAS,QAAA3E,EAAA/H,EACAiM,EAAAU,QAAA5E,EAAAS,EACAyD,EAAAW,SAAA7E,EAAAU,GACAwD,EAAAY,SAAA9E,EAAAW,GACAuD,EAAAa,aAAA/E,EAAAC,OACAiE,EAAAE,cAAApE,EAAAiB,QACAiD,EAAAG,cAAArE,EAAAkB,QACAgD,EAAAI,YAAAtE,EAAAO,MACA2D,EAAAK,aAAAvE,EAAAQ,OACA0D,EAAAM,oBAAAxE,EAAAe,cACAmD,EAAAO,qBAAAzE,EAAAgB,eACAkD,GAEAc,yBAAA,SAAAhB,EAAAxK,EAAAyK,GAEA,GAAAjE,GAAArG,KAAAmK,MAAA3B,WAAA8B,EACA,KAAAjE,EAAA,KAAA,8BAAAiE,EAAA,8BAAAzK,EAAA,GACA,IAAA0K,GAAA,GAAAnL,GAAA4K,sBAAAnK,EAaA,OAZA0K,GAAAlC,eAAAhC,EACAkE,EAAAS,QAAA3E,EAAA/H,EACAiM,EAAAU,QAAA5E,EAAAS,EACAyD,EAAAW,SAAA7E,EAAAU,GACAwD,EAAAY,SAAA9E,EAAAW,GACAuD,EAAAa,aAAA/E,EAAAC,OACAiE,EAAAE,cAAApE,EAAAiB,QACAiD,EAAAG,cAAArE,EAAAkB,QACAgD,EAAAI,YAAAtE,EAAAO,MACA2D,EAAAK,aAAAvE,EAAAQ,OACA0D,EAAAM,oBAAAxE,EAAAe,cACAmD,EAAAO,qBAAAzE,EAAAgB,eACAkD,GAEAe,yBAAA,SAAAjB,EAAAxK,GAEA,MAAA,IAAAT,GAAA6K,sBAAApK,KAGAX,EAAAJ,QAAAM,EAAA8K,wBL8fG5I,eAAe,GAAGiK,0BAA0B,GAAGC,mBAAmB,GAAGC,qBAAqB,GAAGC,0BAA0B,KAAKC,GAAG,SAASnN,EAAQU,EAAOJ,GMlkB1J,GAAAM,GAAAZ,EAAA,eACAY,GAAA8F,UAAA,aAEA9F,EAAA8F,UAAAjF,WACAJ,KAAA,KACA6H,OAAA,KACAE,UAAA,KACAE,UAAA,KACAE,MAAA,KACAG,MAAA,KACAE,eAAA,KACAzB,MAAA,EACAC,OAAA,GAEA3H,EAAAJ,QAAAM,EAAA8F,YNskBG5D,eAAe,KAAKsK,GAAG,SAASpN,EAAQU,EAAOJ,GOplBlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA6F,YAAA,SAAA4G,GAEA7L,KAAA8L,MAAAD,EAAAE,MAAA,eAEA3M,EAAA6F,YAAAhF,WACAsD,MAAA,EACA6C,KAAA,SAAA4F,GAEA,MAAAA,GAAAC,QAAA,aAAA,KAEA9F,SAAA,WAEA,MAAAnG,MAAAuD,OAAAvD,KAAA8L,MAAA9M,OAAA,KACAgB,KAAA8L,MAAA9L,KAAAuD,UAEAgD,UAAA,WAEA,GAAAL,GAAAlG,KAAAmG,WACA+F,EAAAhG,EAAAiG,QAAA,IACA,IAAA,IAAAD,EAAA,KAAA,iBAAAhG,CACA,OAAAlG,MAAAoG,KAAAF,EAAAkG,UAAAF,EAAA,KAGA1F,UAAA,SAAAR,GAEA,GAAAE,GAAAlG,KAAAmG,WACA+F,EAAAhG,EAAAiG,QAAA,IACA,IAAA,IAAAD,EAAA,KAAA,iBAAAhG,CAEA,KADA,GAAAzH,GAAA,EAAA4N,EAAAH,EAAA,EACA,EAAAzN,EAAAA,IACA,CACA,GAAA6N,GAAApG,EAAAiG,QAAA,IAAAE,EACA,IAAA,IAAAC,EAAA,KACAtG,GAAAvH,GAAAuB,KAAAoG,KAAAF,EAAAqG,OAAAF,EAAAC,EAAAD,IACAA,EAAAC,EAAA,EAGA,MADAtG,GAAAvH,GAAAuB,KAAAoG,KAAAF,EAAAkG,UAAAC,IACA5N,EAAA,IAGAS,EAAAJ,QAAAM,EAAA6F,cPwlBG3D,eAAe,KAAKkL,GAAG,SAAShO,EAAQU,EAAOJ,GQjoBlD,GAAAM,GAAAZ,EAAA,eACAY,GAAA+F,YAAA,aAEA/F,EAAA+F,YAAAlF,WACAgG,KAAA,KACApG,KAAA,KACA4G,EAAA,EAAAE,EAAA,EACAC,MAAA,EAAAC,OAAA,EACAvI,EAAA,EAAAwI,EAAA,EAAAC,GAAA,EAAAC,GAAA,EACAM,QAAA,EAAAC,QAAA,EACAH,cAAA,EAAAC,eAAA,EACA9D,MAAA,EACA+C,QAAA,EACAY,OAAA,KACAC,KAAA,MAEAjI,EAAAJ,QAAAM,EAAA+F,cRqoBG7D,eAAe,KAAKmL,IAAI,SAASjO,EAAQU,EAAOJ,GSrpBnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAsN,OAAAlO,EAAA,YACAY,EAAAQ,UAAApB,EAAA,eACAY,EAAAuN,mBAAA,SAAAC,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA4N,EACA5M,KAAA+M,mBACA/M,KAAA+M,gBAAA/N,OAAA4N,GAEAxN,EAAAuN,mBAAA1M,WACA+M,UAAA,EACAC,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,QAEAkO,SAAA,SAAAC,EAAA9M,EAAA+M,GAEApN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA+M,gBAAAI,GAAAC,GAEAlN,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,IAAAzM,EAAAyM,EAAA,GAGA,YADA1M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAkN,OAAAC,UAAA,KAAA,GAEAnN,GAAAC,IACAD,EAAA,GAEA,IAAA+M,GAAA9M,GAAAyM,EAAAA,EAAA9N,OAAA,GAAA8N,EAAA9N,OAAA,EAAAI,EAAAQ,UAAAuB,cAAA2L,EAAAzM,GAAA,CACA,MAAAyM,EAAAK,GAAA/M,GAAA,CAEA,GAAAgN,GAAApN,KAAA+M,gBAAAI,EACAhN,GAAAqN,MAAAxN,KAAAgN,WAAAS,cACAL,EAAAjN,EAAAuN,yBAAA1N,KAAAgN,UAAAI,GAAA,SAGAlO,EAAAJ,QAAAM,EAAAuN,qBTypBGrL,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKC,IAAI,SAASrP,EAAQU,EAAOJ,GUjsBjF,GAAAM,GAAAZ,EAAA,eACAY,GAAA0O,gBACAzH,OAAA,EACA0H,YAAA,EACAC,KAAA,EACAC,YAAA,GAEA/O,EAAAJ,QAAAM,EAAA0O,iBVqsBGxM,eAAe,KAAK4M,IAAI,SAAS1P,EAAQU,EAAOJ,GW5sBnD,GAAAM,GAAAZ,EAAA,eACAY,GAAA+O,KAAA,SAAAC,EAAAjO,EAAAkO,GAEArO,KAAA2B,KAAAyM,EACApO,KAAAG,SAAAA,EACAH,KAAAqO,OAAAA,EACArO,KAAAsO,kBAEAlP,EAAA+O,KAAAI,OAAA,EACAnP,EAAA+O,KAAAlO,WACAwG,EAAA,EAAAE,EAAA,EACA6H,SAAA,EAAAC,WAAA,EACAC,OAAA,EAAAC,OAAA,EACAC,OAAA,EAAAC,OAAA,EACAC,IAAA,EAAAC,IAAA,EAAAC,OAAA,EACAC,IAAA,EAAAC,IAAA,EAAAC,OAAA,EACAC,cAAA,EACAC,YAAA,EAAAC,YAAA,EACAC,YAAA,EAAAC,YAAA,EACAC,qBAAA,WAEA,GAAApB,GAAArO,KAAAqO,MACA,IAAAA,EAEArO,KAAAgP,OAAAhP,KAAAyG,EAAA4H,EAAAS,IAAA9O,KAAA2G,EAAA0H,EAAAU,IAAAV,EAAAW,OACAhP,KAAAmP,OAAAnP,KAAAyG,EAAA4H,EAAAY,IAAAjP,KAAA2G,EAAA0H,EAAAa,IAAAb,EAAAc,OACAnP,KAAA2B,KAAA+N,cAEA1P,KAAAqP,YAAAhB,EAAAgB,YAAArP,KAAA0O,OACA1O,KAAAsP,YAAAjB,EAAAiB,YAAAtP,KAAA2O,SAEA3O,KAAAqP,YAAArP,KAAA0O,OACA1O,KAAAsP,YAAAtP,KAAA2O,QAEA3O,KAAAoP,cAAApP,KAAA2B,KAAAgO,gBAAAtB,EAAAe,cAAApP,KAAAyO,WAAAzO,KAAAyO,WACAzO,KAAAuP,WAAAlB,EAAAkB,YAAAvP,KAAA4O,MACA5O,KAAAwP,WAAAnB,EAAAmB,YAAAxP,KAAA6O,UACA,CACA,GAAAe,GAAA5P,KAAAG,SAAAyO,MAAAiB,EAAA7P,KAAAG,SAAA0O,KACA7O,MAAAgP,OAAAY,GAAA5P,KAAAyG,EAAAzG,KAAAyG,EACAzG,KAAAmP,OAAAU,GAAAzQ,EAAA+O,KAAAI,OAAAvO,KAAA2G,EAAA3G,KAAA2G,EACA3G,KAAAqP,YAAArP,KAAA0O,OACA1O,KAAAsP,YAAAtP,KAAA2O,OACA3O,KAAAoP,cAAApP,KAAAyO,WACAzO,KAAAuP,WAAAK,GAAA5P,KAAA4O,MACA5O,KAAAwP,WAAAK,GAAA7P,KAAA6O,MAEA,GAAAiB,GAAA9P,KAAAoP,cAAAhQ,EAAA2Q,OACAC,EAAAhP,KAAAgP,IAAAF,GACAG,EAAAjP,KAAAiP,IAAAH,EACA9P,MAAAuP,YAEAvP,KAAA8O,KAAAkB,EAAAhQ,KAAAqP,YACArP,KAAA+O,IAAAkB,EAAAjQ,KAAAsP,cAEAtP,KAAA8O,IAAAkB,EAAAhQ,KAAAqP,YACArP,KAAA+O,KAAAkB,EAAAjQ,KAAAsP,aAEAtP,KAAAwP,YAAApQ,EAAA+O,KAAAI,OAEAvO,KAAAiP,KAAAgB,EAAAjQ,KAAAqP,YACArP,KAAAkP,KAAAc,EAAAhQ,KAAAsP,cAEAtP,KAAAiP,IAAAgB,EAAAjQ,KAAAqP,YACArP,KAAAkP,IAAAc,EAAAhQ,KAAAsP,cAGAhB,eAAA,WAEA,GAAA3M,GAAA3B,KAAA2B,IACA3B,MAAAyG,EAAA9E,EAAA8E,EACAzG,KAAA2G,EAAAhF,EAAAgF,EACA3G,KAAAwO,SAAA7M,EAAA6M,SACAxO,KAAAyO,WAAAzO,KAAAwO,SACAxO,KAAA0O,OAAA/M,EAAA+M,OACA1O,KAAA2O,OAAAhN,EAAAgN,OACA3O,KAAA4O,MAAAjN,EAAAiN,MACA5O,KAAA6O,MAAAlN,EAAAkN,OAEAqB,aAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAA,GAAAnQ,KAAAgP,OAAAqB,EAAAF,EAAA,GAAAnQ,KAAAmP,OACAL,EAAA9O,KAAA8O,IAAAG,EAAAjP,KAAAiP,IAAAF,EAAA/O,KAAA+O,IAAAG,EAAAlP,KAAAkP,GACAlP,MAAAuP,aAAAvP,KAAAwP,YAAApQ,EAAA+O,KAAAI,SAEAO,GAAAA,EACAI,GAAAA,EAEA,IAAAoB,GAAA,GAAAxB,EAAAI,EAAAH,EAAAE,EACAkB,GAAA,GAAAC,EAAAtB,EAAAwB,EAAAD,EAAAtB,EAAAuB,EACAH,EAAA,GAAAE,EAAAnB,EAAAoB,EAAAF,EAAAnB,EAAAqB,GAEAC,aAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAA,GAAAE,EAAAF,EAAA,EACAA,GAAA,GAAAC,EAAAzQ,KAAA8O,IAAA4B,EAAA1Q,KAAA+O,IAAA/O,KAAAgP,OACAwB,EAAA,GAAAC,EAAAzQ,KAAAiP,IAAAyB,EAAA1Q,KAAAkP,IAAAlP,KAAAmP,SAGAjQ,EAAAJ,QAAAM,EAAA+O,OXgtBG7M,eAAe,KAAKqP,IAAI,SAASnS,EAAQU,EAAOJ,GYnzBnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAwR,SAAA,SAAA/Q,EAAAwO,GAEArO,KAAAH,KAAAA,EACAG,KAAAqO,OAAAA,GAEAjP,EAAAwR,SAAA3Q,WACAjB,OAAA,EACAyH,EAAA,EAAAE,EAAA,EACA6H,SAAA,EACAE,OAAA,EAAAC,OAAA,EACAe,cAAA,EACAC,iBAAA,EACAf,OAAA,EAAAC,OAAA,GAEA3P,EAAAJ,QAAAM,EAAAwR,WZuzBGtP,eAAe,KAAKuP,IAAI,SAASrS,EAAQU,EAAOJ,Gat0BnD,GAAAM,GAAAZ,EAAA,eACAY,GAAA0O,eAAAtP,EAAA,oBACAY,EAAA6K,sBAAA,SAAApK,GAEAG,KAAAH,KAAAA,EACAG,KAAA8Q,aAEA1R,EAAA6K,sBAAAhK,WACA8Q,KAAA3R,EAAA0O,eAAAC,YACAiD,qBAAA,SAAAvK,EAAAE,EAAAsK,EAAAC,GAEAzK,GAAAwK,EAAAjC,OACArI,GAAAsK,EAAA9B,MAGA,KAAA,GAFAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACA4B,EAAA9Q,KAAA8Q,SACArS,EAAA,EAAAP,EAAA4S,EAAA9R,OAAAd,EAAAO,EAAAA,GAAA,EACA,CACA,GAAA0S,GAAAL,EAAArS,GACA2S,EAAAN,EAAArS,EAAA,EACAyS,GAAAzS,GAAA0S,EAAArC,EAAAsC,EAAArC,EAAAtI,EACAyK,EAAAzS,EAAA,GAAA0S,EAAAlC,EAAAmC,EAAAlC,EAAAvI,KAIAzH,EAAAJ,QAAAM,EAAA6K,wBb00BG3I,eAAe,GAAG+P,mBAAmB,KAAKC,IAAI,SAAS9S,EAAQU,EAAOJ,Gcl2BzE,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAAmS,cAAA,SAAA3E,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAAmS,cAAAtR,WACA+M,UAAA,EACAC,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAlC,EAAAqT,EAAAC,EAAAlT,GAEA4O,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAAhP,EACA6B,KAAA8M,OAAAK,EAAA,GAAAqE,EACAxR,KAAA8M,OAAAK,EAAA,GAAAsE,EACAzR,KAAA8M,OAAAK,EAAA,GAAA5O,GAEA2B,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAA3O,GAAAqT,EAAAC,EAAAlT,CACA,IAAA8B,GAAAyM,EAAAA,EAAA9N,OAAA,GACA,CAEA,GAAAP,GAAAqO,EAAA9N,OAAA,CACAb,GAAA2O,EAAArO,EAAA,GACA+S,EAAA1E,EAAArO,EAAA,GACAgT,EAAA3E,EAAArO,EAAA,GACAF,EAAAuO,EAAArO,OACA,CAEA,GAAA0O,GAAA/N,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,GACAqR,EAAA5E,EAAAK,EAAA,GACAwE,EAAA7E,EAAAK,EAAA,GACAyE,EAAA9E,EAAAK,EAAA,GACA0E,EAAA/E,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEA5T,EAAAuT,GAAA5E,EAAAK,EAAA,GAAAuE,GAAAK,EACAP,EAAAG,GAAA7E,EAAAK,EAAA,GAAAwE,GAAAI,EACAN,EAAAG,GAAA9E,EAAAK,EAAA,GAAAyE,GAAAG,EACAxT,EAAAsT,GAAA/E,EAAAK,EAAA,GAAA0E,GAAAE,EAEA,GAAAE,GAAA9R,EAAAqN,MAAAxN,KAAAgN,UACA,GAAAvM,GAEAwR,EAAA9T,IAAAA,EAAA8T,EAAA9T,GAAAsC,EACAwR,EAAAT,IAAAA,EAAAS,EAAAT,GAAA/Q,EACAwR,EAAAR,IAAAA,EAAAQ,EAAAR,GAAAhR,EACAwR,EAAA1T,IAAAA,EAAA0T,EAAA1T,GAAAkC,IAEAwR,EAAA9T,EAAAA,EACA8T,EAAAT,EAAAA,EACAS,EAAAR,EAAAA,EACAQ,EAAA1T,EAAAA,MAIAW,EAAAJ,QAAAM,EAAAmS,gBds2BGjQ,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKsE,IAAI,SAAS1T,EAAQU,EAAOJ,Ge36BjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAsN,OAAA,SAAAE,GAEA5M,KAAA6M,WAGAzN,EAAAsN,OAAAzM,WACAkS,UAAA,SAAAhF,GAEAnN,KAAA6M,OAAA,GAAAM,GAAA,GAEAiF,WAAA,SAAAjF,GAEAnN,KAAA6M,OAAA,GAAAM,GAAA,GAKAkF,SAAA,SAAAlF,EAAAmF,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,GAAA,GAAAC,EAAAD,EAAAA,EAAAE,EAAAD,EAAAD,EACAG,EAAA,EAAAH,EAAAI,EAAA,EAAAH,EAAAI,EAAA,EAAAJ,EAAAK,EAAA,EAAAJ,EACAK,EAAA,GAAAX,EAAAE,EAAAU,EAAA,GAAAX,EAAAE,EAAAU,EAAA,GAAAb,EAAAE,GAAA,EAAAY,EAAA,GAAAb,EAAAE,GAAA,EACAY,EAAAf,EAAAO,EAAAI,EAAAH,EAAAK,EAAAP,EAAAU,EAAAf,EAAAM,EAAAK,EAAAJ,EAAAM,EAAAR,EACAW,EAAAN,EAAAF,EAAAI,EAAAH,EAAAQ,EAAAN,EAAAH,EAAAK,EAAAJ,EACAS,EAAAN,EAAAH,EAAAU,EAAAN,EAAAJ,EAEAvU,EAAA,GAAA0O,EACAN,EAAA7M,KAAA6M,MACAA,GAAApO,KAAA,CAGA,KAAA,GADAgI,GAAA4M,EAAA1M,EAAA2M,EACApV,EAAAO,EAAA,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAoO,EAAApO,GAAAgI,EACAoG,EAAApO,EAAA,GAAAkI,EACA0M,GAAAE,EACAD,GAAAE,EACAD,GAAAE,EACAD,GAAAE,EACAjN,GAAA4M,EACA1M,GAAA2M,GAGAtB,gBAAA,SAAA7E,EAAA4E,GAEAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAA,EAAAA,CACA,IAAAlF,GAAA7M,KAAA6M,OACApO,EAAA,GAAA0O,EACA4D,EAAAlE,EAAApO,EACA,IAAA,IAAAsS,EAAA,MAAAgB,EACA,IAAA,GAAAhB,EAAA,MAAA,EACAtS,IAEA,KAAA,GADAgI,GAAA,EACAkN,EAAAlV,EAAAP,EAAAO,EAAA,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAGA,GADAgI,EAAAoG,EAAApO,GACAgI,GAAAsL,EACA,CACA,GAAA6B,GAAAC,CASA,OARApV,IAAAkV,GAEAC,EAAA,EACAC,EAAA,IAEAD,EAAA/G,EAAApO,EAAA,GACAoV,EAAAhH,EAAApO,EAAA,IAEAoV,GAAAhH,EAAApO,EAAA,GAAAoV,IAAA9B,EAAA6B,IAAAnN,EAAAmN,GAGA,GAAAjN,GAAAkG,EAAApO,EAAA,EACA,OAAAkI,IAAA,EAAAA,IAAAoL,EAAAtL,IAAA,EAAAA,KAGAvH,EAAAJ,QAAAM,EAAAsN,Sf+6BGpL,eAAe,KAAKwS,IAAI,SAAStV,EAAQU,EAAOJ,GgB1/BnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAA2U,kBAAA,SAAAnH,GAEA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA4N,EACA5M,KAAAgU,cACAhU,KAAAgU,WAAAhV,OAAA4N,GAEAxN,EAAA2U,kBAAA9T,WACAgN,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,QAEAkO,SAAA,SAAAC,EAAA9M,EAAA4T,GAEAjU,KAAA8M,OAAAK,GAAA9M,EACAL,KAAAgU,WAAA7G,GAAA8G,GAEA/T,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAK,EAEAA,GADA9M,GAAAyM,EAAAA,EAAA9N,OAAA,GACA8N,EAAA9N,OAAA,EAEAI,EAAAQ,UAAAuB,cAAA2L,EAAAzM,GAAA,CAEA,IAAA4T,GAAA9T,EAAA8T,UAEAC,GADA/T,EAAAqN,MACAxN,KAAAgU,WAAA7G,GACA,IAAA+G,EAEA,IAAA,GAAAzV,GAAA,EAAAP,EAAAgW,EAAAlV,OAAAd,EAAAO,EAAAA,IAEAwV,EAAAxV,GAAAyV,EAAAzV,MAMAS,EAAAJ,QAAAM,EAAA2U,oBhB8/BGzS,eAAe,GAAGqM,cAAc,IAAIwG,IAAI,SAAS3V,EAAQU,EAAOJ,GiBziCnE,GAAAM,GAAAZ,EAAA,eACAY,GAAAgV,MAAA,SAAAzS,GAEA3B,KAAA2B,KAAAA,GAEAvC,EAAAgV,MAAAnU,WACAoU,SAAA,EACAC,WAAA,EACAC,YAAA,MAEArV,EAAAJ,QAAAM,EAAAgV,QjB6iCG9S,eAAe,KAAKkT,IAAI,SAAShW,EAAQU,EAAOJ,GkBvjCnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAqV,UAAA,SAAA5U,GAEAG,KAAAH,KAAAA,GAEAT,EAAAqV,UAAAxU,WACAoU,SAAA,EACAC,WAAA,EACAC,YAAA,MAEArV,EAAAJ,QAAAM,EAAAqV,YlB2jCGnT,eAAe,KAAKoT,IAAI,SAASlW,EAAQU,EAAOJ,GmBrkCnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAuV,cAAA,SAAA/H,GAEA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA4N,EACA5M,KAAAO,UACAP,KAAAO,OAAAvB,OAAA4N,GAEAxN,EAAAuV,cAAA1U,WACAgN,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,QAEAkO,SAAA,SAAAC,EAAA9M,EAAA6C,GAEAlD,KAAA8M,OAAAK,GAAA9M,EACAL,KAAAO,OAAA4M,GAAAjK,GAGAhD,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAA4M,EAAA,CAEA,GAAAP,GAAA9M,KAAA8M,OACAF,EAAAE,EAAA9N,MAEA,IAAAoB,EAAAC,EAEAL,KAAAE,MAAAC,EAAAC,EAAAkN,OAAAC,UAAAF,EAAA5M,GACAL,EAAA,OACA,IAAAA,GAAA0M,EAAAF,EAAA,GACA,MACA,MAAAvM,EAAAyM,EAAA,IAAA,CAEA,GAAAK,EACA,IAAA/M,EAAA0M,EAAA,GACAK,EAAA,MAEA,CACAA,EAAA/N,EAAAQ,UAAAuB,cAAA2L,EAAA1M,EAEA,KADA,GAAAwU,GAAA9H,EAAAK,GACAA,EAAA,GAEAL,EAAAK,EAAA,IAAAyH,GACAzH,IAIA,IADA,GAAA5M,GAAAP,KAAAO,OACAqM,EAAAO,GAAA9M,GAAAyM,EAAAK,GAAAA,IACAE,EAAA7J,KAAAjD,EAAA4M,QAGAjO,EAAAJ,QAAAM,EAAAuV,gBnBykCGrT,eAAe,GAAGqM,cAAc,IAAIkH,IAAI,SAASrW,EAAQU,EAAOJ,GoB9nCnE,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAA0V,YAAA,SAAAlI,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA4N,EACA5M,KAAA+U,iBACA/U,KAAA+U,cAAA/V,OAAA4N,GAEAxN,EAAA0V,YAAA7U,WACA+M,UAAA,EACAzC,WAAA,EACA0C,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,QAEAkO,SAAA,SAAAC,EAAA9M,EAAAyQ,GAEA9Q,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA+U,cAAA5H,GAAA2D,GAEA5Q,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAwR,GAAA9R,EAAAqN,MAAAxN,KAAAgN,UACA,IAAAiF,EAAA1H,YAAAvK,KAAAuK,WAAA,CAEA,GAAAuC,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAiI,GAAA/U,KAAA+U,cACAC,EAAAD,EAAA,GAAA/V,OAEA8R,EAAAmB,EAAAgD,kBACA,IAAAnE,EAAA9R,QAAAgW,EAAA,CACAlE,EAAAmB,EAAAgD,qBACA,KAAA,GAAAC,GAAA,EAAAF,EAAAE,EAAAA,IAAApE,EAAAtN,KAAA,EAEA/C,GAAA,EAGA,GAAAJ,GAAAyM,EAAAA,EAAA9N,OAAA,GAAA,CAEA,GAAAmW,GAAAJ,EAAAjI,EAAA9N,OAAA,EACA,IAAA,EAAAyB,EAEA,IAAA,GAAAhC,GAAA,EAAAuW,EAAAvW,EAAAA,IACAqS,EAAArS,KAAA0W,EAAA1W,GAAAqS,EAAArS,IAAAgC,MAEA,KAAA,GAAAhC,GAAA,EAAAuW,EAAAvW,EAAAA,IACAqS,EAAArS,GAAA0W,EAAA1W,OATA,CAeA,GAAA0O,GAAA/N,EAAAQ,UAAAuB,cAAA2L,EAAAzM,GACAyR,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAAA,EAAAA,EAAA,EAAA,EAAAA,EAEA,IAAAqD,GAAAL,EAAA5H,EAAA,GACAkI,EAAAN,EAAA5H,EAEA,IAAA,EAAA1M,EAEA,IAAA,GAAAhC,GAAA,EAAAuW,EAAAvW,EAAAA,IACA,CACA,GAAA6W,GAAAF,EAAA3W,EACAqS,GAAArS,KAAA6W,GAAAD,EAAA5W,GAAA6W,GAAAvD,EAAAjB,EAAArS,IAAAgC,MAGA,KAAA,GAAAhC,GAAA,EAAAuW,EAAAvW,EAAAA,IACA,CACA,GAAA6W,GAAAF,EAAA3W,EACAqS,GAAArS,GAAA6W,GAAAD,EAAA5W,GAAA6W,GAAAvD,QAKA7S,EAAAJ,QAAAM,EAAA0V,cpBkoCGxT,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAK2H,IAAI,SAAS/W,EAAQU,EAAOJ,GqBntCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAAoW,cAAA,SAAA5I,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAAoW,cAAAvV,WACAwV,UAAA,EACAxI,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAqV,GAEAvI,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAAuI,EAAA,EAAA,GAEAxV,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,IAAAzM,EAAAyM,EAAA,GAGA,YADA1M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAkN,OAAAC,UAAA,KAAA,GAEAnN,GAAAC,IACAD,EAAA,GACA,IAAA+M,IAAA9M,GAAAyM,EAAAA,EAAA9N,OAAA,GAAA8N,EAAA9N,OAAAI,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,IAAA,CACAyM,GAAAK,GAAA/M,IACAD,EAAAwV,MAAA3V,KAAAyV,WAAA7G,MAAA,GAAA9B,EAAAK,EAAA,MAGAjO,EAAAJ,QAAAM,EAAAoW,gBrButCGlU,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKgI,IAAI,SAASpX,EAAQU,EAAOJ,GsB1vCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAAyW,cAAA,SAAAjJ,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAAyW,cAAA5V,WACAwV,UAAA,EACAxI,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAqV,GAEAvI,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAAuI,EAAA,EAAA,GAEAxV,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,IAAAzM,EAAAyM,EAAA,GAGA,YADA1M,EAAAC,GAAAL,KAAAE,MAAAC,EAAAC,EAAAkN,OAAAC,UAAA,KAAA,GAEAnN,GAAAC,IACAD,EAAA,GACA,IAAA+M,IAAA9M,GAAAyM,EAAAA,EAAA9N,OAAA,GAAA8N,EAAA9N,OAAAI,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,IAAA,CACAyM,GAAAK,GAAA/M,IACAD,EAAAwV,MAAA3V,KAAAyV,WAAA5G,MAAA,GAAA/B,EAAAK,EAAA,MAGAjO,EAAAJ,QAAAM,EAAAyW,gBtB8vCGvU,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKkI,IAAI,SAAStX,EAAQU,EAAOJ,GuBjyCjF,GAAAM,GAAAZ,EAAA,eACAY,GAAA2W,aAAA,SAAApU,EAAAxB,GAEAH,KAAA2B,KAAAA,EACA3B,KAAAQ,IAAAmB,EAAAnB,IACAR,KAAAgW,cAAArU,EAAAqU,cAEAhW,KAAA2V,QACA,KAAA,GAAAlX,GAAA,EAAAP,EAAAyD,EAAAgU,MAAA3W,OAAAd,EAAAO,EAAAA,IACAuB,KAAA2V,MAAAnS,KAAArD,EAAA8V,SAAAtU,EAAAgU,MAAAlX,GAAAoB,MACAG,MAAAY,OAAAT,EAAA8V,SAAAtU,EAAAf,OAAAf,OAEAT,EAAA2W,aAAA9V,WACAC,MAAA,WAEA,GAAAU,GAAAZ,KAAAY,OACA+U,EAAA3V,KAAA2V,KACA,QAAAA,EAAA3W,QAEA,IAAA,GACAI,EAAA2W,aAAAG,OAAAP,EAAA,GAAA/U,EAAAoO,OAAApO,EAAAuO,OAAAnP,KAAAQ,IACA,MACA,KAAA,GACApB,EAAA2W,aAAAI,OAAAR,EAAA,GAAAA,EAAA,GAAA/U,EAAAoO,OAAApO,EAAAuO,OAAAnP,KAAAgW,cAAAhW,KAAAQ,QAOApB,EAAA2W,aAAAG,OAAA,SAAAjF,EAAAmF,EAAAC,EAAA5V,GAEA,GAAA6V,GAAArF,EAAAtP,KAAAgO,iBAAAsB,EAAA5C,OAAA4C,EAAA5C,OAAAe,cAAA,EACAZ,EAAAyC,EAAAzC,SAEAC,GAAArP,EAAA+O,KAAAI,OAAAnP,EAAAmX,OAAAnX,EAAAmX,QAAAvV,KAAAwV,MAAAH,EAAApF,EAAA9B,OAAAiH,EAAAnF,EAAAjC,QAAAsH,CACArF,GAAAxC,WAAAD,GAAAC,EAAAD,GAAA/N,GAKArB,EAAA2W,aAAAI,OAAA,SAAA9H,EAAAoI,EAAAL,EAAAC,EAAAL,EAAAvV,GAEA,GAAAiW,GAAAD,EAAAjI,SAAA8H,EAAAjI,EAAAG,QACA,KAAA/N,EAIA,MAFAgW,GAAAhI,WAAAiI,OACArI,EAAAI,WAAA6H,EAGA,IAAAK,GAAAC,EAAAC,EAAAzX,EAAA0X,KACAC,EAAA1I,EAAAA,MACA0I,IAEAF,EAAA,GAAAT,EACAS,EAAA,GAAAR,EACAU,EAAA7G,aAAA2G,GACAT,GAAAS,EAAA,GAAAxI,EAAA5H,GAAAsQ,EAAA1H,YACAgH,GAAAQ,EAAA,GAAAxI,EAAA1H,GAAAoQ,EAAAzH,cAEA8G,GAAA/H,EAAA5H,EACA4P,GAAAhI,EAAA1H,GAEA8P,EAAApI,QAAAA,GAEAsI,EAAAF,EAAAhQ,EACAmQ,EAAAH,EAAA9P,IAEAkQ,EAAA,GAAAJ,EAAAhQ,EACAoQ,EAAA,GAAAJ,EAAA9P,EACA8P,EAAApI,OAAAkC,aAAAsG,GACAxI,EAAA6B,aAAA2G,GACAF,EAAAE,EAAA,GACAD,EAAAC,EAAA,GAEA,IAAAG,GAAAL,EAAAtI,EAAAgB,YAAA4H,EAAAL,EAAAvI,EAAAiB,YACA4H,EAAAlW,KAAAwV,MAAAS,EAAAD,GACAG,EAAAnW,KAAAoW,KAAAJ,EAAAA,EAAAC,EAAAA,GAAAI,EAAAZ,EAAA9U,KAAA3C,OAAAyX,EAAApH,YAEAiI,EAAA,EAAAH,EAAAE,CACA,IAAA,KAAAC,EAGA,YADAb,EAAAhI,WAAAiI,GAAA1V,KAAAwV,MAAAH,EAAAD,GAAAhX,EAAAmX,OAAAD,EAAAI,GAAAjW,EAGA,IAAAuP,IAAAoG,EAAAA,EAAAC,EAAAA,EAAAc,EAAAA,EAAAE,EAAAA,GAAAC,CACA,IAAAtH,EACAA,EAAA,GACAA,EAAA,IACAA,EAAA,EACA,IAAAuH,GAAAvW,KAAAwW,KAAAxH,GAAAgG,EACAyB,EAAAN,EAAAE,EAAArH,EAAA0H,EAAAL,EAAArW,KAAAiP,IAAAsH,GACAI,EAAA3W,KAAAwV,MAAAH,EAAAoB,EAAArB,EAAAsB,EAAAtB,EAAAqB,EAAApB,EAAAqB,GACAlJ,GAAAmJ,EAAAT,GAAA9X,EAAAmX,OAAAD,CACA9H,GAAA,IACAA,GAAA,IACA,KAAAA,IACAA,GAAA,KACAH,EAAAI,WAAA6H,EAAA9H,EAAA/N,EACA+N,GAAA+I,EAAAL,GAAA9X,EAAAmX,OAAAG,EACAlI,EAAA,IACAA,GAAA,IACA,KAAAA,IACAA,GAAA,KACAiI,EAAAhI,WAAAiI,GAAAlI,EAAAH,EAAAe,cAAAqH,EAAApI,OAAAe,eAAA3O,GAEAvB,EAAAJ,QAAAM,EAAA2W,evBqyCGzU,eAAe,KAAKsW,IAAI,SAASpZ,EAAQU,EAAOJ,GwB/4CnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAAyY,iBAAA,SAAAhY,GAEAG,KAAAH,KAAAA,EACAG,KAAA2V,UAEAvW,EAAAyY,iBAAA5X,WACAW,OAAA,KACAoV,cAAA,EACAxV,IAAA,GAEAtB,EAAAJ,QAAAM,EAAAyY,mBxBm5CGvW,eAAe,KAAKwW,IAAI,SAAStZ,EAAQU,EAAOJ,GyB95CnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAA2Y,qBAAA,SAAAnL,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAA2Y,qBAAA9X,WACA+X,kBAAA,EACA/K,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAG,EAAAwV,GAEA7I,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAA3M,EACAR,KAAA8M,OAAAK,EAAA,GAAA6I,GAEA9V,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAmL,GAAA9X,EAAA+X,cAAAlY,KAAAgY,kBAEA,IAAA3X,GAAAyM,EAAAA,EAAA9N,OAAA,GAIA,MAFAiZ,GAAAzX,MAAAsM,EAAAA,EAAA9N,OAAA,GAAAiZ,EAAAzX,KAAAC,OACAwX,EAAAjC,cAAAlJ,EAAAA,EAAA9N,OAAA,GAKA,IAAAmO,GAAA/N,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,GACA8X,EAAArL,EAAAK,EAAA,IACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAEA,IAAAvR,GAAA2X,GAAArL,EAAAK,EAAA,GAAAgL,GAAApG,CACAkG,GAAAzX,MAAAA,EAAAyX,EAAAzX,KAAAC,EACAwX,EAAAjC,cAAAlJ,EAAAK,EAAA,OAGAjO,EAAAJ,QAAAM,EAAA2Y,uBzBk6CGzW,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKwK,IAAI,SAAS5Z,EAAQU,EAAOJ,G0Bl9CjF,GAAAM,GAAAZ,EAAA,mBACAY,GAAA0O,eAAAtP,EAAA,oBACAY,EAAA2K,eAAA,SAAAlK,GAEAG,KAAAH,KAAAA,GAEAT,EAAA2K,eAAA9J,WACA8Q,KAAA3R,EAAA0O,eAAAE,KACA8C,SAAA,KACAuH,IAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,EACAra,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACA+L,KAAA,KACAjC,eAAA,KACA2C,QAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,cAAA,EACAX,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACA2N,MAAA,KACA7R,MAAA,EAAAC,OAAA,EACA8B,UAAA,WAEA,GAAA/B,GAAA5G,KAAAkL,SAAAlL,KAAAgL,QAAAnE,EAAA7G,KAAAmL,SAAAnL,KAAAiL,QACA/M,EAAA8B,KAAAsY,UAAAtZ,MAKA,IAJAgB,KAAAqY,KAAArY,KAAAqY,IAAArZ,QAAAd,IAEA8B,KAAAqY,IAAA,GAAAjZ,GAAAsZ,aAAAxa,IAEA8B,KAAAoL,aAEA,IAAA,GAAA3M,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAqY,IAAA5Z,GAAAuB,KAAAgL,QAAAhL,KAAAsY,UAAA7Z,EAAA,GAAAmI,EACA5G,KAAAqY,IAAA5Z,EAAA,GAAAuB,KAAAiL,QAAApE,EAAA7G,KAAAsY,UAAA7Z,GAAAoI,MAGA,KAAA,GAAApI,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAqY,IAAA5Z,GAAAuB,KAAAgL,QAAAhL,KAAAsY,UAAA7Z,GAAAmI,EACA5G,KAAAqY,IAAA5Z,EAAA,GAAAuB,KAAAiL,QAAAjL,KAAAsY,UAAA7Z,EAAA,GAAAoI,GAIAmK,qBAAA,SAAAvK,EAAAE,EAAAsL,EAAAf,GAEA,GAAAD,GAAAgB,EAAAhB,IACAxK,IAAAwK,EAAAjC,OACArI,GAAAsK,EAAA9B,MACA,IAAAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACA4B,EAAA9Q,KAAA8Q,SACA6H,EAAA7H,EAAA9R,MACAiT,GAAAgD,mBAAAjW,QAAA2Z,IAAA7H,EAAAmB,EAAAgD,mBACA,KAAA,GAAAxW,GAAA,EAAAka,EAAAla,EAAAA,GAAA,EACA,CACA,GAAAma,GAAA9H,EAAArS,GACAoa,EAAA/H,EAAArS,EAAA,EACAyS,GAAAzS,GAAAma,EAAA9J,EAAA+J,EAAA9J,EAAAtI,EACAyK,EAAAzS,EAAA,GAAAma,EAAA3J,EAAA4J,EAAA3J,EAAAvI,KAIAzH,EAAAJ,QAAAM,EAAA2K,iB1Bs9CGzI,eAAe,GAAG+P,mBAAmB,KAAKyH,IAAI,SAASta,EAAQU,EAAOJ,G2BrhDzE,GAAAM,GAAAZ,EAAA,eACAY,GAAA0O,eAAAtP,EAAA,oBACAY,EAAA0K,iBAAA,SAAAjK,GAEAG,KAAAH,KAAAA,EACAG,KAAAkX,UACAlX,KAAAkX,OAAAlY,OAAA,EACAgB,KAAAqY,OACArY,KAAAqY,IAAArZ,OAAA,GAEAI,EAAA0K,iBAAA7J,WACA8Q,KAAA3R,EAAA0O,eAAAzH,OACAI,EAAA,EAAAE,EAAA,EACA6H,SAAA,EACAE,OAAA,EAAAC,OAAA,EACA/H,MAAA,EAAAC,OAAA,EACA1I,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACA+L,KAAA,KACAjC,eAAA,KACAoC,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACAN,OAAA,SAAAlM,EAAAwI,EAAAC,EAAAC,EAAAV,GAEA,GAAA+R,GAAArY,KAAAqY,GACA/R,IAEA+R,EAAA,GAAA/Z,EACA+Z,EAAA,GAAArR,EACAqR,EAAA,GAAA/Z,EACA+Z,EAAA,GAAAvR,EACAuR,EAAA,GAAAtR,EACAsR,EAAA,GAAAvR,EACAuR,EAAA,GAAAtR,EACAsR,EAAA,GAAArR,IAEAqR,EAAA,GAAA/Z,EACA+Z,EAAA,GAAArR,EACAqR,EAAA,GAAA/Z,EACA+Z,EAAA,GAAAvR,EACAuR,EAAA,GAAAtR,EACAsR,EAAA,GAAAvR,EACAuR,EAAA,GAAAtR,EACAsR,EAAA,GAAArR,IAGA+R,aAAA,WAEA,GAAAC,GAAAhZ,KAAA4G,MAAA5G,KAAA6K,oBAAA7K,KAAA0O,OACAuK,EAAAjZ,KAAA6G,OAAA7G,KAAA8K,qBAAA9K,KAAA2O,OACA8B,GAAAzQ,KAAA4G,MAAA,EAAA5G,KAAA0O,OAAA1O,KAAAyK,cAAAuO,EACAtI,GAAA1Q,KAAA6G,OAAA,EAAA7G,KAAA2O,OAAA3O,KAAA0K,cAAAuO,EACAC,EAAAzI,EAAAzQ,KAAA2K,YAAAqO,EACAG,EAAAzI,EAAA1Q,KAAA4K,aAAAqO,EACAnJ,EAAA9P,KAAAwO,SAAApP,EAAA2Q,OACAC,EAAAhP,KAAAgP,IAAAF,GACAG,EAAAjP,KAAAiP,IAAAH,GACAsJ,EAAA3I,EAAAT,EAAAhQ,KAAAyG,EACA4S,EAAA5I,EAAAR,EACAqJ,EAAA5I,EAAAV,EAAAhQ,KAAA2G,EACA4S,EAAA7I,EAAAT,EACAuJ,EAAAN,EAAAlJ,EAAAhQ,KAAAyG,EACAgT,EAAAP,EAAAjJ,EACAyJ,EAAAP,EAAAnJ,EAAAhQ,KAAA2G,EACAgT,EAAAR,EAAAlJ,EACAiH,EAAAlX,KAAAkX,MACAA,GAAA,GAAAkC,EAAAG,EACArC,EAAA,GAAAoC,EAAAD,EACAnC,EAAA,GAAAkC,EAAAO,EACAzC,EAAA,GAAAwC,EAAAL,EACAnC,EAAA,GAAAsC,EAAAG,EACAzC,EAAA,GAAAwC,EAAAD,EACAvC,EAAA,GAAAsC,EAAAD,EACArC,EAAA,GAAAoC,EAAAG,GAEAG,gBAAA,SAAAnT,EAAAE,EAAAsK,EAAAH,GAEArK,GAAAwK,EAAAjC,OACArI,GAAAsK,EAAA9B,MACA,IAAAL,GAAAmC,EAAAnC,IAAAC,EAAAkC,EAAAlC,IAAAE,EAAAgC,EAAAhC,IAAAC,EAAA+B,EAAA/B,IACAgI,EAAAlX,KAAAkX,MACApG,GAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAtI,EACAqK,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAAvI,EACAmK,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAtI,EACAqK,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAAvI,EACAmK,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAtI,EACAqK,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAAvI,EACAmK,EAAA,GAAAoG,EAAA,GAAApI,EAAAoI,EAAA,GAAAnI,EAAAtI,EACAqK,EAAA,GAAAoG,EAAA,GAAAjI,EAAAiI,EAAA,GAAAhI,EAAAvI,IAGAzH,EAAAJ,QAAAM,EAAA0K,mB3ByhDGxI,eAAe,GAAG+P,mBAAmB,KAAKwI,IAAI,SAASrb,EAAQU,EAAOJ,G4BpnDzE,GAAAM,GAAAZ,EAAA,mBACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAA0a,eAAA,SAAAlN,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAA0a,eAAA7Z,WACAwV,UAAA,EACAxI,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAA0Z,GAEA5M,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAA4M,GAEA7Z,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAmE,GAAA9Q,EAAAwV,MAAA3V,KAAAyV,UAEA,IAAApV,GAAAyM,EAAAA,EAAA9N,OAAA,GACA,CAEA,IADA,GAAAgb,GAAA/I,EAAAtP,KAAA6M,SAAA1B,EAAAA,EAAA9N,OAAA,GAAAiS,EAAAzC,SACAwL,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GAEA,aADA/I,EAAAzC,UAAAwL,EAAAvZ,GAKA,GAAA0M,GAAA/N,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,GACA4Z,EAAAnN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,GAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,EAGA,KADA,GAAAiI,GAAAlN,EAAAK,EAAA,GAAA8M,EACAD,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GAEA,KADAA,EAAA/I,EAAAtP,KAAA6M,UAAAyL,EAAAD,EAAAjI,GAAAd,EAAAzC,SACAwL,EAAA,KACAA,GAAA,GACA,MAAA,KAAAA,GACAA,GAAA,GACA/I,GAAAzC,UAAAwL,EAAAvZ,KAGAvB,EAAAJ,QAAAM,EAAA0a,iB5BwnDGxY,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAKsM,IAAI,SAAS1b,EAAQU,EAAOJ,G6BnrDjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAA+a,cAAA,SAAAvN,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAA+a,cAAAla,WACAwV,UAAA,EACAxI,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAoG,EAAAE,GAEAwG,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAA1G,EACAzG,KAAA8M,OAAAK,EAAA,GAAAxG,GAEAzG,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAmE,GAAA9Q,EAAAwV,MAAA3V,KAAAyV,UAEA,IAAApV,GAAAyM,EAAAA,EAAA9N,OAAA,GAIA,MAFAiS,GAAAvC,SAAAuC,EAAAtP,KAAA+M,OAAA5B,EAAAA,EAAA9N,OAAA,GAAAiS,EAAAvC,QAAAjO,OACAwQ,EAAAtC,SAAAsC,EAAAtP,KAAAgN,OAAA7B,EAAAA,EAAA9N,OAAA,GAAAiS,EAAAtC,QAAAlO,EAKA,IAAA0M,GAAA/N,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,GACA+Z,EAAAtN,EAAAK,EAAA,GACAkN,EAAAvN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEAd,EAAAvC,SAAAuC,EAAAtP,KAAA+M,QAAA0L,GAAAtN,EAAAK,EAAA,GAAAiN,GAAArI,GAAAd,EAAAvC,QAAAjO,EACAwQ,EAAAtC,SAAAsC,EAAAtP,KAAAgN,QAAA0L,GAAAvN,EAAAK,EAAA,GAAAkN,GAAAtI,GAAAd,EAAAtC,QAAAlO,KAGAvB,EAAAJ,QAAAM,EAAA+a,gB7BurDG7Y,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAK0M,IAAI,SAAS9b,EAAQU,EAAOJ,G8BvuDjF,GAAAM,GAAAZ,EAAA,eACAY,GAAA+O,KAAA3P,EAAA,UACAY,EAAAmb,KAAA/b,EAAA,UACAY,EAAA2W,aAAAvX,EAAA,kBACAY,EAAAob,SAAA,SAAA3W,GAEA7D,KAAA2B,KAAAkC,EAEA7D,KAAA2V,QACA,KAAA,GAAAlX,GAAA,EAAAP,EAAA2F,EAAA8R,MAAA3W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA2P,GAAAvK,EAAA8R,MAAAlX,GACA4P,EAAAD,EAAAC,OAAArO,KAAA2V,MAAA9R,EAAA8R,MAAAxJ,QAAAiC,EAAAC,SAAA,IACArO,MAAA2V,MAAAnS,KAAA,GAAApE,GAAA+O,KAAAC,EAAApO,KAAAqO,IAGArO,KAAAwN,SACAxN,KAAAiU,YACA,KAAA,GAAAxV,GAAA,EAAAP,EAAA2F,EAAA2J,MAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAgc,GAAA5W,EAAA2J,MAAA/O,GACAwS,EAAAjR,KAAA2V,MAAA9R,EAAA8R,MAAAxJ,QAAAsO,EAAArM,WACA6D,EAAA,GAAA7S,GAAAmb,KAAAE,EAAAxJ,EACAjR,MAAAwN,MAAAhK,KAAAyO,GACAjS,KAAAiU,UAAAzQ,KAAA/E,GAGAuB,KAAAkY,gBACA,KAAA,GAAAzZ,GAAA,EAAAP,EAAA2F,EAAAqU,cAAAlZ,OAAAd,EAAAO,EAAAA,IACAuB,KAAAkY,cAAA1U,KAAA,GAAApE,GAAA2W,aAAAlS,EAAAqU,cAAAzZ,GAAAuB,MAEAA,MAAA0a,aACA1a,KAAA2a,eAEAvb,EAAAob,SAAAva,WACAwG,EAAA,EAAAE,EAAA,EACA0D,KAAA,KACAlM,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACA8B,KAAA,EACAuO,OAAA,EAAAC,OAAA,EAEA8L,YAAA,WAEA,GAAAzC,GAAAlY,KAAAkY,cACA0C,EAAA1C,EAAAlZ,OAEA6b,EAAAD,EAAA,EACAF,EAAA1a,KAAA0a,SACAA,GAAA1b,OAAA6b,IAAAH,EAAA1b,OAAA6b,EACA,KAAA,GAAApc,GAAA,EAAAP,EAAAwc,EAAA1b,OAAAd,EAAAO,EAAAA,IACAic,EAAAjc,GAAAO,OAAA,CACA,MAAA0b,EAAA1b,OAAA6b,GACAH,EAAAA,EAAA1b,UAEA,IAAA8b,GAAAJ,EAAA,GACA/E,EAAA3V,KAAA2V,KAEAoF,GACA,IAAA,GAAAtc,GAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwS,GAAA0E,EAAAlX,GACAyC,EAAA+P,CACA,GAAA,CACA,IAAA,GAAAjO,GAAA,EAAA4X,EAAA5X,EAAAA,IAKA,IAHA,GAAAiV,GAAAC,EAAAlV,GACAqL,EAAA4J,EAAAtC,MAAA,GACAc,EAAAwB,EAAAtC,MAAAsC,EAAAtC,MAAA3W,OAAA,KAEA,CACA,GAAAkC,GAAAuV,EACA,CACAiE,EAAA1X,GAAAQ,KAAAyN,GACAyJ,EAAA1X,EAAA,GAAAQ,KAAAyN,EACA,SAAA8J,GAEA,GAAAtE,GAAApI,EAAA,KACAoI,GAAAA,EAAApI,OAGAnN,EAAAA,EAAAmN,aACAnN,EACA4Z,GAAAA,EAAA9b,QAAAiS,IAIAxB,qBAAA,WAGA,IAAA,GADAkG,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwS,GAAA0E,EAAAlX,EACAwS,GAAAxC,WAAAwC,EAAAzC,SAGA,IADA,GAAA/P,GAAA,EAAA4C,EAAArB,KAAA0a,UAAA1b,OAAA,IAEA,CAEA,IAAA,GADAgc,GAAAhb,KAAA0a,UAAAjc,GACAuE,EAAA,EAAAC,EAAA+X,EAAAhc,OAAAiE,EAAAD,EAAAA,IACAgY,EAAAhY,GAAAyM,sBACA,IAAAhR,GAAA4C,EAAA,KACArB,MAAAkY,cAAAzZ,GAAAyB,QACAzB,MAIA6P,eAAA,WAEAtO,KAAAib,sBACAjb,KAAAkb,uBAEAD,oBAAA,WAGA,IAAA,GADAtF,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACAkX,EAAAlX,GAAA6P,gBAGA,KAAA,GADA4J,GAAAlY,KAAAkY,cACAzZ,EAAA,EAAAP,EAAAga,EAAAlZ,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwZ,GAAAC,EAAAzZ,EACAwZ,GAAAjC,cAAAiC,EAAAtW,KAAAqU,cACAiC,EAAAzX,IAAAyX,EAAAtW,KAAAnB,MAGA0a,oBAAA,WAGA,IAAA,GADA1N,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IAEA+O,EAAA/O,GAAA6P,eAAA7P,EAGAuB,MAAA4C,kBAGAuY,YAAA,WAEA,MAAAnb,MAAA2V,MAAA3W,OAAAgB,KAAA2V,MAAA,GAAA,MAGAM,SAAA,SAAAmF,GAGA,IAAA,GADAzF,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,GAAAkX,EAAAlX,GAAAkD,KAAA9B,MAAAub,EAAA,MAAAzF,GAAAlX,EACA,OAAA,OAGA4c,cAAA,SAAAD,GAGA,IAAA,GADAzF,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,GAAAkX,EAAAlX,GAAAkD,KAAA9B,MAAAub,EAAA,MAAA3c,EACA,OAAA,IAGA6c,SAAA,SAAAC,GAGA,IAAA,GADA/N,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,GAAA+O,EAAA/O,GAAAkD,KAAA9B,MAAA0b,EAAA,MAAA/N,GAAA/O,EACA,OAAA,OAGA+c,cAAA,SAAAD,GAGA,IAAA,GADA/N,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,GAAA+O,EAAA/O,GAAAkD,KAAA9B,MAAA0b,EAAA,MAAA9c,EACA,OAAA,IAEAgd,cAAA,SAAAC,GAEA,GAAArR,GAAArK,KAAA2B,KAAAga,SAAAD,EACA,KAAArR,EAAA,KAAA,mBAAAqR,CACA1b,MAAA4b,QAAAvR,IAMAuR,QAAA,SAAAC,GAEA,GAAAA,EAEA,GAAA7b,KAAAqK,KACAwR,EAAAC,WAAA9b,KAAAA,KAAAqK,UAIA,KAAA,GADAmD,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwT,GAAAzE,EAAA/O,GACAoB,EAAAoS,EAAAtQ,KAAAyL,cACA,IAAAvN,EACA,CACA,GAAA0K,GAAAsR,EAAAE,cAAAtd,EAAAoB,EACA0K,IAAA0H,EAAAxE,cAAAlD,IAKAvK,KAAAqK,KAAAwR,GAGAG,wBAAA,SAAAT,EAAAnO,GAEA,MAAApN,MAAA0N,yBAAA1N,KAAA2B,KAAA6Z,cAAAD,GAAAnO,IAGAM,yBAAA,SAAAV,EAAAI,GAEA,GAAApN,KAAAqK,KACA,CACA,GAAAE,GAAAvK,KAAAqK,KAAA0R,cAAA/O,EAAAI,EACA,IAAA7C,EAAA,MAAAA,GAEA,MAAAvK,MAAA2B,KAAAsa,YAAAjc,KAAA2B,KAAAsa,YAAAF,cAAA/O,EAAAI,GACA,MAGAK,cAAA,SAAA8N,EAAAnO,GAGA,IAAA,GADAI,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwT,GAAAzE,EAAA/O,EACA,IAAAwT,EAAAtQ,KAAA9B,MAAA0b,EACA,CACA,GAAAhR,GAAA,IACA,IAAA6C,IAEA7C,EAAAvK,KAAA0N,yBAAAjP,EAAA2O,IACA7C,GAAA,KAAA,yBAAA6C,EAAA,eAAAmO,CAGA,YADAtJ,GAAAxE,cAAAlD,IAIA,KAAA,mBAAAgR,GAGAW,iBAAA,SAAAC,GAGA,IAAA,GADAjE,GAAAlY,KAAAkY,cACAzZ,EAAA,EAAAP,EAAAga,EAAAlZ,OAAAd,EAAAO,EAAAA,IACA,GAAAyZ,EAAAzZ,GAAAkD,KAAA9B,MAAAsc,EAAA,MAAAjE,GAAAzZ,EACA,OAAA,OAEAyD,OAAA,SAAAC,GAEAnC,KAAAK,MAAA8B,GAEAS,eAAA,WACA,IAAA,GAAAnE,GAAA,EAAAP,EAAA8B,KAAAiU,UAAAjV,OAAAd,EAAAO,EAAAA,IAEAuB,KAAAiU,UAAAxV,GAAAA,IAIAS,EAAAJ,QAAAM,EAAAob,W9B2uDGlZ,eAAe,GAAG8a,SAAS,GAAGC,iBAAiB,GAAGC,SAAS,KAAKC,IAAI,SAAS/d,EAAQU,EAAOJ,G+Bh/D/F,GAAAM,GAAAZ,EAAA,sBACAY,GAAA0O,eAAAtP,EAAA,oBACAY,EAAAod,eAAA,WAEAxc,KAAAyc,eACAzc,KAAA0c,YACA1c,KAAA2c,kBAEAvd,EAAAod,eAAAvc,WACA2c,KAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,KAAA,EACA7a,OAAA,SAAA/B,EAAA6c,GAEA,GAAAxP,GAAArN,EAAAqN,MACAyP,EAAAzP,EAAAxO,OACAyH,EAAAtG,EAAAsG,EAAAE,EAAAxG,EAAAwG,EACAgW,EAAA3c,KAAA2c,cACAF,EAAAzc,KAAAyc,YACAC,EAAA1c,KAAA0c,QAEAC,GAAA3d,OAAA,CACA,KAAA,GAAAP,GAAA,EAAAP,EAAAwe,EAAA1d,OAAAd,EAAAO,EAAAA,IACAge,EAAAjZ,KAAAkZ,EAAAje;AACAie,EAAA1d,OAAA,CAEA,KAAA,GAAAP,GAAA,EAAAwe,EAAAxe,EAAAA,IACA,CACA,GAAAwT,GAAAzE,EAAA/O,GACAye,EAAAjL,EAAA1H,UACA,IAAA2S,EAAAnM,MAAA3R,EAAA0O,eAAAC,YAAA,CACA4O,EAAAnZ,KAAA0Z,EAEA,IAAAC,GAAAC,EAAAX,EAAAzd,MACAoe,GAAA,GAEAD,EAAAV,EAAAW,EAAA,GACAX,EAAAY,OAAAD,EAAA,EAAA,IAEAD,KACAT,EAAAlZ,KAAA2Z,GAEAA,EAAAne,OAAAke,EAAApM,SAAA9R,OACAke,EAAAlM,qBAAAvK,EAAAE,EAAAsL,EAAAhB,KAAAkM,IAGAH,GAAAhd,KAAAsd,eAEAA,YAAA,WAIA,IAAA,GAFAZ,GAAA1c,KAAA0c,SACAE,EAAAtP,OAAAC,UAAAsP,EAAAvP,OAAAC,UAAAuP,EAAAxP,OAAAiQ,UAAAR,EAAAzP,OAAAiQ,UACA9e,EAAA,EAAAP,EAAAwe,EAAA1d,OAAAd,EAAAO,EAAAA,IAGA,IAAA,GADAqS,GAAA4L,EAAAje,GACAuE,EAAA,EAAAC,EAAA6N,EAAA9R,OAAAiE,EAAAD,EAAAA,GAAA,EACA,CACA,GAAAyD,GAAAqK,EAAA9N,GACA2D,EAAAmK,EAAA9N,EAAA,EACA4Z,GAAA5b,KAAAwc,IAAAZ,EAAAnW,GACAoW,EAAA7b,KAAAwc,IAAAX,EAAAlW,GACAmW,EAAA9b,KAAAyc,IAAAX,EAAArW,GACAsW,EAAA/b,KAAAyc,IAAAV,EAAApW,GAGA3G,KAAA4c,KAAAA,EACA5c,KAAA6c,KAAAA,EACA7c,KAAA8c,KAAAA,EACA9c,KAAA+c,KAAAA,GAGAW,kBAAA,SAAAjX,EAAAE,GAEA,MAAAF,IAAAzG,KAAA4c,MAAAnW,GAAAzG,KAAA8c,MAAAnW,GAAA3G,KAAA6c,MAAAlW,GAAA3G,KAAA+c,MAGAY,sBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAnB,GAAA5c,KAAA4c,KAAAC,EAAA7c,KAAA6c,KAAAC,EAAA9c,KAAA8c,KAAAC,EAAA/c,KAAA+c,IACA,IAAAH,GAAAgB,GAAAhB,GAAAkB,GAAAjB,GAAAgB,GAAAhB,GAAAkB,GAAAH,GAAAd,GAAAgB,GAAAhB,GAAAe,GAAAd,GAAAgB,GAAAhB,EACA,OAAA,CACA,IAAAiB,IAAAD,EAAAF,IAAAC,EAAAF,GACAjX,EAAAqX,GAAApB,EAAAgB,GAAAC,CACA,IAAAlX,EAAAkW,GAAAE,EAAApW,EAAA,OAAA,CAEA,IADAA,EAAAqX,GAAAlB,EAAAc,GAAAC,EACAlX,EAAAkW,GAAAE,EAAApW,EAAA,OAAA,CACA,IAAAF,IAAAoW,EAAAgB,GAAAG,EAAAJ,CACA,OAAAnX,GAAAmW,GAAAE,EAAArW,GAAA,GACAA,GAAAsW,EAAAc,GAAAG,EAAAJ,EACAnX,EAAAmW,GAAAE,EAAArW,GAAA,GACA,IAGAwX,uBAAA,SAAAC,GAEA,MAAAle,MAAA4c,KAAAsB,EAAApB,MAAA9c,KAAA8c,KAAAoB,EAAAtB,MAAA5c,KAAA6c,KAAAqB,EAAAnB,MAAA/c,KAAA+c,KAAAmB,EAAArB,MAIAsB,cAAA,SAAA1X,EAAAE,GAGA,IAAA,GADA+V,GAAA1c,KAAA0c,SACAje,EAAA,EAAAP,EAAAwe,EAAA1d,OAAAd,EAAAO,EAAAA,IACA,GAAAuB,KAAAoe,qBAAA1B,EAAAje,GAAAgI,EAAAE,GAAA,MAAA3G,MAAA2c,cAAAle,EACA,OAAA,OAIA4f,kBAAA,SAAAT,EAAAC,EAAAC,EAAAC,GAGA,IAAA,GADArB,GAAA1c,KAAA0c,SACAje,EAAA,EAAAP,EAAAwe,EAAA1d,OAAAd,EAAAO,EAAAA,IACA,GAAAie,EAAAje,GAAA4f,kBAAAT,EAAAC,EAAAC,EAAAC,GAAA,MAAA/d,MAAA2c,cAAAle,EACA,OAAA,OAGA2f,qBAAA,SAAAjB,EAAA1W,EAAAE,GAKA,IAAA,GAHA1D,GAAAka,EAAAne,OACAsf,EAAArb,EAAA,EACAsb,GAAA,EACAvb,EAAA,EAAAC,EAAAD,EAAAA,GAAA,EACA,CACA,GAAAwb,GAAArB,EAAAna,EAAA,GACA6Q,EAAAsJ,EAAAmB,EAAA,EACA,IAAA3X,EAAA6X,GAAA3K,GAAAlN,GAAAA,EAAAkN,GAAA2K,GAAA7X,EACA,CACA,GAAA8X,GAAAtB,EAAAna,EACAyb,IAAA9X,EAAA6X,IAAA3K,EAAA2K,IAAArB,EAAAmB,GAAAG,GAAAhY,IAAA8X,GAAAA,GAEAD,EAAAtb,EAEA,MAAAub,IAGAG,yBAAA,SAAAvB,EAAAS,EAAAC,EAAAC,EAAAC,GAMA,IAAA,GAJA9a,GAAAka,EAAAne,OACA2f,EAAAf,EAAAE,EAAAc,EAAAf,EAAAE,EACAc,EAAAjB,EAAAG,EAAAF,EAAAC,EACAgB,EAAA3B,EAAAla,EAAA,GAAA8b,EAAA5B,EAAAla,EAAA,GACAD,EAAA,EAAAC,EAAAD,EAAAA,GAAA,EACA,CACA,GAAAgc,GAAA7B,EAAAna,GAAAic,EAAA9B,EAAAna,EAAA,GACAkc,EAAAJ,EAAAG,EAAAF,EAAAC,EACAG,EAAAL,EAAAE,EAAAI,EAAAL,EAAAE,EACAI,EAAAV,EAAAS,EAAAR,EAAAO,EACA1Y,GAAAoY,EAAAM,EAAAR,EAAAO,GAAAG,CACA,KAAA5Y,GAAAqY,GAAAE,GAAAvY,GAAAA,GAAAuY,GAAAF,GAAArY,KAAAA,GAAAmX,GAAAE,GAAArX,GAAAA,GAAAqX,GAAAF,GAAAnX,GACA,CACA,GAAAE,IAAAkY,EAAAO,EAAAR,EAAAM,GAAAG,CACA,KAAA1Y,GAAAoY,GAAAE,GAAAtY,GAAAA,GAAAsY,GAAAF,GAAApY,KAAAA,GAAAkX,GAAAE,GAAApX,GAAAA,GAAAoX,GAAAF,GAAAlX,GAAA,OAAA,EAEAmY,EAAAE,EACAD,EAAAE,EAEA,OAAA,GAEAK,WAAA,SAAA/U,GAEA,GAAAhH,GAAAvD,KAAA2c,cAAAxQ,QAAA5B,EACA,OAAA,IAAAhH,EAAA,KAAAvD,KAAA0c,SAAAnZ,IAEAgc,SAAA,WAEA,MAAAvf,MAAA8c,KAAA9c,KAAA4c,MAEA4C,UAAA,WAEA,MAAAxf,MAAA+c,KAAA/c,KAAA6c,OAGA3d,EAAAJ,QAAAM,EAAAod,iB/Bo/DGiD,kBAAkB,GAAGpO,mBAAmB,KAAKqO,IAAI,SAASlhB,EAAQU,EAAOJ,GgC9pE5E,GAAAM,GAAAZ,EAAA,eACAY,GAAAugB,aAAA,WAEA3f,KAAA2V,SACA3V,KAAAwN,SACAxN,KAAA4f,SACA5f,KAAAO,UACAP,KAAA6f,cACA7f,KAAAkY,kBAEA9Y,EAAAugB,aAAA1f,WACAJ,KAAA,KACAoc,YAAA,KACArV,MAAA,EAAAC,OAAA,EACAiZ,QAAA,KAAAC,KAAA,KAEA9J,SAAA,SAAAmF,GAGA,IAAA,GADAzF,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,GAAAkX,EAAAlX,GAAAoB,MAAAub,EAAA,MAAAzF,GAAAlX,EACA,OAAA,OAGA4c,cAAA,SAAAD,GAGA,IAAA,GADAzF,GAAA3V,KAAA2V,MACAlX,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,GAAAkX,EAAAlX,GAAAoB,MAAAub,EAAA,MAAA3c,EACA,OAAA,IAGA6c,SAAA,SAAAC,GAGA,IAAA,GADA/N,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IAEA,GAAA+O,EAAA/O,GAAAoB,MAAA0b,EAAA,MAAAvb,MAAAwN,MAAA/O,EAEA,OAAA,OAGA+c,cAAA,SAAAD,GAGA,IAAA,GADA/N,GAAAxN,KAAAwN,MACA/O,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,GAAA+O,EAAA/O,GAAAoB,MAAA0b,EAAA,MAAA9c,EACA,OAAA,IAGAkd,SAAA,SAAAD,GAGA,IAAA,GADAkE,GAAA5f,KAAA4f,MACAnhB,EAAA,EAAAP,EAAA0hB,EAAA5gB,OAAAd,EAAAO,EAAAA,IACA,GAAAmhB,EAAAnhB,GAAAoB,MAAA6b,EAAA,MAAAkE,GAAAnhB,EACA,OAAA,OAGAuhB,UAAA,SAAAC,GAGA,IAAA,GADA1f,GAAAP,KAAAO,OACA9B,EAAA,EAAAP,EAAAqC,EAAAvB,OAAAd,EAAAO,EAAAA,IACA,GAAA8B,EAAA9B,GAAAoB,MAAAogB,EAAA,MAAA1f,GAAA9B,EACA,OAAA,OAGAqF,cAAA,SAAAF,GAGA,IAAA,GADAic,GAAA7f,KAAA6f,WACAphB,EAAA,EAAAP,EAAA2hB,EAAA7gB,OAAAd,EAAAO,EAAAA,IACA,GAAAohB,EAAAphB,GAAAoB,MAAA+D,EAAA,MAAAic,GAAAphB,EACA,OAAA,OAGAyd,iBAAA,SAAAC,GAGA,IAAA,GADAjE,GAAAlY,KAAAkY,cACAzZ,EAAA,EAAAP,EAAAga,EAAAlZ,OAAAd,EAAAO,EAAAA,IACA,GAAAyZ,EAAAzZ,GAAAoB,MAAAsc,EAAA,MAAAjE,GAAAzZ,EACA,OAAA,QAGAS,EAAAJ,QAAAM,EAAAugB,ehCkqEGre,eAAe,KAAK4e,IAAI,SAAS1hB,EAAQU,EAAOJ,GiCpvEnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAugB,aAAAnhB,EAAA,kBACAY,EAAAwR,SAAApS,EAAA,cACAY,EAAAyY,iBAAArZ,EAAA,sBACAY,EAAA+gB,SAAA3hB,EAAA,cACAY,EAAAghB,KAAA5hB,EAAA,UACAY,EAAAqV,UAAAjW,EAAA,eACAY,EAAA0O,eAAAtP,EAAA,oBACAY,EAAAmS,cAAA/S,EAAA,mBACAY,EAAAuN,mBAAAnO,EAAA,wBACAY,EAAA0a,eAAAtb,EAAA,oBACAY,EAAA+a,cAAA3b,EAAA,mBACAY,EAAAihB,kBAAA7hB,EAAA,uBACAY,EAAAoW,cAAAhX,EAAA,mBACAY,EAAAyW,cAAArX,EAAA,mBACAY,EAAA2Y,qBAAAvZ,EAAA,0BACAY,EAAA0V,YAAAtW,EAAA,iBACAY,EAAA2U,kBAAAvV,EAAA,uBACAY,EAAAuV,cAAAnW,EAAA,mBACAY,EAAAgV,MAAA5V,EAAA,WACAY,EAAAQ,UAAApB,EAAA,eACAY,EAAAkhB,mBAAA,SAAAC,GAEAvgB,KAAAugB,iBAAAA,GAEAnhB,EAAAkhB,mBAAArgB,WACAugB,MAAA,EACAC,iBAAA,SAAAC,EAAA7gB,GAEA,GAAAgE,GAAA,GAAAzE,GAAAugB,YACA9b,GAAAhE,KAAAA,CAGA,IAAA8gB,GAAAD,EAAA,QACAC,KAEA9c,EAAAkc,KAAAY,EAAA,KACA9c,EAAAic,QAAAa,EAAA,MACA9c,EAAA+C,MAAA+Z,EAAA,OAAA,EACA9c,EAAAgD,OAAA8Z,EAAA,QAAA,EAKA,KAAA,GADAhL,GAAA+K,EAAA,MACAjiB,EAAA,EAAAP,EAAAyX,EAAA3W,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAmiB,GAAAjL,EAAAlX,GACA4P,EAAA,IACA,IAAAuS,EAAA,SAEAvS,EAAAxK,EAAAoS,SAAA2K,EAAA,SACAvS,GAAA,KAAA,0BAAAuS,EAAA,MAEA,IAAAxS,GAAA,GAAAhP,GAAAwR,SAAAgQ,EAAA,KAAAvS,EACAD,GAAApP,QAAA4hB,EAAA,QAAA,GAAA5gB,KAAAwgB,MACApS,EAAA3H,GAAAma,EAAA,GAAA,GAAA5gB,KAAAwgB,MACApS,EAAAzH,GAAAia,EAAA,GAAA,GAAA5gB,KAAAwgB,MACApS,EAAAI,SAAAoS,EAAA,UAAA,EACAxS,EAAAM,OAAAkS,EAAA7b,eAAA,UAAA6b,EAAA,OAAA,EACAxS,EAAAO,OAAAiS,EAAA7b,eAAA,UAAA6b,EAAA,OAAA,EACAxS,EAAAsB,aAAAkR,EAAA7b,eAAA,gBAAA6b,EAAA,cAAA,EACAxS,EAAAuB,gBAAAiR,EAAA7b,eAAA,mBAAA6b,EAAA,iBAAA,EACA/c,EAAA8R,MAAAnS,KAAA4K,GAIA,GAAAyS,GAAAH,EAAA,EACA,IAAAG,EAEA,IAAA,GAAApiB,GAAA,EAAAP,EAAA2iB,EAAA7hB,OAAAd,EAAAO,EAAAA,IACA,CAKA,IAAA,GAJAqiB,GAAAD,EAAApiB,GACAsiB,EAAA,GAAA3hB,GAAAyY,iBAAAiJ,EAAA,MAEAnL,EAAAmL,EAAA,MACA9d,EAAA,EAAAC,EAAA0S,EAAA3W,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAiO,GAAApN,EAAAoS,SAAAN,EAAA3S,GACA,KAAAiO,EAAA,KAAA,sBAAA0E,EAAA3S,EACA+d,GAAApL,MAAAnS,KAAAyN,GAIA,GADA8P,EAAAngB,OAAAiD,EAAAoS,SAAA6K,EAAA,SACAC,EAAAngB,OAAA,KAAA,0BAAAkgB,EAAA,MAEAC,GAAA/K,eAAA8K,EAAA/b,eAAA,iBAAA+b,EAAA,aAAA,EAAA,GACAC,EAAAvgB,IAAAsgB,EAAA/b,eAAA,OAAA+b,EAAA,IAAA,EAEAjd,EAAAqU,cAAA1U,KAAAud,GAMA,IAAA,GADAvT,GAAAkT,EAAA,MACAjiB,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAuiB,GAAAxT,EAAA/O,GACA2P,EAAAvK,EAAAoS,SAAA+K,EAAA,KACA,KAAA5S,EAAA,KAAA,wBAAA4S,EAAA,IACA,IAAAvG,GAAA,GAAArb,GAAA+gB,SAAAa,EAAA,KAAA5S,GAEA6S,EAAAD,EAAA,KACAC,KAEAxG,EAAAtc,EAAA6B,KAAAkhB,QAAAD,EAAA,GACAxG,EAAAjJ,EAAAxR,KAAAkhB,QAAAD,EAAA,GACAxG,EAAAhJ,EAAAzR,KAAAkhB,QAAAD,EAAA,GACAxG,EAAAlc,EAAAyB,KAAAkhB,QAAAD,EAAA,IAGAxG,EAAArN,eAAA4T,EAAA,WAGAvG,EAAA0G,UAAAH,EAAA,OAAA5hB,EAAA+gB,SAAAiB,oBAAAJ,EAAA,QAAA5hB,EAAA+gB,SAAAiB,oBAAA,OAEAvd,EAAA2J,MAAAhK,KAAAiX,GAIA,GAAAmF,GAAAc,EAAA,KACA,KAAA,GAAAhF,KAAAkE,GAEA,GAAAA,EAAA7a,eAAA2W,GAAA,CACA,GAAA2F,GAAAzB,EAAAlE,GACArR,EAAA,GAAAjL,GAAAghB,KAAA1E,EACA,KAAA,GAAAH,KAAA8F,GAEA,GAAAA,EAAAtc,eAAAwW,GAAA,CACA,GAAAvO,GAAAnJ,EAAA2X,cAAAD,GACA+F,EAAAD,EAAA9F,EACA,KAAA,GAAAnO,KAAAkU,GAEA,GAAAA,EAAAvc,eAAAqI,GAAA,CACA,GAAA7C,GAAAvK,KAAAuhB,eAAAlX,EAAA+C,EAAAkU,EAAAlU,GACA7C,IAAAF,EAAAmX,cAAAxU,EAAAI,EAAA7C,IAGA1G,EAAA+b,MAAApc,KAAA6G,GACA,WAAAA,EAAAxK,OAAAgE,EAAAoY,YAAA5R,GAIA,GAAA9J,GAAAmgB,EAAA,MACA,KAAA,GAAAT,KAAA1f,GAEA,GAAAA,EAAAwE,eAAAkb,GAAA,CACA,GAAAwB,GAAAlhB,EAAA0f,GACAyB,EAAA,GAAAtiB,GAAAqV,UAAAwL,EACAyB,GAAArN,SAAAoN,EAAA,QAAA,EACAC,EAAApN,WAAAmN,EAAA,UAAA,EACAC,EAAAnN,YAAAkN,EAAA,QAAA,KACA5d,EAAAtD,OAAAiD,KAAAke,GAIA,GAAA7B,GAAAa,EAAA,UACA,KAAA,GAAA9c,KAAAic,GAEAA,EAAA9a,eAAAnB,IACA5D,KAAA2hB,cAAA/d,EAAAic,EAAAjc,GAAAC,EAGA,OAAAA,IAEA0d,eAAA,SAAAlX,EAAAxK,EAAA+hB,GAEA/hB,EAAA+hB,EAAA,MAAA/hB,CAEA,IAAAkR,GAAA3R,EAAA0O,eAAA8T,EAAA,MAAA,UACAtX,EAAAsX,EAAA,MAAA/hB,EAEA2gB,EAAAxgB,KAAAwgB,KACA,IAAAzP,GAAA3R,EAAA0O,eAAAzH,OACA,CACA,GAAAA,GAAArG,KAAAugB,iBAAAnW,oBAAAC,EAAAxK,EAAAyK,EACA,KAAAjE,EAAA,MAAA,KACAA,GAAAiE,KAAAA,EACAjE,EAAAI,GAAAmb,EAAA,GAAA,GAAApB,EACAna,EAAAM,GAAAib,EAAA,GAAA,GAAApB,EACAna,EAAAqI,OAAAkT,EAAA7c,eAAA,UAAA6c,EAAA,OAAA,EACAvb,EAAAsI,OAAAiT,EAAA7c,eAAA,UAAA6c,EAAA,OAAA,EACAvb,EAAAmI,SAAAoT,EAAA,UAAA,EACAvb,EAAAO,OAAAgb,EAAA,OAAA,GAAApB,EACAna,EAAAQ,QAAA+a,EAAA,QAAA,GAAApB,CAEA,IAAAS,GAAAW,EAAA,KAUA,OATAX,KAEA5a,EAAAlI,EAAA6B,KAAAkhB,QAAAD,EAAA,GACA5a,EAAAmL,EAAAxR,KAAAkhB,QAAAD,EAAA,GACA5a,EAAAoL,EAAAzR,KAAAkhB,QAAAD,EAAA,GACA5a,EAAA9H,EAAAyB,KAAAkhB,QAAAD,EAAA,IAGA5a,EAAA0S,eACA1S,EACA,GAAA0K,GAAA3R,EAAA0O,eAAAE,KACA,CACA,GAAAA,GAAAhO,KAAAugB,iBAAAxV,kBAAAV,EAAAxK,EAAAyK,EACA,OAAA0D,IACAA,EAAA1D,KAAAA,EACA0D,EAAA8C,SAAA9Q,KAAA6hB,cAAAD,EAAA,WAAApB,GACAxS,EAAAuK,UAAAvY,KAAA8hB,YAAAF,EAAA,aACA5T,EAAAsK,UAAAtY,KAAA6hB,cAAAD,EAAA,MAAA,GACA5T,EAAArF,YAEAsY,EAAAW,EAAA,MACAX,IAEAjT,EAAA7P,EAAA6B,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAwD,EAAAxR,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAyD,EAAAzR,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAzP,EAAAyB,KAAAkhB,QAAAD,EAAA,IAGAjT,EAAAwK,WAAA,GAAAoJ,EAAA,MAAA,GACAA,EAAA,QAAA5T,EAAAyK,MAAAzY,KAAA8hB,YAAAF,EAAA,UACA5T,EAAApH,OAAAgb,EAAA,OAAA,GAAApB,EACAxS,EAAAnH,QAAA+a,EAAA,QAAA,GAAApB,EACAxS,GApBA,KAqBA,GAAA+C,GAAA3R,EAAA0O,eAAAG,YACA,CACA,GAAAD,GAAAhO,KAAAugB,iBAAAlV,yBAAAhB,EAAAxK,EAAAyK,EACA,KAAA0D,EAAA,MAAA,KACAA,GAAA1D,KAAAA,CAMA,KAAA,GAJA+N,GAAArY,KAAA6hB,cAAAD,EAAA,MAAA,GACA9Q,EAAA9Q,KAAA6hB,cAAAD,EAAA,WAAA,GACAG,KACApM,KACAlX,EAAA,EAAAP,EAAA4S,EAAA9R,OAAAd,EAAAO,GACA,CACA,GAAAujB,GAAA,EAAAlR,EAAArS,IACAkX,GAAAA,EAAA3W,QAAAgjB,CACA,KAAA,GAAA/e,GAAAxE,EAAA,EAAAujB,EAAA/e,EAAAxE,GAEAkX,EAAAA,EAAA3W,QAAA8R,EAAArS,GACAsjB,EAAAA,EAAA/iB,QAAA8R,EAAArS,EAAA,GAAA+hB,EACAuB,EAAAA,EAAA/iB,QAAA8R,EAAArS,EAAA,GAAA+hB,EACAuB,EAAAA,EAAA/iB,QAAA8R,EAAArS,EAAA,GACAA,GAAA,EAsBA,MAnBAuP,GAAA2H,MAAAA,EACA3H,EAAA+T,QAAAA,EACA/T,EAAAuK,UAAAvY,KAAA8hB,YAAAF,EAAA,aACA5T,EAAAsK,UAAAD,EACArK,EAAArF,YAEAsY,EAAAW,EAAA,MACAX,IAEAjT,EAAA7P,EAAA6B,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAwD,EAAAxR,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAyD,EAAAzR,KAAAkhB,QAAAD,EAAA,GACAjT,EAAAzP,EAAAyB,KAAAkhB,QAAAD,EAAA,IAGAjT,EAAAwK,WAAA,GAAAoJ,EAAA,MAAA,GACAA,EAAA,QAAA5T,EAAAyK,MAAAzY,KAAA8hB,YAAAF,EAAA,UACA5T,EAAApH,OAAAgb,EAAA,OAAA,GAAApB,EACAxS,EAAAnH,QAAA+a,EAAA,QAAA,GAAApB,EACAxS,EACA,GAAA+C,GAAA3R,EAAA0O,eAAAC,YACA,CAGA,IAAA,GAFAxD,GAAAvK,KAAAugB,iBAAAjV,yBAAAjB,EAAAxK,GACAiR,EAAA8Q,EAAA,SACAnjB,EAAA,EAAAP,EAAA4S,EAAA9R,OAAAd,EAAAO,EAAAA,IACA8L,EAAAuG,SAAAtN,KAAAsN,EAAArS,GAAA+hB,EACA,OAAAjW,GAEA,KAAA,4BAAAwG,GAEA4Q,cAAA,SAAA9hB,EAAA+hB,EAAA/d,GAEA,GAAA/D,MACAC,EAAA,EAEAyN,EAAAoU,EAAA,KACA,KAAA,GAAArG,KAAA/N,GAEA,GAAAA,EAAAzI,eAAAwW,GAAA,CACA,GAAAyF,GAAAxT,EAAA+N,GACAvO,EAAAnJ,EAAA2X,cAAAD,EAEA,KAAA,GAAA0G,KAAAjB,GAEA,GAAAA,EAAAjc,eAAAkd,GAAA,CACA,GAAAthB,GAAAqgB,EAAAiB,EACA,IAAA,SAAAA,EACA,CACA,GAAAC,GAAA,GAAA9iB,GAAAmS,cAAA5Q,EAAA3B,OACAkjB,GAAAlV,UAAAA,CAGA,KAAA,GADAG,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,GACAwiB,EAAAkB,EAAA,MACAhkB,EAAA6B,KAAAkhB,QAAAD,EAAA,GACAzP,EAAAxR,KAAAkhB,QAAAD,EAAA,GACAxP,EAAAzR,KAAAkhB,QAAAD,EAAA,GACA1iB,EAAAyB,KAAAkhB,QAAAD,EAAA,EACAiB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAhkB,EAAAqT,EAAAC,EAAAlT,GACAyB,KAAAoiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEArN,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,CAAA,GAAA,cAAAgV,EAeA,KAAA,qCAAAA,EAAA,KAAA1G,EAAA,GAbA,IAAA2G,GAAA,GAAA9iB,GAAAuN,mBAAAhM,EAAA3B,OACAkjB,GAAAlV,UAAAA,CAGA,KAAA,GADAG,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,EACAyjB,GAAAhV,SAAAC,IAAAgV,EAAA,KAAAA,EAAA,MAEAriB,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAAoV,EAAAjV,gBAAA,MAOA,GAAA0I,GAAAiM,EAAA,KACA,KAAA,GAAAxG,KAAAzF,GAEA,GAAAA,EAAA5Q,eAAAqW,GAAA,CACA,GAAA3F,GAAA5R,EAAAwX,cAAAD,EACA,IAAA,IAAA3F,EAAA,KAAA,mBAAA2F,CACA,IAAAwF,GAAAjL,EAAAyF,EAEA,KAAA,GAAA6G,KAAArB,GAEA,GAAAA,EAAA7b,eAAAkd,GAAA,CACA,GAAAthB,GAAAigB,EAAAqB,EACA,IAAA,UAAAA,EACA,CACA,GAAAC,GAAA,GAAA9iB,GAAA0a,eAAAnZ,EAAA3B,OACAkjB,GAAAzM,UAAAA,CAGA,KAAA,GADAtI,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,EACAyjB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAA,EAAA,OACAniB,KAAAoiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEArN,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,IAAA,aAAAgV,GAAA,SAAAA,EACA,CACA,GAAAC,GACAG,EAAA,CACA,UAAAJ,EACAC,EAAA,GAAA9iB,GAAA+a,cAAAxZ,EAAA3B,SAGAkjB,EAAA,GAAA9iB,GAAAihB,kBAAA1f,EAAA3B,QACAqjB,EAAAriB,KAAAwgB,OAEA0B,EAAAzM,UAAAA,CAGA,KAAA,GADAtI,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,GACAgI,GAAA0b,EAAA,GAAA,GAAAE,EACA1b,GAAAwb,EAAA,GAAA,GAAAE,CACAH,GAAAhV,SAAAC,EAAAgV,EAAA,KAAA1b,EAAAE,GACA3G,KAAAoiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEArN,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,QAEA,CAAA,GAAA,SAAAgV,GAAA,SAAAA,EAiBA,KAAA,qCAAAA,EAAA,KAAA7G,EAAA,GAfA,IAAA3U,GAAA,SAAAwb,EACAC,EAAAzb,EAAA,GAAArH,GAAAoW,cAAA7U,EAAA3B,QAAA,GAAAI,GAAAyW,cAAAlV,EAAA3B,OACAkjB,GAAAzM,UAAAA,CAIA,KAAA,GAFA6M,GAAA7b,EAAA,IAAA,IACA0G,EAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,EACAyjB,GAAAhV,SAAAC,EAAAgV,EAAA,KAAAA,EAAAG,KAAA,GACAnV,IAEArN,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,MAMA,GAAA6T,GAAAc,EAAA,EACA,KAAA,GAAAzF,KAAA2E,GAEA,GAAAA,EAAA/b,eAAAoX,GAAA,CACA,GAAAlE,GAAApU,EAAAqY,iBAAAC,GACAxb,EAAAmgB,EAAA3E,GACA+F,EAAA,GAAA9iB,GAAA2Y,qBAAApX,EAAA3B,OACAkjB,GAAAlK,kBAAAnU,EAAAqU,cAAA/L,QAAA8L,EAEA,KAAA,GADA9K,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAA0jB,GAAAxhB,EAAAlC,GACA+B,EAAA2hB,EAAApd,eAAA,OAAAod,EAAA,IAAA,EACAnM,GAAAmM,EAAApd,eAAA,iBAAAod,EAAA,aAAA,EAAA,EACAD,GAAAhV,SAAAC,EAAAgV,EAAA,KAAA3hB,EAAAwV,GACAhW,KAAAoiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEArN,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAA,EAAAoV,EAAAjV,gBAAA,IAGA,GAAAsV,GAAAX,EAAA,GACA,KAAA,GAAAlG,KAAA6G,GACA,CACA,GAAAlY,GAAAxG,EAAA8X,SAAAD,GACAsF,EAAAuB,EAAA7G,EACA,KAAAH,IAAAyF,GACA,CACA,GAAAhU,GAAAnJ,EAAA2X,cAAAD,GACAiH,EAAAxB,EAAAzF,EACA,KAAA,GAAAkH,KAAAD,GACA,CACA,GAAA7hB,GAAA6hB,EAAAC,GACAP,EAAA,GAAA9iB,GAAA0V,YAAAnU,EAAA3B,QACAuL,EAAAF,EAAA0R,cAAA/O,EAAAyV,EACA,KAAAlY,EAAA,KAAA,6BAAAkY,CACAP,GAAAlV,UAAAA,EACAkV,EAAA3X,WAAAA,CAEA,IACAyK,GADA0N,EAAAnY,EAAAwG,MAAA3R,EAAA0O,eAAAE,IAGAgH,GADA0N,EACAnY,EAAAuG,SAAA9R,OAEAuL,EAAAwX,QAAA/iB,OAAA,EAAA,CAGA,KAAA,GADAmO,GAAA,EACA1O,EAAA,EAAAP,EAAAyC,EAAA3B,OAAAd,EAAAO,EAAAA,IACA,CACA,GACAqS,GADAqR,EAAAxhB,EAAAlC,EAEA,IAAA0jB,EAAA,SASA,CACA,GAAAQ,GAAAR,EAAA,QACArR,KACA,KAAA,GAAA8R,GAAA,EAAA5N,EAAA4N,IAAAA,EAAA9R,EAAAtN,KAAA,EACA,IAAAmQ,GAAAwO,EAAA,QAAA,EACAlf,EAAA0f,EAAA3jB,MACA,IAAA,GAAAgB,KAAAwgB,MAEA,IAAA,GAAAxd,GAAA,EAAAC,EAAAD,EAAAA,IACA8N,EAAA9N,EAAA2Q,GAAAgP,EAAA3f,OAEA,KAAA,GAAAA,GAAA,EAAAC,EAAAD,EAAAA,IACA8N,EAAA9N,EAAA2Q,GAAAgP,EAAA3f,GAAAhD,KAAAwgB,KAEA,IAAAkC,EAGA,IAAA,GADAG,GAAAtY,EAAAuG,SACA9N,EAAA,EAAAC,EAAA6N,EAAA9R,OAAAiE,EAAAD,EAAAA,IACA8N,EAAA9N,IAAA6f,EAAA7f,OAzBA,IAAA0f,EACA5R,EAAAvG,EAAAuG,aAEA,CACAA,IACA,KAAA,GAAA8R,GAAA,EAAA5N,EAAA4N,IAAAA,EAAA9R,EAAAtN,KAAA,GAwBA0e,EAAAhV,SAAAC,EAAAgV,EAAA,KAAArR,GACA9Q,KAAAoiB,UAAAF,EAAA/U,EAAAgV,GACAhV,IAEArN,EAAAA,EAAAd,QAAAkjB,EACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAAoV,EAAAjV,gBAAA,MAKA,GAAA6V,GAAAlB,EAAA,SAEA,IADAkB,IAAAA,EAAAlB,EAAA,WACAkB,EACA,CAIA,IAAA,GAHAZ,GAAA,GAAA9iB,GAAA2U,kBAAA+O,EAAA9jB,QACAie,EAAApZ,EAAA2J,MAAAxO,OACAmO,EAAA,EACA1O,EAAA,EAAAP,EAAA4kB,EAAA9jB,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAskB,GAAAD,EAAArkB,GACAwV,EAAA,IACA,IAAA8O,EAAA,QACA,CACA9O,KACAA,EAAAjV,OAAAie,CACA,KAAA,GAAAja,GAAAia,EAAA,EAAAja,GAAA,EAAAA,IACAiR,EAAAjR,GAAA,EACA,IAAAggB,IAAAD,EAAA,QACAE,KACAA,IAAAjkB,OAAAie,EAAA+F,GAAAhkB,MAEA,KAAA,GADAkkB,IAAA,EAAAC,GAAA,EACAngB,EAAA,EAAAC,EAAA+f,GAAAhkB,OAAAiE,EAAAD,EAAAA,IACA,CACA,GAAAogB,IAAAJ,GAAAhgB,GACAgK,EAAAnJ,EAAA2X,cAAA4H,GAAA,KACA,IAAA,IAAApW,EAAA,KAAA,mBAAAoW,GAAA,IAEA,MAAAF,IAAAlW,GACAiW,GAAAE,MAAAD,IAEAjP,GAAAiP,GAAAE,GAAA,QAAAF,KAGA,KAAAjG,EAAAiG,IACAD,GAAAE,MAAAD,IAEA,KAAA,GAAAlgB,GAAAia,EAAA,EAAAja,GAAA,EAAAA,IACA,IAAAiR,EAAAjR,KAAAiR,EAAAjR,GAAAigB,KAAAE,KAEAjB,EAAAhV,SAAAC,IAAA4V,EAAA,KAAA9O,GAEAnU,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAAoV,EAAAjV,gBAAA,IAGA,GAAA1M,IAAAqhB,EAAA,MACA,IAAArhB,GACA,CAGA,IAAA,GAFA2hB,GAAA,GAAA9iB,GAAAuV,cAAApU,GAAAvB,QACAmO,EAAA,EACA1O,EAAA,EAAAP,EAAAqC,GAAAvB,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAgjB,IAAAlhB,GAAA9B,GACAijB,GAAA7d,EAAAmc,UAAAyB,GAAA,KACA,KAAAC,GAAA,KAAA,oBAAAD,GAAA,IACA,IAAAve,IAAA,GAAA9D,GAAAgV,MAAAsN,GACAxe,IAAAmR,SAAAoN,GAAA1c,eAAA,OAAA0c,GAAA,OAAAC,GAAArN,SACAnR,GAAAoR,WAAAmN,GAAA1c,eAAA,SAAA0c,GAAA,SAAAC,GAAApN,WACApR,GAAAqR,YAAAkN,GAAA1c,eAAA,UAAA0c,GAAA,OAAAC,GAAAnN,YACA2N,EAAAhV,SAAAC,IAAAsU,GAAA,KAAAve,IAEApD,EAAA0D,KAAA0e,GACAniB,EAAAiB,KAAAyc,IAAA1d,EAAAmiB,EAAApV,OAAAoV,EAAAjV,gBAAA,IAGApJ,EAAAgc,WAAArc,KAAA,GAAApE,GAAAQ,UAAAC,EAAAC,EAAAC,KAEAqiB,UAAA,SAAAF,EAAA/U,EAAAgV,GAEA,GAAAkB,GAAAlB,EAAA,KACAkB,GAEA,WAAAA,EACAnB,EAAArV,OAAAuF,WAAAjF,GACAkW,YAAAC,QACApB,EAAArV,OAAAwF,SAAAlF,EAAAkW,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAJAnB,EAAArV,OAAAsF,UAAAhF,IAMA+T,QAAA,SAAAqC,EAAAC,GAEA,GAAA,GAAAD,EAAAvkB,OAAA,KAAA,iDAAAukB,CACA,OAAA7c,UAAA6c,EAAAnX,UAAA,EAAAoX,EAAA,EAAAA,EAAA,GAAA,IAAA,KAEA3B,cAAA,SAAAD,EAAA/hB,EAAA2gB,GAEA,GAAAiD,GAAA7B,EAAA/hB,GACAc,EAAA,GAAAvB,GAAAsZ,aAAA+K,EAAAzkB,QACAP,EAAA,EAAAP,EAAAulB,EAAAzkB,MACA,IAAA,GAAAwhB,EAEA,KAAAtiB,EAAAO,EAAAA,IACAkC,EAAAlC,GAAAglB,EAAAhlB,OAEA,MAAAP,EAAAO,EAAAA,IACAkC,EAAAlC,GAAAglB,EAAAhlB,GAAA+hB,CAEA,OAAA7f,IAEAmhB,YAAA,SAAAF,EAAA/hB,GAIA,IAAA,GAFA4jB,GAAA7B,EAAA/hB,GACAc,EAAA,GAAAvB,GAAAskB,YAAAD,EAAAzkB,QACAP,EAAA,EAAAP,EAAAulB,EAAAzkB,OAAAd,EAAAO,EAAAA,IACAkC,EAAAlC,GAAA,EAAAglB,EAAAhlB,EACA,OAAAkC,KAGAzB,EAAAJ,QAAAM,EAAAkhB,qBjCwvEGhf,eAAe,GAAGqM,cAAc,EAAEgW,uBAAuB,GAAGtS,mBAAmB,GAAGuS,aAAa,GAAGC,kBAAkB,GAAGC,sBAAsB,GAAGC,UAAU,GAAGC,cAAc,GAAGC,kBAAkB,GAAGC,gBAAgB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAGC,qBAAqB,GAAGC,yBAAyB,GAAGC,mBAAmB,GAAGC,kBAAkB,GAAGC,iBAAiB,GAAGC,SAAS,GAAGC,aAAa,GAAGC,sBAAsB,KAAKC,IAAI,SAASrmB,EAAQU,EAAOJ,GkCn1Fzc,GAAAM,GAAAZ,EAAA,eACAY,GAAAghB,KAAA,SAAAvgB,GAEAG,KAAAH,KAAAA,EACAG,KAAA8kB,gBAEA1lB,EAAAghB,KAAAngB,WACAuhB,cAAA,SAAAxU,EAAAnN,EAAA0K,GAEAvK,KAAA8kB,YAAA9X,EAAA,IAAAnN,GAAA0K,GAEAwR,cAAA,SAAA/O,EAAAnN,GAEA,MAAAG,MAAA8kB,YAAA9X,EAAA,IAAAnN,IAEAic,WAAA,SAAA3b,EAAA4kB,GAEA,IAAA,GAAAjgB,KAAAigB,GAAAD,YACA,CACA,GAAA5Y,GAAApH,EAAAqH,QAAA,KACAa,EAAAtG,SAAA5B,EAAAsH,UAAA,EAAAF,IACArM,EAAAiF,EAAAsH,UAAAF,EAAA,GACA+F,EAAA9R,EAAAqN,MAAAR,EACA,IAAAiF,EAAA1H,YAAA0H,EAAA1H,WAAA1K,MAAAA,EACA,CACA,GAAA0K,GAAAvK,KAAA+b,cAAA/O,EAAAnN,EACA0K,IAAA0H,EAAAxE,cAAAlD,OAKArL,EAAAJ,QAAAM,EAAAghB,OlCu1FG9e,eAAe,KAAK0jB,IAAI,SAASxmB,EAAQU,EAAOJ,GmCt3FnD,GAAAM,GAAAZ,EAAA,mBACAY,GAAA0O,eAAAtP,EAAA,oBACAY,EAAA4K,sBAAA,SAAAnK,GAEAG,KAAAH,KAAAA,GAEAT,EAAA4K,sBAAA/J,WACA8Q,KAAA3R,EAAA0O,eAAAG,YACA0H,MAAA,KACAoM,QAAA,KACA1J,IAAA,KACAC,UAAA,KACAC,UAAA,KACAC,WAAA,EACAra,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACA+L,KAAA,KACAjC,eAAA,KACA2C,QAAA,EAAAC,QAAA,EAAAC,SAAA,EAAAC,SAAA,EAAAC,cAAA,EACAX,cAAA,EAAAC,cAAA,EACAC,YAAA,EAAAC,aAAA,EACAC,oBAAA,EAAAC,qBAAA,EACA2N,MAAA,KACA7R,MAAA,EAAAC,OAAA,EACA8B,UAAA,SAAArK,EAAAwI,EAAAC,EAAAC,EAAAV,GAEA,GAAAM,GAAA5G,KAAAkL,SAAAlL,KAAAgL,QAAAnE,EAAA7G,KAAAmL,SAAAnL,KAAAiL,QACA/M,EAAA8B,KAAAsY,UAAAtZ,MAKA,IAJAgB,KAAAqY,KAAArY,KAAAqY,IAAArZ,QAAAd,IAEA8B,KAAAqY,IAAA,GAAAjZ,GAAAsZ,aAAAxa,IAEA8B,KAAAoL,aAEA,IAAA,GAAA3M,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAqY,IAAA5Z,GAAAuB,KAAAgL,QAAAhL,KAAAsY,UAAA7Z,EAAA,GAAAmI,EACA5G,KAAAqY,IAAA5Z,EAAA,GAAAuB,KAAAiL,QAAApE,EAAA7G,KAAAsY,UAAA7Z,GAAAoI,MAGA,KAAA,GAAApI,GAAA,EAAAP,EAAAO,EAAAA,GAAA,EAEAuB,KAAAqY,IAAA5Z,GAAAuB,KAAAgL,QAAAhL,KAAAsY,UAAA7Z,GAAAmI,EACA5G,KAAAqY,IAAA5Z,EAAA,GAAAuB,KAAAiL,QAAAjL,KAAAsY,UAAA7Z,EAAA,GAAAoI,GAIAmK,qBAAA,SAAAvK,EAAAE,EAAAsL,EAAAf,GAEA,GAIAjO,GACAgiB,EAAAC,EAAAjU,EAAA2H,EAAAC,EAAAsM,EALAC,EAAAnT,EAAAhB,KAAA9Q,SAAAwV,MACAoM,EAAA/hB,KAAA+hB,QACApM,EAAA3V,KAAA2V,MAEA0P,EAAA,EAAAve,EAAA,EAAA2K,EAAA,EAAA/S,EAAA,EAAAR,EAAAyX,EAAA3W,MAEA,IAAAiT,EAAAgD,mBAAAjW,OAqBA,IADA,GAAAujB,GAAAtQ,EAAAgD,mBACA/W,EAAA4I,EAAAue,GAAA,EACA,CAIA,IAHAJ,EAAA,EACAC,EAAA,EACAjiB,EAAA0S,EAAA7O,KAAAA,EACA7D,EAAA6D,EAAAA,IAAA2K,GAAA,EAAA/S,GAAA,EAEAuS,EAAAmU,EAAAzP,EAAA7O,IACA8R,EAAAmJ,EAAAtQ,GAAA8Q,EAAA7jB,GACAma,EAAAkJ,EAAAtQ,EAAA,GAAA8Q,EAAA7jB,EAAA,GACAymB,EAAApD,EAAAtQ,EAAA,GACAwT,IAAArM,EAAA3H,EAAAnC,IAAA+J,EAAA5H,EAAAlC,IAAAkC,EAAAjC,QAAAmW,EACAD,IAAAtM,EAAA3H,EAAAhC,IAAA4J,EAAA5H,EAAA/B,IAAA+B,EAAA9B,QAAAgW,CAEAjU,GAAAmU,GAAAJ,EAAAxe,EACAyK,EAAAmU,EAAA,GAAAH,EAAAve,MAlCA,MAAAzI,EAAA4I,EAAAue,GAAA,EACA,CAIA,IAHAJ,EAAA,EACAC,EAAA,EACAjiB,EAAA0S,EAAA7O,KAAAA,EACA7D,EAAA6D,EAAAA,IAAA2K,GAAA,EAEAR,EAAAmU,EAAAzP,EAAA7O,IACA8R,EAAAmJ,EAAAtQ,GACAoH,EAAAkJ,EAAAtQ,EAAA,GACA0T,EAAApD,EAAAtQ,EAAA,GACAwT,IAAArM,EAAA3H,EAAAnC,IAAA+J,EAAA5H,EAAAlC,IAAAkC,EAAAjC,QAAAmW,EACAD,IAAAtM,EAAA3H,EAAAhC,IAAA4J,EAAA5H,EAAA/B,IAAA+B,EAAA9B,QAAAgW,CAEAjU,GAAAmU,GAAAJ,EAAAxe,EACAyK,EAAAmU,EAAA,GAAAH,EAAAve,KAwBAzH,EAAAJ,QAAAM,EAAA4K,wBnC03FG1I,eAAe,GAAG+P,mBAAmB,KAAKiU,IAAI,SAAS9mB,EAAQU,EAAOJ,GoCz9FzE,GAAAM,GAAAZ,EAAA,eACAY,GAAAmb,KAAA,SAAAE,EAAAxJ,GAEAjR,KAAA2B,KAAA8Y,EACAza,KAAAiR,KAAAA,EACAjR,KAAAsO,kBAEAlP,EAAAmb,KAAAta,WACA9B,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACAgnB,gBAAA,EACAhb,WAAA,KACA0K,sBACAxH,cAAA,SAAAlD,GAEAvK,KAAAuK,WAAAA,EACAvK,KAAAulB,gBAAAvlB,KAAAiR,KAAA9Q,SAAAE,KACAL,KAAAiV,mBAAAjW,OAAA,GAEAwmB,kBAAA,SAAAnlB,GAEAL,KAAAulB,gBAAAvlB,KAAAiR,KAAA9Q,SAAAE,KAAAA,GAEAolB,kBAAA,WAEA,MAAAzlB,MAAAiR,KAAA9Q,SAAAE,KAAAL,KAAAulB,iBAEAjX,eAAA,WAEA,GAAA3M,GAAA3B,KAAA2B,IACA3B,MAAA7B,EAAAwD,EAAAxD,EACA6B,KAAAwR,EAAA7P,EAAA6P,EACAxR,KAAAyR,EAAA9P,EAAA8P,EACAzR,KAAAzB,EAAAoD,EAAApD,EACAyB,KAAAmhB,UAAAxf,EAAAwf,SAGA,KAAA,GADAuE,GAAA1lB,KAAAiR,KAAA9Q,SAAAwB,KAAA6L,MACA/O,EAAA,EAAAP,EAAAwnB,EAAA1mB,OAAAd,EAAAO,EAAAA,IAEA,GAAAinB,EAAAjnB,IAAAkD,EACA,CACA3B,KAAAyN,cAAA9L,EAAAyL,eAAApN,KAAAiR,KAAA9Q,SAAAuN,yBAAAjP,EAAAkD,EAAAyL,gBAAA,KACA,UAKAlO,EAAAJ,QAAAM,EAAAmb,OpC69FGjZ,eAAe,KAAKqkB,IAAI,SAASnnB,EAAQU,EAAOJ,GqC3gGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAA+gB,SAAA,SAAAtgB,EAAAuO,GAEApO,KAAAH,KAAAA,EACAG,KAAAoO,SAAAA,GAGAhP,EAAA+gB,SAAAiB,qBACAwE,SAAAzmB,KAAA0mB,YAAAC,SACAC,OAAA5mB,KAAA0mB,YAAAG,OACAC,SAAA9mB,KAAA0mB,YAAAK,IACAC,OAAAhnB,KAAA0mB,YAAAO,QAGAhnB,EAAA+gB,SAAAlgB,WACA9B,EAAA,EAAAqT,EAAA,EAAAC,EAAA,EAAAlT,EAAA,EACA6O,eAAA,KACA+T,UAAAhiB,KAAA0mB,YAAAO,QAMAlnB,EAAAJ,QAAAM,EAAA+gB,WrC+gGG7e,eAAe,KAAK+kB,IAAI,SAAS7nB,EAAQU,EAAOJ,GsCtiGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAoC,WAAA,aAEApC,EAAAoC,WAAAvB,WACAsC,KAAA,KAAAH,SAAA,KACAU,UAAA,KACAxC,MAAA,EACAkC,MAAA,EAAAnC,KAAA,EAAAD,SAAA,GAAAsC,QAAA,EACAT,UAAA,EACAK,QAAA,EAAAS,YAAA,EAAAvC,IAAA,EACAqB,QAAA,KAAAC,MAAA,KAAAC,WAAA,KAAAC,QAAA,MAEA9C,EAAAJ,QAAAM,EAAAoC,atC0iGGF,eAAe,KAAKglB,IAAI,SAAS9nB,EAAQU,EAAOJ,GuCtjGnD,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAAihB,kBAAA,SAAAzT,GAEA5M,KAAA6M,OAAA,GAAAzN,GAAAsN,OAAAE,GACA5M,KAAA8M,UACA9M,KAAA8M,OAAA9N,OAAA,EAAA4N,GAEAxN,EAAAihB,kBAAApgB,WACAwV,UAAA,EACAxI,cAAA,WAEA,MAAAjN,MAAA8M,OAAA9N,OAAA,GAEAkO,SAAA,SAAAC,EAAA9M,EAAAoG,EAAAE,GAEAwG,GAAA,EACAnN,KAAA8M,OAAAK,GAAA9M,EACAL,KAAA8M,OAAAK,EAAA,GAAA1G,EACAzG,KAAA8M,OAAAK,EAAA,GAAAxG,GAEAzG,MAAA,SAAAC,EAAAC,EAAAC,EAAAgN,EAAA5M,GAEA,GAAAqM,GAAA9M,KAAA8M,MACA,MAAAzM,EAAAyM,EAAA,IAAA,CAEA,GAAAmE,GAAA9Q,EAAAwV,MAAA3V,KAAAyV,UAEA,IAAApV,GAAAyM,EAAAA,EAAA9N,OAAA,GAIA,MAFAiS,GAAAxK,IAAAwK,EAAAtP,KAAA8E,EAAAqG,EAAAA,EAAA9N,OAAA,GAAAiS,EAAAxK,GAAAhG,OACAwQ,EAAAtK,IAAAsK,EAAAtP,KAAAgF,EAAAmG,EAAAA,EAAA9N,OAAA,GAAAiS,EAAAtK,GAAAlG,EAKA,IAAA0M,GAAA/N,EAAAQ,UAAAc,aAAAoM,EAAAzM,EAAA,GACA+Z,EAAAtN,EAAAK,EAAA,GACAkN,EAAAvN,EAAAK,EAAA,GACA2E,EAAAhF,EAAAK,GACA4E,EAAA,GAAA1R,EAAAyR,IAAAhF,EAAAK,EAAA,IAAA2E,EACAC,GAAA/R,KAAA6M,OAAAmF,gBAAA7E,EAAA,EAAA,EAAA4E,GAEAd,EAAAxK,IAAAwK,EAAAtP,KAAA8E,EAAA2T,GAAAtN,EAAAK,EAAA,GAAAiN,GAAArI,EAAAd,EAAAxK,GAAAhG,EACAwQ,EAAAtK,IAAAsK,EAAAtP,KAAAgF,EAAA0T,GAAAvN,EAAAK,EAAA,GAAAkN,GAAAtI,EAAAd,EAAAtK,GAAAlG,KAGAvB,EAAAJ,QAAAM,EAAAihB,oBvC0jGG/e,eAAe,GAAGqM,cAAc,EAAEC,WAAW,KAAK2Y,IAAI,SAAS/nB,EAAQU,EAAOJ,GwC7kGjF,GAAAM,GAAAZ,EAAA,eACAY,GAAAQ,UAAApB,EAAA,eACAY,EAAAiF,mBAAA7F,EAAA,wBACAY,EAAAqC,eAAAjD,EAAA,oBACAY,EAAA8K,sBAAA1L,EAAA,2BACAY,EAAAgG,MAAA5G,EAAA,WACAY,EAAA8F,UAAA1G,EAAA,eACAY,EAAA6F,YAAAzG,EAAA,iBACAY,EAAA+F,YAAA3G,EAAA,iBACAY,EAAAuN,mBAAAnO,EAAA,wBACAY,EAAA0O,eAAAtP,EAAA,oBACAY,EAAAwR,SAAApS,EAAA,cACAY,EAAA+O,KAAA3P,EAAA,UACAY,EAAA6K,sBAAAzL,EAAA,2BACAY,EAAAmS,cAAA/S,EAAA,mBACAY,EAAAsN,OAAAlO,EAAA,YACAY,EAAA2U,kBAAAvV,EAAA,uBACAY,EAAAqV,UAAAjW,EAAA,eACAY,EAAAgV,MAAA5V,EAAA,WACAY,EAAAuV,cAAAnW,EAAA,mBACAY,EAAA0V,YAAAtW,EAAA,iBACAY,EAAAoW,cAAAhX,EAAA,mBACAY,EAAAyW,cAAArX,EAAA,mBACAY,EAAAyY,iBAAArZ,EAAA,sBACAY,EAAA2W,aAAAvX,EAAA,kBACAY,EAAA2Y,qBAAAvZ,EAAA,0BACAY,EAAA2K,eAAAvL,EAAA,oBACAY,EAAA0K,iBAAAtL,EAAA,sBACAY,EAAA0a,eAAAtb,EAAA,oBACAY,EAAA+a,cAAA3b,EAAA,mBACAY,EAAAod,eAAAhe,EAAA,oBACAY,EAAAugB,aAAAnhB,EAAA,kBACAY,EAAAob,SAAAhc,EAAA,cACAY,EAAAkhB,mBAAA9hB,EAAA,wBACAY,EAAAghB,KAAA5hB,EAAA,aACAY,EAAA4K,sBAAAxL,EAAA,2BACAY,EAAA+gB,SAAA3hB,EAAA,cACAY,EAAAmb,KAAA/b,EAAA,UACAY,EAAAoC,WAAAhD,EAAA,gBACAY,EAAAihB,kBAAA7hB,EAAA,uBACAU,EAAAJ,QAAAM,IxC6mGGkC,eAAe,GAAGqM,cAAc,EAAE6Y,mBAAmB,EAAEC,uBAAuB,EAAEC,UAAU,EAAEC,0BAA0B,EAAEjd,cAAc,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAE+Z,uBAAuB,GAAGtS,mBAAmB,GAAG+K,SAAS,GAAGwH,aAAa,GAAGrY,0BAA0B,GAAGsY,kBAAkB,GAAGjW,WAAW,GAAGkW,sBAAsB,GAAGC,UAAU,GAAGC,cAAc,GAAGC,kBAAkB,GAAGC,gBAAgB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAG/H,iBAAiB,GAAGgI,qBAAqB,GAAGC,yBAAyB,GAAG9Y,mBAAmB,GAAGC,qBAAqB,GAAG8Y,mBAAmB,GAAGC,kBAAkB,GAAGoC,aAAa,GAAGC,mBAAmB,GAAGpC,iBAAiB,GAAGqC,uBAAuB,GAAGC,YAAY,GAAGrb,0BAA0B,GAAG4Q,SAAS,GAAGqI,aAAa,GAAGxgB,eAAe,GAAGygB,sBAAsB,KAAKoC,IAAI,SAASxoB,EAAQU,EAAOJ,GyClrG10BI,EAAAJ,SACAyX,OAAA,IAAAvV,KAAAimB,GACAlX,OAAA/O,KAAAimB,GAAA,IACAnQ,QACA4B,aAAA,mBAAA,cAAA4K,MAAA5K,aACAgL,YAAA,mBAAA,aAAAJ,MAAAI,kBzCurGMwD,IAAI,SAAS1oB,EAAQU,EAAOJ,G0CxqGlC,QAAAO,GAAA8nB,GAIA,GAFAhoB,KAAAioB,UAAAroB,KAAAiB,OAEAmnB,EAEA,KAAA,IAAAxoB,OAAA,mCAGA,IAAA,gBAAAwoB,GAEA,KAAA,IAAAxoB,OAAA,2GAQAqB,MAAAmnB,UAAAA,EAOAnnB,KAAAG,SAAA,GAAAf,GAAAob,SAAA2M,GACAnnB,KAAAG,SAAAsP,uBAOAzP,KAAA0B,UAAA,GAAAtC,GAAAiF,mBAAA8iB,GAOAnnB,KAAAqnB,MAAA,GAAAjoB,GAAAqC,eAAAzB,KAAA0B,WAOA1B,KAAAsnB,iBAEA,KAAA,GAAA7oB,GAAA,EAAAP,EAAA8B,KAAAG,SAAAqN,MAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwT,GAAAjS,KAAAG,SAAAqN,MAAA/O,GACA8L,EAAA0H,EAAA1H,WACAgd,EAAA,GAAApoB,MAAAioB,SAIA,IAHApnB,KAAAsnB,eAAA9jB,KAAA+jB,GACAvnB,KAAAwnB,SAAAD,GAEAhd,YAAAnL,GAAA0K,iBACA,CACA,GAAA2d,GAAAld,EAAAlC,eAAAxI,KACA6nB,EAAA1nB,KAAA2nB,aAAA1V,EAAA1H,EACA0H,GAAA2V,cAAAF,EACAzV,EAAA4V,kBAAAJ,EACAF,EAAAC,SAAAE,OAEA,CAAA,KAAAnd,YAAAnL,GAAA2K,gBASA,QAPA,IAAAiE,GAAAhO,KAAA8nB,WAAA7V,EAAA1H,EACA0H,GAAA8V,YAAA/Z,EACAiE,EAAA+V,gBAAAzd,EAAA1K,KACA0nB,EAAAC,SAAAxZ,IAcAhO,KAAAioB,YAAA,EAzGA,GAAA7oB,GAAAZ,EAAA,mBACA0pB,EAAA1pB,EAAA,yBAGAY,GAAA+O,KAAAI,OAAA,EAwGAlP,EAAA8oB,UAAA,SAAAC,GACA,GAAAvkB,GAAAqkB,EAAAG,UAAAD,EAEA,KAAAvkB,EAEA,KAAA,IAAAlF,OAAA,eAAAypB,EAAA,0CAGA,OAAA,IAAA/oB,GAAAwE,IAGAxE,EAAAY,UAAAqoB,OAAAC,OAAAppB,KAAAioB,UAAAnnB,WACAZ,EAAAY,UAAAuoB,YAAAnpB,EACAH,EAAAJ,QAAAO,EAEAipB,OAAAG,iBAAAppB,EAAAY,WAYAgoB,YACAS,IAAA,WAEA,MAAA1oB,MAAA2oB,kBAAAtpB,EAAAY,UAAA2oB,qBAGAC,IAAA,SAAA7c,GAEAhM,KAAA2oB,gBAAA3c,EAAA3M,EAAAY,UAAA2oB,oBAAAzpB,KAAAioB,UAAAnnB,UAAA0oB,oBAUAtpB,EAAAY,UAAAiC,OAAA,SAAA4mB,GAEA9oB,KAAAqnB,MAAAnlB,OAAA4mB,GACA9oB,KAAAqnB,MAAAnnB,MAAAF,KAAAG,UACAH,KAAAG,SAAAsP,sBAKA,KAAA,GAHAwE,GAAAjU,KAAAG,SAAA8T,UACAzG,EAAAxN,KAAAG,SAAAqN,MAEA/O,EAAA,EAAAP,EAAA+V,EAAAjV,OAAAd,EAAAO,EAAAA,IAEAuB,KAAA+oB,SAAAtqB,GAAAuB,KAAAsnB,eAAArT,EAAAxV,GAGA,KAAAA,EAAA,EAAAP,EAAAsP,EAAAxO,OAAAd,EAAAO,EAAAA,IACA,CACA,GAAAwT,GAAAzE,EAAA/O,GACA8L,EAAA0H,EAAA1H,WACAgd,EAAAvnB,KAAAsnB,eAAA7oB,EAEA,IAAA8L,EAAA,CAMA,GAAAwG,GAAAxG,EAAAwG,IACA,IAAAA,IAAA3R,EAAA0O,eAAAzH,OACA,CACA,GAAAkE,EAAAlC,kBAEA4J,EAAA4V,mBAAA5V,EAAA4V,oBAAAtd,EAAAlC,eAAAxI,MACA,CACA,GAAA4nB,GAAAld,EAAAlC,eAAAxI,IAMA,IALAmpB,SAAA/W,EAAA2V,gBAEA3V,EAAA2V,cAAAqB,SAAA,GAEAhX,EAAAiX,QAAAjX,EAAAiX,YACAF,SAAA/W,EAAAiX,QAAAzB,GAEAxV,EAAAiX,QAAAzB,GAAAwB,SAAA,MAGA,CACA,GAAAvB,GAAA1nB,KAAA2nB,aAAA1V,EAAA1H,EACAgd,GAAAC,SAAAE,GAEAzV,EAAA2V,cAAA3V,EAAAiX,QAAAzB,GACAxV,EAAA4V,kBAAAJ,EAIA,GAAAxW,GAAAgB,EAAAhB,IAEAsW,GAAA4B,SAAA1iB,EAAAwK,EAAAjC,OAAAzE,EAAA9D,EAAAwK,EAAAnC,IAAAvE,EAAA5D,EAAAsK,EAAAlC,IACAwY,EAAA4B,SAAAxiB,EAAAsK,EAAA9B,OAAA5E,EAAA9D,EAAAwK,EAAAhC,IAAA1E,EAAA5D,EAAAsK,EAAA/B,IACAqY,EAAA/G,MAAA/Z,EAAAwK,EAAA5B,YACAkY,EAAA/G,MAAA7Z,EAAAsK,EAAA3B,YACAiY,EAAA/Y,WAAAyD,EAAAhB,KAAA7B,cAAAhQ,EAAA2Q,QACAkB,EAAA1B,aACAgY,EAAA/G,MAAA/Z,GAAA8gB,EAAA/G,MAAA/Z,EACA8gB,EAAA/Y,UAAA+Y,EAAA/Y,UAEAyC,EAAAzB,YAAApQ,EAAA+O,KAAAI,QACAgZ,EAAA/G,MAAA7Z,GAAA4gB,EAAA/G,MAAA7Z,EACA4gB,EAAA/Y,UAAA+Y,EAAA/Y,UAEAyD,EAAA2V,cAAAzG,UAAAlP,EAAAkP,UACAlP,EAAA2V,cAAAwB,KAAAjqB,KAAA0G,MAAAwjB,SAAApX,EAAA9T,EAAA8T,EAAAT,EAAAS,EAAAR,QAEA,CAAA,GAAAV,IAAA3R,EAAA0O,eAAAG,aAAA8C,IAAA3R,EAAA0O,eAAAE,KA8BA,CACAuZ,EAAA0B,SAAA,CACA,UA9BA,IAAAhX,EAAA+V,iBAAA/V,EAAA+V,kBAAAzd,EAAA1K,KACA,CACA,GAAA4iB,GAAAlY,EAAA1K,IAQA,IAPAmpB,SAAA/W,EAAA8V,cAEA9V,EAAA8V,YAAAkB,SAAA,GAGAhX,EAAAqX,OAAArX,EAAAqX,WAEAN,SAAA/W,EAAAqX,OAAA7G,GAEAxQ,EAAAqX,OAAA7G,GAAAwG,SAAA,MAGA,CACA,GAAAjb,GAAAhO,KAAA8nB,WAAA7V,EAAA1H,EACAgd,GAAAC,SAAAxZ,GAGAiE,EAAA8V,YAAA9V,EAAAqX,OAAA7G,GACAxQ,EAAA+V,gBAAAvF,EAGAlY,EAAAyG,qBAAAiB,EAAAhB,KAAA9Q,SAAAsG,EAAAwL,EAAAhB,KAAA9Q,SAAAwG,EAAAsL,EAAAA,EAAA8V,YAAAjX,UAQAyW,EAAA0B,SAAA,EAEA1B,EAAA9mB,MAAAwR,EAAA1T,MArFAgpB,GAAA0B,SAAA,IA8FA5pB,EAAAY,UAAA2oB,oBAAA,WAEA5oB,KAAAI,SAAAJ,KAAAI,UAAAmpB,KAAAC,KACA,IAAAC,GAAA,MAAAF,KAAAC,MAAAxpB,KAAAI,SACAJ,MAAAI,SAAAmpB,KAAAC,MAEAxpB,KAAAkC,OAAAunB,GAEAtqB,KAAAioB,UAAAnnB,UAAA0oB,gBAAA5pB,KAAAiB,OAUAX,EAAAY,UAAA0nB,aAAA,SAAA1V,EAAA1H,GAEA,GAAAmf,GAAAnf,EAAAlC,eACAshB,EAAAD,EAAAzjB,KAAAoC,eACAuhB,EAAA,GAAAzqB,MAAA0qB,UAAAH,EAAAjjB,EACAijB,EAAA/iB,EACA+iB,EAAApjB,OAAAojB,EAAA7iB,OAAA6iB,EAAA9iB,MACA8iB,EAAApjB,OAAAojB,EAAA9iB,MAAA8iB,EAAA7iB,QACAijB,EAAA,GAAA3qB,MAAA4qB,QAAAJ,EAAAC,GACAlC,EAAA,GAAAvoB,MAAA6qB,OAAAF,GAEAG,EAAAP,EAAApjB,OAAA,GAAAtF,KAAAimB,GAAA,CAUA,OATAS,GAAAlH,MAAA/Z,EAAA8D,EAAA3D,MAAA8iB,EAAAtiB,cAAAmD,EAAAmE,OACAgZ,EAAAlH,MAAA7Z,EAAA4D,EAAA1D,OAAA6iB,EAAAriB,eAAAkD,EAAAoE,OACA+Y,EAAAlZ,SAAAyb,EAAA1f,EAAAiE,SAAApP,EAAA2Q,OACA2X,EAAAwC,OAAAzjB,GAAA,GAAAijB,EAAAtiB,cAAAsiB,EAAApiB,SAAAoiB,EAAA9iB,MACA8gB,EAAAwC,OAAAvjB,EAAA,GAAA,GAAA+iB,EAAAriB,eAAAqiB,EAAAniB,SAAAmiB,EAAA7iB,OACA6gB,EAAAjnB,MAAA8J,EAAAhM,EAEA0T,EAAAiX,QAAAjX,EAAAiX,YACAjX,EAAAiX,QAAAQ,EAAA7pB,MAAA6nB,EACAA,GASAroB,EAAAY,UAAA6nB,WAAA,SAAA7V,EAAA1H,GAEA,GAAAmf,GAAAnf,EAAAlC,eACAshB,EAAAD,EAAAzjB,KAAAoC,eACA8hB,EAAA,GAAAhrB,MAAA4qB,QAAAJ,GAEAS,EAAA,GAAAjrB,MAAA6O,KAAAqc,KACAF,EACA,GAAAzR,cAAAnO,EAAA8N,IAAArZ,QACA,GAAA0Z,cAAAnO,EAAA8N,KACA,GAAAqL,aAAAnZ,EAAAgO,WACApZ,KAAA6O,KAAAqc,KAAAC,WAAAC,UASA,OAPAH,GAAAI,cAAA,IAEAJ,EAAA3pB,MAAA8J,EAAAhM,EAEA0T,EAAAqX,OAAArX,EAAAqX,WACArX,EAAAqX,OAAA/e,EAAA1K,MAAAuqB,EAEAA,K1CgsGG3K,kBAAkB,GAAGgL,yBAAyB,KAAKC,IAAI,SAASlsB,EAAQU,EAAOJ,G2CtgHlF,GAAAopB,GAAA1pB,EAAA,gBAEAW,MAAAI,QAAAorB,OAAAC,kBAAA1C,GACA/oB,KAAA0rB,OAAAC,IAAA5C,O3CohHG6C,gBAAgB,KAAKC,IAAI,SAASxsB,EAAQU,EAAOJ,G4CliHpD,GAAAmsB,GAAA9rB,KAAAI,QAAA0rB,SACAC,EAAA/rB,KAAA0G,MAAAqlB,MACA9rB,EAAAZ,EAAA,mBAEA0pB,EAAAhpB,EAAAJ,QAAA,WACA,MAAA,UAAAqsB,EAAA5oB,GAEA,IAAA4oB,EAAAxpB,OAAAwpB,EAAAC,SAAAD,EAAAxpB,KAAAgU,MACA,MAAApT,IAQA,IAAA8oB,GAAAF,EAAAG,IAAA/e,OAAA,EAAA4e,EAAAG,IAAA9lB,YAAA,MAAA,SACA+lB,GACAhmB,YAAA4lB,EAAA5lB,YACAimB,QAAAP,EAAAQ,kBAAAC,MAEApmB,EAAA6lB,EAAAG,IAAA/e,OAAA,EAAA4e,EAAAG,IAAA9lB,YAAA,KAAA,EAGAxF,MAAA2rB,IAAAR,EAAAtrB,KAAA,SAAAwrB,EAAAE,EAAA,SAAAK,GAEA,GAAAC,GAAA,GAAAzsB,GAAAgG,MAAApF,KAAA8rB,IAAAC,aAAAzmB,EAAAsmB,EAAArmB,aAGAymB,EAAA,GAAA5sB,GAAAkhB,mBAAA,GAAAlhB,GAAA8K,sBAAA2hB,IACAhoB,EAAAmoB,EAAAvL,iBAAA0K,EAAAxpB,KAEAwpB,GAAAhE,UAAAtjB,EACAsnB,EAAAU,WAAAA,EACA3D,EAAA+D,gBACA/D,EAAAG,UAAA8C,EAAAtrB,MAAAsrB,EAAAhE,WAIA+D,EAAAgB,KAAAL,EAAApmB,MAAA,SAAAQ,EAAAkmB,GACAlmB,EAAAoC,eAAA+jB,UACAD,IAGAlmB,EAAAoC,eAAAgkB,KAAA,SAAAF,IAEA5pB,MAKA2lB,GAAAG,aACAH,EAAA+D,eAAA,I5CqiHGxM,kBAAkB,KAAK6M,IAAI,SAAS9tB,EAAQU,EAAOJ,G6CzlHtDI,EAAAJ,SACAopB,YAAA1pB,EAAA,iBACAmsB,OAAAnsB,EAAA,e7C6lHG+tB,WAAW,GAAGxB,gBAAgB,UAAU","file":"pixi-spine.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @namespace PIXI.spine\r\n */\r\nmodule.exports = PIXI.spine = {\r\n    Spine:          require('./Spine'),\r\n    SpineRuntime:   require('./SpineRuntime'),\r\n    loaders:        require('./loaders')\r\n};\r\n",null,"var spine = require('../SpineUtil');\r\nspine.Animation = function (name, timelines, duration)\r\n{\r\n    this.name = name;\r\n    this.timelines = timelines;\r\n    this.duration = duration;\r\n};\r\nspine.Animation.prototype = {\r\n    apply: function (skeleton, lastTime, time, loop, events)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\r\n    },\r\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\r\n    {\r\n        if (loop && this.duration != 0)\r\n        {\r\n            time %= this.duration;\r\n            lastTime %= this.duration;\r\n        }\r\n        var timelines = this.timelines;\r\n        for (var i = 0, n = timelines.length; i < n; i++)\r\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\r\n    }\r\n};\r\nspine.Animation.binarySearch = function (values, target, step)\r\n{\r\n    var low = 0;\r\n    var high = Math.floor(values.length / step) - 2;\r\n    if (!high) return step;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[(current + 1) * step] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return (low + 1) * step;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.binarySearch1 = function (values, target)\r\n{\r\n    var low = 0;\r\n    var high = values.length - 2;\r\n    if (!high) return 1;\r\n    var current = high >>> 1;\r\n    while (true)\r\n    {\r\n        if (values[current + 1] <= target)\r\n            low = current + 1;\r\n        else\r\n            high = current;\r\n        if (low == high) return low + 1;\r\n        current = (low + high) >>> 1;\r\n    }\r\n};\r\nspine.Animation.linearSearch = function (values, target, step)\r\n{\r\n    for (var i = 0, last = values.length - step; i <= last; i += step)\r\n        if (values[i] > target) return i;\r\n    return -1;\r\n};\r\nmodule.exports = spine.Animation;\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.AnimationState = function (stateData)\r\n{\r\n    this.data = stateData;\r\n    this.tracks = [];\r\n    this.events = [];\r\n};\r\nspine.AnimationState.prototype = {\r\n    onStart: null,\r\n    onEnd: null,\r\n    onComplete: null,\r\n    onEvent: null,\r\n    timeScale: 1,\r\n    update: function (delta)\r\n    {\r\n        delta *= this.timeScale;\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            current.time += delta * current.timeScale;\r\n            if (current.previous)\r\n            {\r\n                var previousDelta = delta * current.previous.timeScale;\r\n                current.previous.time += previousDelta;\r\n                current.mixTime += previousDelta;\r\n            }\r\n\r\n            var next = current.next;\r\n            if (next)\r\n            {\r\n                next.time = current.lastTime - next.delay;\r\n                if (next.time >= 0) this.setCurrent(i, next);\r\n            } else {\r\n                // End non-looping animation when it reaches its end time and there is no next entry.\r\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\r\n            }\r\n        }\r\n    },\r\n    apply: function (skeleton)\r\n    {\r\n        skeleton.resetDrawOrder();\r\n\r\n        for (var i = 0; i < this.tracks.length; i++)\r\n        {\r\n            var current = this.tracks[i];\r\n            if (!current) continue;\r\n\r\n            this.events.length = 0;\r\n\r\n            var time = current.time;\r\n            var lastTime = current.lastTime;\r\n            var endTime = current.endTime;\r\n            var loop = current.loop;\r\n            if (!loop && time > endTime) time = endTime;\r\n\r\n            var previous = current.previous;\r\n            if (!previous)\r\n            {\r\n                if (current.mix == 1)\r\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\r\n                else\r\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\r\n            } else {\r\n                var previousTime = previous.time;\r\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\r\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\r\n\r\n                var alpha = current.mixTime / current.mixDuration * current.mix;\r\n                if (alpha >= 1)\r\n                {\r\n                    alpha = 1;\r\n                    current.previous = null;\r\n                }\r\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\r\n            }\r\n\r\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\r\n            {\r\n                var event = this.events[ii];\r\n                if (current.onEvent) current.onEvent(i, event);\r\n                if (this.onEvent) this.onEvent(i, event);\r\n            }\r\n\r\n            // Check if completed the animation or a loop iteration.\r\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\r\n            {\r\n                var count = Math.floor(time / endTime);\r\n                if (current.onComplete) current.onComplete(i, count);\r\n                if (this.onComplete) this.onComplete(i, count);\r\n            }\r\n\r\n            current.lastTime = current.time;\r\n        }\r\n    },\r\n    clearTracks: function ()\r\n    {\r\n        for (var i = 0, n = this.tracks.length; i < n; i++)\r\n            this.clearTrack(i);\r\n        this.tracks.length = 0;\r\n    },\r\n    clearTrack: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return;\r\n        var current = this.tracks[trackIndex];\r\n        if (!current) return;\r\n\r\n        if (current.onEnd) current.onEnd(trackIndex);\r\n        if (this.onEnd) this.onEnd(trackIndex);\r\n\r\n        this.tracks[trackIndex] = null;\r\n    },\r\n    _expandToIndex: function (index)\r\n    {\r\n        if (index < this.tracks.length) return this.tracks[index];\r\n        while (index >= this.tracks.length)\r\n            this.tracks.push(null);\r\n        return null;\r\n    },\r\n    setCurrent: function (index, entry)\r\n    {\r\n        var current = this._expandToIndex(index);\r\n        if (current)\r\n        {\r\n            var previous = current.previous;\r\n            current.previous = null;\r\n\r\n            if (current.onEnd) current.onEnd(index);\r\n            if (this.onEnd) this.onEnd(index);\r\n\r\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\r\n            if (entry.mixDuration > 0)\r\n            {\r\n                entry.mixTime = 0;\r\n                // If a mix is in progress, mix from the closest animation.\r\n                if (previous && current.mixTime / current.mixDuration < 0.5)\r\n                    entry.previous = previous;\r\n                else\r\n                    entry.previous = current;\r\n            }\r\n        }\r\n\r\n        this.tracks[index] = entry;\r\n\r\n        if (entry.onStart) entry.onStart(index);\r\n        if (this.onStart) this.onStart(index);\r\n    },\r\n    setAnimationByName: function (trackIndex, animationName, loop)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.setAnimation(trackIndex, animation, loop);\r\n    },\r\n    /** Set the current animation. Any queued animations are cleared. */\r\n    setAnimation: function (trackIndex, animation, loop)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n        this.setCurrent(trackIndex, entry);\r\n        return entry;\r\n    },\r\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\r\n    {\r\n        var animation = this.data.skeletonData.findAnimation(animationName);\r\n        if (!animation) throw \"Animation not found: \" + animationName;\r\n        return this.addAnimation(trackIndex, animation, loop, delay);\r\n    },\r\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\r\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\r\n    addAnimation: function (trackIndex, animation, loop, delay)\r\n    {\r\n        var entry = new spine.TrackEntry();\r\n        entry.animation = animation;\r\n        entry.loop = loop;\r\n        entry.endTime = animation.duration;\r\n\r\n        var last = this._expandToIndex(trackIndex);\r\n        if (last)\r\n        {\r\n            while (last.next)\r\n                last = last.next;\r\n            last.next = entry;\r\n        } else\r\n            this.tracks[trackIndex] = entry;\r\n\r\n        if (delay <= 0)\r\n        {\r\n            if (last)\r\n                delay += last.endTime - this.data.getMix(last.animation, animation);\r\n            else\r\n                delay = 0;\r\n        }\r\n        entry.delay = delay;\r\n\r\n        return entry;\r\n    },\r\n    /** May be null. */\r\n    getCurrent: function (trackIndex)\r\n    {\r\n        if (trackIndex >= this.tracks.length) return null;\r\n        return this.tracks[trackIndex];\r\n    }\r\n};\r\nmodule.exports = spine.AnimationState;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AnimationStateData = function (skeletonData)\r\n{\r\n    this.skeletonData = skeletonData;\r\n    this.animationToMixTime = {};\r\n};\r\nspine.AnimationStateData.prototype = {\r\n    defaultMix: 0,\r\n    setMixByName: function (fromName, toName, duration)\r\n    {\r\n        var from = this.skeletonData.findAnimation(fromName);\r\n        if (!from) throw \"Animation not found: \" + fromName;\r\n        var to = this.skeletonData.findAnimation(toName);\r\n        if (!to) throw \"Animation not found: \" + toName;\r\n        this.setMix(from, to, duration);\r\n    },\r\n    setMix: function (from, to, duration)\r\n    {\r\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\r\n    },\r\n    getMix: function (from, to)\r\n    {\r\n        var key = from.name + \":\" + to.name;\r\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\r\n    }\r\n};\r\nmodule.exports = spine.AnimationStateData;\r\n\r\n","var spine = require('../SpineUtil');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasRegion = require('./AtlasRegion');\n\nspine.Atlas = function (atlasText, baseUrl, crossOrigin)\n{\n    if (baseUrl && baseUrl.lastIndexOf('/') !== (baseUrl.length-1))\n    {\n        baseUrl += '/';\n    }\n\n    this.pages = [];\n    this.regions = [];\n\n    this.texturesLoading = 0;\n\n    var self = this;\n    var resolution = PIXI.utils.getResolutionOfUrl(baseUrl);\n\n    var reader = new spine.AtlasReader(atlasText);\n    var tuple = [];\n    tuple.length = 4;\n    var page = null;\n    while (true)\n    {\n        var line = reader.readLine();\n        if (line === null) break;\n        line = reader.trim(line);\n        if (!line.length)\n            page = null;\n        else if (!page)\n        {\n            page = new spine.AtlasPage();\n            page.name = line;\n\n            if (reader.readTuple(tuple) == 2)\n            { // size is only optional for an atlas packed with an old TexturePacker.\n                page.width = parseInt(tuple[0]);\n                page.height = parseInt(tuple[1]);\n                reader.readTuple(tuple);\n            } else {\n                //and I dont want to add support of old format for meshes! we need UVs NOW!\n                console.log(\"ERROR spine atlas page \" + page.name + \": meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)\");\n            }\n            page.format = spine.Atlas.Format[tuple[0]];\n\n            reader.readTuple(tuple);\n            page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\n            page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\n\n            var direction = reader.readValue();\n            page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\n            page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\n            if (direction == \"x\")\n                page.uWrap = spine.Atlas.TextureWrap.repeat;\n            else if (direction == \"y\")\n                page.vWrap = spine.Atlas.TextureWrap.repeat;\n            else if (direction == \"xy\")\n                page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\n\n            page.rendererObject = PIXI.BaseTexture.fromImage(baseUrl + line, crossOrigin);\n\n            this.pages.push(page);\n\n        } else {\n            var region = new spine.AtlasRegion();\n            region.name = line;\n            region.page = page;\n\n            region.rotate = reader.readValue() == \"true\";\n\n            reader.readTuple(tuple);\n            var x = parseInt(tuple[0]) / resolution;\n            var y = parseInt(tuple[1]) / resolution;\n\n            reader.readTuple(tuple);\n            var width = parseInt(tuple[0]) / resolution;\n            var height = parseInt(tuple[1]) / resolution;\n\n            region.u = x / page.width;\n            region.v = y / page.height;\n            if (region.rotate)\n            {\n                region.u2 = (x + height) / page.width;\n                region.v2 = (y + width) / page.height;\n            } else {\n                region.u2 = (x + width) / page.width;\n                region.v2 = (y + height) / page.height;\n            }\n            region.x = x;\n            region.y = y;\n            region.width = Math.abs(width);\n            region.height = Math.abs(height);\n\n            if (reader.readTuple(tuple) == 4)\n            { // split is optional\n                region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                if (reader.readTuple(tuple) == 4)\n                { // pad is optional, but only present with splits\n                    region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                    reader.readTuple(tuple);\n                }\n            }\n\n            region.originalWidth = parseInt(tuple[0]) / resolution;\n            region.originalHeight = parseInt(tuple[1]) / resolution;\n\n            reader.readTuple(tuple);\n            region.offsetX = parseInt(tuple[0]) / resolution;\n            region.offsetY = parseInt(tuple[1]) / resolution;\n\n            region.index = parseInt(reader.readValue());\n\n            this.regions.push(region);\n        }\n    }\n};\nspine.Atlas.prototype = {\n    findRegion: function (name)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n            if (regions[i].name == name) return regions[i];\n        return null;\n    },\n    dispose: function ()\n    {\n        var pages = this.pages;\n        for (var i = 0, n = pages.length; i < n; i++)\n            pages[i].rendererObject.destroy(true);\n    },\n    updateUVs: function (page)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n        {\n            var region = regions[i];\n            if (region.page != page) continue;\n            region.u = region.x / page.width;\n            region.v = region.y / page.height;\n            if (region.rotate)\n            {\n                region.u2 = (region.x + region.height) / page.width;\n                region.v2 = (region.y + region.width) / page.height;\n            } else {\n                region.u2 = (region.x + region.width) / page.width;\n                region.v2 = (region.y + region.height) / page.height;\n            }\n        }\n    }\n};\n\nspine.Atlas.Format = {\n    alpha: 0,\n    intensity: 1,\n    luminanceAlpha: 2,\n    rgb565: 3,\n    rgba4444: 4,\n    rgb888: 5,\n    rgba8888: 6\n};\n\nspine.Atlas.TextureFilter = {\n    nearest: 0,\n    linear: 1,\n    mipMap: 2,\n    mipMapNearestNearest: 3,\n    mipMapLinearNearest: 4,\n    mipMapNearestLinear: 5,\n    mipMapLinearLinear: 6\n};\n\nspine.Atlas.TextureWrap = {\n    mirroredRepeat: 0,\n    clampToEdge: 1,\n    repeat: 2\n};\nmodule.exports = spine.Atlas;\n","var spine = require('../SpineUtil');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.AtlasAttachmentParser = function (atlas)\r\n{\r\n    this.atlas = atlas;\r\n};\r\nspine.AtlasAttachmentParser.prototype = {\r\n    newRegionAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\r\n        var attachment = new spine.RegionAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.MeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newSkinnedMeshAttachment: function (skin, name, path)\r\n    {\r\n        var region = this.atlas.findRegion(path);\r\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\r\n        var attachment = new spine.SkinnedMeshAttachment(name);\r\n        attachment.rendererObject = region;\r\n        attachment.regionU = region.u;\r\n        attachment.regionV = region.v;\r\n        attachment.regionU2 = region.u2;\r\n        attachment.regionV2 = region.v2;\r\n        attachment.regionRotate = region.rotate;\r\n        attachment.regionOffsetX = region.offsetX;\r\n        attachment.regionOffsetY = region.offsetY;\r\n        attachment.regionWidth = region.width;\r\n        attachment.regionHeight = region.height;\r\n        attachment.regionOriginalWidth = region.originalWidth;\r\n        attachment.regionOriginalHeight = region.originalHeight;\r\n        return attachment;\r\n    },\r\n    newBoundingBoxAttachment: function (skin, name)\r\n    {\r\n        return new spine.BoundingBoxAttachment(name);\r\n    }\r\n};\r\nmodule.exports = spine.AtlasAttachmentParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasPage = function ()\r\n{};\r\nspine.AtlasPage.prototype = {\r\n    name: null,\r\n    format: null,\r\n    minFilter: null,\r\n    magFilter: null,\r\n    uWrap: null,\r\n    vWrap: null,\r\n    rendererObject: null,\r\n    width: 0,\r\n    height: 0\r\n};\r\nmodule.exports = spine.AtlasPage;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasReader = function (text)\r\n{\r\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n};\r\nspine.AtlasReader.prototype = {\r\n    index: 0,\r\n    trim: function (value)\r\n    {\r\n        return value.replace(/^\\s+|\\s+$/g, \"\");\r\n    },\r\n    readLine: function ()\r\n    {\r\n        if (this.index >= this.lines.length) return null;\r\n        return this.lines[this.index++];\r\n    },\r\n    readValue: function ()\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        return this.trim(line.substring(colon + 1));\r\n    },\r\n    /** Returns the number of tuple values read (1, 2 or 4). */\r\n    readTuple: function (tuple)\r\n    {\r\n        var line = this.readLine();\r\n        var colon = line.indexOf(\":\");\r\n        if (colon == -1) throw \"Invalid line: \" + line;\r\n        var i = 0, lastMatch = colon + 1;\r\n        for (; i < 3; i++)\r\n        {\r\n            var comma = line.indexOf(\",\", lastMatch);\r\n            if (comma == -1) break;\r\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\r\n            lastMatch = comma + 1;\r\n        }\r\n        tuple[i] = this.trim(line.substring(lastMatch));\r\n        return i + 1;\r\n    }\r\n};\r\nmodule.exports = spine.AtlasReader;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AtlasRegion = function ()\r\n{};\r\nspine.AtlasRegion.prototype = {\r\n    page: null,\r\n    name: null,\r\n    x: 0, y: 0,\r\n    width: 0, height: 0,\r\n    u: 0, v: 0, u2: 0, v2: 0,\r\n    offsetX: 0, offsetY: 0,\r\n    originalWidth: 0, originalHeight: 0,\r\n    index: 0,\r\n    rotate: false,\r\n    splits: null,\r\n    pads: null\r\n};\r\nmodule.exports = spine.AtlasRegion;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = require('./Curves');\r\nspine.Animation = require('./Animation');\r\nspine.AttachmentTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.attachmentNames = [];\r\n    this.attachmentNames.length = frameCount;\r\n};\r\nspine.AttachmentTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, attachmentName)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.attachmentNames[frameIndex] = attachmentName;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n\r\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\r\n        if (frames[frameIndex] < lastTime) return;\r\n\r\n        var attachmentName = this.attachmentNames[frameIndex];\r\n        skeleton.slots[this.slotIndex].setAttachment(\r\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\r\n    }\r\n};\r\nmodule.exports = spine.AttachmentTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = {\r\n    region: 0,\r\n    boundingbox: 1,\r\n    mesh: 2,\r\n    skinnedmesh: 3\r\n};\r\nmodule.exports = spine.AttachmentType;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = function (boneData, skeleton, parent)\r\n{\r\n    this.data = boneData;\r\n    this.skeleton = skeleton;\r\n    this.parent = parent;\r\n    this.setToSetupPose();\r\n};\r\nspine.Bone.yDown = false;\r\nspine.Bone.prototype = {\r\n    x: 0, y: 0,\r\n    rotation: 0, rotationIK: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    flipX: false, flipY: false,\r\n    m00: 0, m01: 0, worldX: 0, // a b x\r\n    m10: 0, m11: 0, worldY: 0, // c d y\r\n    worldRotation: 0,\r\n    worldScaleX: 1, worldScaleY: 1,\r\n    worldFlipX: false, worldFlipY: false,\r\n    updateWorldTransform: function ()\r\n    {\r\n        var parent = this.parent;\r\n        if (parent)\r\n        {\r\n            this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;\r\n            this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;\r\n            if (this.data.inheritScale)\r\n            {\r\n                this.worldScaleX = parent.worldScaleX * this.scaleX;\r\n                this.worldScaleY = parent.worldScaleY * this.scaleY;\r\n            } else {\r\n                this.worldScaleX = this.scaleX;\r\n                this.worldScaleY = this.scaleY;\r\n            }\r\n            this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;\r\n            this.worldFlipX = parent.worldFlipX != this.flipX;\r\n            this.worldFlipY = parent.worldFlipY != this.flipY;\r\n        } else {\r\n            var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;\r\n            this.worldX = skeletonFlipX ? -this.x : this.x;\r\n            this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;\r\n            this.worldScaleX = this.scaleX;\r\n            this.worldScaleY = this.scaleY;\r\n            this.worldRotation = this.rotationIK;\r\n            this.worldFlipX = skeletonFlipX != this.flipX;\r\n            this.worldFlipY = skeletonFlipY != this.flipY;\r\n        }\r\n        var radians = this.worldRotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        if (this.worldFlipX)\r\n        {\r\n            this.m00 = -cos * this.worldScaleX;\r\n            this.m01 = sin * this.worldScaleY;\r\n        } else {\r\n            this.m00 = cos * this.worldScaleX;\r\n            this.m01 = -sin * this.worldScaleY;\r\n        }\r\n        if (this.worldFlipY != spine.Bone.yDown)\r\n        {\r\n            this.m10 = -sin * this.worldScaleX;\r\n            this.m11 = -cos * this.worldScaleY;\r\n        } else {\r\n            this.m10 = sin * this.worldScaleX;\r\n            this.m11 = cos * this.worldScaleY;\r\n        }\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.rotationIK = this.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.flipX = data.flipX;\r\n        this.flipY = data.flipY;\r\n    },\r\n    worldToLocal: function (world)\r\n    {\r\n        var dx = world[0] - this.worldX, dy = world[1] - this.worldY;\r\n        var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;\r\n        if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown))\r\n        {\r\n            m00 = -m00;\r\n            m11 = -m11;\r\n        }\r\n        var invDet = 1 / (m00 * m11 - m01 * m10);\r\n        world[0] = dx * m00 * invDet - dy * m01 * invDet;\r\n        world[1] = dy * m11 * invDet - dx * m10 * invDet;\r\n    },\r\n    localToWorld: function (local)\r\n    {\r\n        var localX = local[0], localY = local[1];\r\n        local[0] = localX * this.m00 + localY * this.m01 + this.worldX;\r\n        local[1] = localX * this.m10 + localY * this.m11 + this.worldY;\r\n    }\r\n};\r\nmodule.exports = spine.Bone;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.BoneData = function (name, parent)\r\n{\r\n    this.name = name;\r\n    this.parent = parent;\r\n};\r\nspine.BoneData.prototype = {\r\n    length: 0,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    inheritScale: true,\r\n    inheritRotation: true,\r\n    flipX: false, flipY: false\r\n};\r\nmodule.exports = spine.BoneData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoundingBoxAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.vertices = [];\r\n};\r\nspine.BoundingBoxAttachment.prototype = {\r\n    type: spine.AttachmentType.boundingbox,\r\n    computeWorldVertices: function (x, y, bone, worldVertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        for (var i = 0, n = vertices.length; i < n; i += 2)\r\n        {\r\n            var px = vertices[i];\r\n            var py = vertices[i + 1];\r\n            worldVertices[i] = px * m00 + py * m01 + x;\r\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.BoundingBoxAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ColorTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, r, g, b, a, ...\r\n    this.frames.length = frameCount * 5;\r\n};\r\nspine.ColorTimeline.prototype = {\r\n    slotIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 5;\r\n    },\r\n    setFrame: function (frameIndex, time, r, g, b, a)\r\n    {\r\n        frameIndex *= 5;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = r;\r\n        this.frames[frameIndex + 2] = g;\r\n        this.frames[frameIndex + 3] = b;\r\n        this.frames[frameIndex + 4] = a;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var r, g, b, a;\r\n        if (time >= frames[frames.length - 5])\r\n        {\r\n            // Time is after last frame.\r\n            var i = frames.length - 1;\r\n            r = frames[i - 3];\r\n            g = frames[i - 2];\r\n            b = frames[i - 1];\r\n            a = frames[i];\r\n        } else {\r\n            // Interpolate between the previous frame and the current frame.\r\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\r\n            var prevFrameR = frames[frameIndex - 4];\r\n            var prevFrameG = frames[frameIndex - 3];\r\n            var prevFrameB = frames[frameIndex - 2];\r\n            var prevFrameA = frames[frameIndex - 1];\r\n            var frameTime = frames[frameIndex];\r\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\r\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\r\n\r\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\r\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\r\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\r\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\r\n        }\r\n        var slot = skeleton.slots[this.slotIndex];\r\n        if (alpha < 1)\r\n        {\r\n            slot.r += (r - slot.r) * alpha;\r\n            slot.g += (g - slot.g) * alpha;\r\n            slot.b += (b - slot.b) * alpha;\r\n            slot.a += (a - slot.a) * alpha;\r\n        } else {\r\n            slot.r = r;\r\n            slot.g = g;\r\n            slot.b = b;\r\n            slot.a = a;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.ColorTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Curves = function (frameCount)\r\n{\r\n    this.curves = []; // type, x, y, ...\r\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\r\n};\r\nspine.Curves.prototype = {\r\n    setLinear: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\r\n    },\r\n    setStepped: function (frameIndex)\r\n    {\r\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\r\n    },\r\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\r\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\r\n     * the difference between the keyframe's values. */\r\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\r\n    {\r\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\r\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\r\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\r\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\r\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\r\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\r\n\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var curves = this.curves;\r\n        curves[i++] = 2/*BEZIER*/;\r\n\r\n        var x = dfx, y = dfy;\r\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            curves[i] = x;\r\n            curves[i + 1] = y;\r\n            dfx += ddfx;\r\n            dfy += ddfy;\r\n            ddfx += dddfx;\r\n            ddfy += dddfy;\r\n            x += dfx;\r\n            y += dfy;\r\n        }\r\n    },\r\n    getCurvePercent: function (frameIndex, percent)\r\n    {\r\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\r\n        var curves = this.curves;\r\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\r\n        var type = curves[i];\r\n        if (type === 0/*LINEAR*/) return percent;\r\n        if (type == 1/*STEPPED*/) return 0;\r\n        i++;\r\n        var x = 0;\r\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\r\n        {\r\n            x = curves[i];\r\n            if (x >= percent)\r\n            {\r\n                var prevX, prevY;\r\n                if (i == start)\r\n                {\r\n                    prevX = 0;\r\n                    prevY = 0;\r\n                } else {\r\n                    prevX = curves[i - 2];\r\n                    prevY = curves[i - 1];\r\n                }\r\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\r\n            }\r\n        }\r\n        var y = curves[i - 1];\r\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\r\n    }\r\n};\r\nmodule.exports = spine.Curves;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.DrawOrderTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.drawOrders = [];\r\n    this.drawOrders.length = frameCount;\r\n};\r\nspine.DrawOrderTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, drawOrder)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.drawOrders[frameIndex] = drawOrder;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\r\n            frameIndex = frames.length - 1;\r\n        else\r\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\r\n\r\n        var drawOrder = skeleton.drawOrder;\r\n        var slots = skeleton.slots;\r\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\r\n        if (drawOrderToSetupIndex)\r\n        {\r\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\r\n            {\r\n                drawOrder[i] = drawOrderToSetupIndex[i];\r\n            }\r\n        }\r\n\r\n    }\r\n};\r\nmodule.exports = spine.DrawOrderTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Event = function (data)\r\n{\r\n    this.data = data;\r\n};\r\nspine.Event.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.Event;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.EventData = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.EventData.prototype = {\r\n    intValue: 0,\r\n    floatValue: 0,\r\n    stringValue: null\r\n};\r\nmodule.exports = spine.EventData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.EventTimeline = function (frameCount)\r\n{\r\n    this.frames = []; // time, ...\r\n    this.frames.length = frameCount;\r\n    this.events = [];\r\n    this.events.length = frameCount;\r\n};\r\nspine.EventTimeline.prototype = {\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length;\r\n    },\r\n    setFrame: function (frameIndex, time, event)\r\n    {\r\n        this.frames[frameIndex] = time;\r\n        this.events[frameIndex] = event;\r\n    },\r\n    /** Fires events for frames > lastTime and <= time. */\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        if (!firedEvents) return;\r\n\r\n        var frames = this.frames;\r\n        var frameCount = frames.length;\r\n\r\n        if (lastTime > time)\r\n        { // Fire events after last time for looped animations.\r\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\r\n            lastTime = -1;\r\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\r\n            return;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var frameIndex;\r\n        if (lastTime < frames[0])\r\n            frameIndex = 0;\r\n        else\r\n        {\r\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\r\n            var frame = frames[frameIndex];\r\n            while (frameIndex > 0)\r\n            { // Fire multiple events with the same frame.\r\n                if (frames[frameIndex - 1] != frame) break;\r\n                frameIndex--;\r\n            }\r\n        }\r\n        var events = this.events;\r\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\r\n            firedEvents.push(events[frameIndex]);\r\n    }\r\n};\r\nmodule.exports = spine.EventTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        if (slot.attachment != this.attachment) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) {\n            vertices = slot.attachmentVertices = [];\n            for (var k = 0; k < vertexCount; k++) vertices.push(0);\n            // Don't mix from uninitialized slot vertices.\n            alpha = 1;\n        }\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipXTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipXTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipXTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.FlipYTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, flip, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.FlipYTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, flip)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0])\r\n        {\r\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\r\n            return;\r\n        } else if (lastTime > time) //\r\n            lastTime = -1;\r\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\r\n        if (frames[frameIndex] < lastTime) return;\r\n        skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;\r\n    }\r\n};\r\nmodule.exports = spine.FlipYTimeline;\r\n\r\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;\n    var rotation = bone.rotation;\n    // worldY and targetY sign depends on global constant spine.Bone.yDown\n    var rotationIK = (spine.Bone.yDown?-spine.radDeg:spine.radDeg)* Math.atan2(targetY - bone.worldY, targetX - bone.worldX) - parentRotation;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha)\n{\n    var childRotation = child.rotation, parentRotation = parent.rotation;\n    if (!alpha)\n    {\n        child.rotationIK = childRotation;\n        parent.rotationIK = parentRotation;\n        return;\n    }\n    var positionX, positionY, tempPosition = spine.temp;\n    var parentParent = parent.parent;\n    if (parentParent)\n    {\n        tempPosition[0] = targetX;\n        tempPosition[1] = targetY;\n        parentParent.worldToLocal(tempPosition);\n        targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;\n        targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;\n    } else {\n        targetX -= parent.x;\n        targetY -= parent.y;\n    }\n    if (child.parent == parent)\n    {\n        positionX = child.x;\n        positionY = child.y;\n    } else {\n        tempPosition[0] = child.x;\n        tempPosition[1] = child.y;\n        child.parent.localToWorld(tempPosition);\n        parent.worldToLocal(tempPosition);\n        positionX = tempPosition[0];\n        positionY = tempPosition[1];\n    }\n    var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;\n    var offset = Math.atan2(childY, childX);\n    var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;\n    // Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/\n    var cosDenom = 2 * len1 * len2;\n    if (cosDenom < 0.0001)\n    {\n        child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;\n        return;\n    }\n    var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;\n    if (cos < -1)\n        cos = -1;\n    else if (cos > 1)\n        cos = 1;\n    var childAngle = Math.acos(cos) * bendDirection;\n    var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);\n    var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);\n    var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    parent.rotationIK = parentRotation + rotation * alpha;\n    rotation = (childAngle + offset) * spine.radDeg - childRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\r\nspine.IkConstraintData = function (name)\r\n{\r\n    this.name = name;\r\n    this.bones = [];\r\n};\r\nspine.IkConstraintData.prototype = {\r\n    target: null,\r\n    bendDirection: 1,\r\n    mix: 1\r\n};\r\nmodule.exports = spine.IkConstraintData;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.IkConstraintTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, mix, bendDirection, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.IkConstraintTimeline.prototype = {\r\n    ikConstraintIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, mix, bendDirection)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = mix;\r\n        this.frames[frameIndex + 2] = bendDirection;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\r\n            ikConstraint.bendDirection = frames[frames.length - 1];\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\r\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\r\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\r\n    }\r\n};\r\nmodule.exports = spine.IkConstraintTimeline;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.MeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.MeshAttachment.prototype = {\r\n    type: spine.AttachmentType.mesh,\r\n    vertices: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function ()\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var bone = slot.bone;\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var vertices = this.vertices;\r\n        var verticesCount = vertices.length;\r\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\r\n        for (var i = 0; i < verticesCount; i += 2)\r\n        {\r\n            var vx = vertices[i];\r\n            var vy = vertices[i + 1];\r\n            worldVertices[i] = vx * m00 + vy * m01 + x;\r\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.MeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.RegionAttachment = function (name)\r\n{\r\n    this.name = name;\r\n    this.offset = [];\r\n    this.offset.length = 8;\r\n    this.uvs = [];\r\n    this.uvs.length = 8;\r\n};\r\nspine.RegionAttachment.prototype = {\r\n    type: spine.AttachmentType.region,\r\n    x: 0, y: 0,\r\n    rotation: 0,\r\n    scaleX: 1, scaleY: 1,\r\n    width: 0, height: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    setUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var uvs = this.uvs;\r\n        if (rotate)\r\n        {\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v2;\r\n            uvs[4/*X3*/] = u;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v;\r\n            uvs[0/*X1*/] = u2;\r\n            uvs[1/*Y1*/] = v2;\r\n        } else {\r\n            uvs[0/*X1*/] = u;\r\n            uvs[1/*Y1*/] = v2;\r\n            uvs[2/*X2*/] = u;\r\n            uvs[3/*Y2*/] = v;\r\n            uvs[4/*X3*/] = u2;\r\n            uvs[5/*Y3*/] = v;\r\n            uvs[6/*X4*/] = u2;\r\n            uvs[7/*Y4*/] = v2;\r\n        }\r\n    },\r\n    updateOffset: function ()\r\n    {\r\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\r\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\r\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\r\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\r\n        var localX2 = localX + this.regionWidth * regionScaleX;\r\n        var localY2 = localY + this.regionHeight * regionScaleY;\r\n        var radians = this.rotation * spine.degRad;\r\n        var cos = Math.cos(radians);\r\n        var sin = Math.sin(radians);\r\n        var localXCos = localX * cos + this.x;\r\n        var localXSin = localX * sin;\r\n        var localYCos = localY * cos + this.y;\r\n        var localYSin = localY * sin;\r\n        var localX2Cos = localX2 * cos + this.x;\r\n        var localX2Sin = localX2 * sin;\r\n        var localY2Cos = localY2 * cos + this.y;\r\n        var localY2Sin = localY2 * sin;\r\n        var offset = this.offset;\r\n        offset[0/*X1*/] = localXCos - localYSin;\r\n        offset[1/*Y1*/] = localYCos + localXSin;\r\n        offset[2/*X2*/] = localXCos - localY2Sin;\r\n        offset[3/*Y2*/] = localY2Cos + localXSin;\r\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\r\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\r\n        offset[6/*X4*/] = localX2Cos - localYSin;\r\n        offset[7/*Y4*/] = localYCos + localX2Sin;\r\n    },\r\n    computeVertices: function (x, y, bone, vertices)\r\n    {\r\n        x += bone.worldX;\r\n        y += bone.worldY;\r\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\r\n        var offset = this.offset;\r\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\r\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\r\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\r\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\r\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\r\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\r\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\r\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\r\n    }\r\n};\r\nmodule.exports = spine.RegionAttachment;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.RotateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, angle, ...\r\n    this.frames.length = frameCount * 2;\r\n};\r\nspine.RotateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 2;\r\n    },\r\n    setFrame: function (frameIndex, time, angle)\r\n    {\r\n        frameIndex *= 2;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = angle;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 2])\r\n        { // Time is after last frame.\r\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\r\n            while (amount > 180)\r\n                amount -= 360;\r\n            while (amount < -180)\r\n                amount += 360;\r\n            bone.rotation += amount * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\r\n        var prevFrameValue = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\r\n\r\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\r\n        while (amount > 180)\r\n            amount -= 360;\r\n        while (amount < -180)\r\n            amount += 360;\r\n        bone.rotation += amount * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.RotateTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.ScaleTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.ScaleTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\r\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\r\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.ScaleTimeline;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Bone = require('./Bone');\r\nspine.Slot = require('./Slot');\r\nspine.IkConstraint = require('./IkConstraint');\r\nspine.Skeleton = function (skeletonData)\r\n{\r\n    this.data = skeletonData;\r\n\r\n    this.bones = [];\r\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\r\n    {\r\n        var boneData = skeletonData.bones[i];\r\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\r\n        this.bones.push(new spine.Bone(boneData, this, parent));\r\n    }\r\n\r\n    this.slots = [];\r\n    this.drawOrder = [];\r\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\r\n    {\r\n        var slotData = skeletonData.slots[i];\r\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\r\n        var slot = new spine.Slot(slotData, bone);\r\n        this.slots.push(slot);\r\n        this.drawOrder.push(i);\r\n    }\r\n\r\n    this.ikConstraints = [];\r\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\r\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\r\n\r\n    this.boneCache = [];\r\n    this.updateCache();\r\n};\r\nspine.Skeleton.prototype = {\r\n    x: 0, y: 0,\r\n    skin: null,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    time: 0,\r\n    flipX: false, flipY: false,\r\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\r\n    updateCache: function ()\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        var ikConstraintsCount = ikConstraints.length;\r\n\r\n        var arrayCount = ikConstraintsCount + 1;\r\n        var boneCache = this.boneCache;\r\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\r\n        for (var i = 0, n = boneCache.length; i < n; i++)\r\n            boneCache[i].length = 0;\r\n        while (boneCache.length < arrayCount)\r\n            boneCache[boneCache.length] = [];\r\n\r\n        var nonIkBones = boneCache[0];\r\n        var bones = this.bones;\r\n\r\n        outer:\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            var current = bone;\r\n            do {\r\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\r\n                {\r\n                    var ikConstraint = ikConstraints[ii];\r\n                    var parent = ikConstraint.bones[0];\r\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\r\n                    while (true)\r\n                    {\r\n                        if (current == child)\r\n                        {\r\n                            boneCache[ii].push(bone);\r\n                            boneCache[ii + 1].push(bone);\r\n                            continue outer;\r\n                        }\r\n                        if (child == parent) break;\r\n                        child = child.parent;\r\n                    }\r\n                }\r\n                current = current.parent;\r\n            } while (current);\r\n            nonIkBones[nonIkBones.length] = bone;\r\n        }\r\n    },\r\n    /** Updates the world transform for each bone. */\r\n    updateWorldTransform: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var bone = bones[i];\r\n            bone.rotationIK = bone.rotation;\r\n        }\r\n        var i = 0, last = this.boneCache.length - 1;\r\n        while (true)\r\n        {\r\n            var cacheBones = this.boneCache[i];\r\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\r\n                cacheBones[ii].updateWorldTransform();\r\n            if (i == last) break;\r\n            this.ikConstraints[i].apply();\r\n            i++;\r\n        }\r\n    },\r\n    /** Sets the bones and slots to their setup pose values. */\r\n    setToSetupPose: function ()\r\n    {\r\n        this.setBonesToSetupPose();\r\n        this.setSlotsToSetupPose();\r\n    },\r\n    setBonesToSetupPose: function ()\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            bones[i].setToSetupPose();\r\n\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n        {\r\n            var ikConstraint = ikConstraints[i];\r\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\r\n            ikConstraint.mix = ikConstraint.data.mix;\r\n        }\r\n    },\r\n    setSlotsToSetupPose: function ()\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            slots[i].setToSetupPose(i);\r\n        }\r\n\r\n        this.resetDrawOrder();\r\n    },\r\n    /** @return May return null. */\r\n    getRootBone: function ()\r\n    {\r\n        return this.bones.length ? this.bones[0] : null;\r\n    },\r\n    /** @return May be null. */\r\n    findBone: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return bones[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findBoneIndex: function (boneName)\r\n    {\r\n        var bones = this.bones;\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n            if (bones[i].data.name == boneName) return i;\r\n        return -1;\r\n    },\r\n    /** @return May be null. */\r\n    findSlot: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return slots[i];\r\n        return null;\r\n    },\r\n    /** @return -1 if the bone was not found. */\r\n    findSlotIndex: function (slotName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n            if (slots[i].data.name == slotName) return i;\r\n        return -1;\r\n    },\r\n    setSkinByName: function (skinName)\r\n    {\r\n        var skin = this.data.findSkin(skinName);\r\n        if (!skin) throw \"Skin not found: \" + skinName;\r\n        this.setSkin(skin);\r\n    },\r\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\r\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\r\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\r\n     * @param newSkin May be null. */\r\n    setSkin: function (newSkin)\r\n    {\r\n        if (newSkin)\r\n        {\r\n            if (this.skin)\r\n                newSkin._attachAll(this, this.skin);\r\n            else\r\n            {\r\n                var slots = this.slots;\r\n                for (var i = 0, n = slots.length; i < n; i++)\r\n                {\r\n                    var slot = slots[i];\r\n                    var name = slot.data.attachmentName;\r\n                    if (name)\r\n                    {\r\n                        var attachment = newSkin.getAttachment(i, name);\r\n                        if (attachment) slot.setAttachment(attachment);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.skin = newSkin;\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotName: function (slotName, attachmentName)\r\n    {\r\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\r\n    },\r\n    /** @return May be null. */\r\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\r\n    {\r\n        if (this.skin)\r\n        {\r\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\r\n            if (attachment) return attachment;\r\n        }\r\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\r\n        return null;\r\n    },\r\n    /** @param attachmentName May be null. */\r\n    setAttachment: function (slotName, attachmentName)\r\n    {\r\n        var slots = this.slots;\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slot = slots[i];\r\n            if (slot.data.name == slotName)\r\n            {\r\n                var attachment = null;\r\n                if (attachmentName)\r\n                {\r\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\r\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\r\n                }\r\n                slot.setAttachment(attachment);\r\n                return;\r\n            }\r\n        }\r\n        throw \"Slot not found: \" + slotName;\r\n    },\r\n    /** @return May be null. */\r\n    findIkConstraint: function (ikConstraintName)\r\n    {\r\n        var ikConstraints = this.ikConstraints;\r\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\r\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\r\n        return null;\r\n    },\r\n    update: function (delta)\r\n    {\r\n        this.time += delta;\r\n    },\r\n    resetDrawOrder: function () {\r\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\r\n        {\r\n            this.drawOrder[i] = i;\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skeleton;\r\n\r\n","var spine = require('../SpineRuntime') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkeletonBounds = function ()\r\n{\r\n    this.polygonPool = [];\r\n    this.polygons = [];\r\n    this.boundingBoxes = [];\r\n};\r\nspine.SkeletonBounds.prototype = {\r\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\r\n    update: function (skeleton, updateAabb)\r\n    {\r\n        var slots = skeleton.slots;\r\n        var slotCount = slots.length;\r\n        var x = skeleton.x, y = skeleton.y;\r\n        var boundingBoxes = this.boundingBoxes;\r\n        var polygonPool = this.polygonPool;\r\n        var polygons = this.polygons;\r\n\r\n        boundingBoxes.length = 0;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            polygonPool.push(polygons[i]);\r\n        polygons.length = 0;\r\n\r\n        for (var i = 0; i < slotCount; i++)\r\n        {\r\n            var slot = slots[i];\r\n            var boundingBox = slot.attachment;\r\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\r\n            boundingBoxes.push(boundingBox);\r\n\r\n            var poolCount = polygonPool.length, polygon;\r\n            if (poolCount > 0)\r\n            {\r\n                polygon = polygonPool[poolCount - 1];\r\n                polygonPool.splice(poolCount - 1, 1);\r\n            } else\r\n                polygon = [];\r\n            polygons.push(polygon);\r\n\r\n            polygon.length = boundingBox.vertices.length;\r\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\r\n        }\r\n\r\n        if (updateAabb) this.aabbCompute();\r\n    },\r\n    aabbCompute: function ()\r\n    {\r\n        var polygons = this.polygons;\r\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n        {\r\n            var vertices = polygons[i];\r\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\r\n            {\r\n                var x = vertices[ii];\r\n                var y = vertices[ii + 1];\r\n                minX = Math.min(minX, x);\r\n                minY = Math.min(minY, y);\r\n                maxX = Math.max(maxX, x);\r\n                maxY = Math.max(maxY, y);\r\n            }\r\n        }\r\n        this.minX = minX;\r\n        this.minY = minY;\r\n        this.maxX = maxX;\r\n        this.maxY = maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box contains the point. */\r\n    aabbContainsPoint: function (x, y)\r\n    {\r\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\r\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\r\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\r\n            return false;\r\n        var m = (y2 - y1) / (x2 - x1);\r\n        var y = m * (minX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        y = m * (maxX - x1) + y1;\r\n        if (y > minY && y < maxY) return true;\r\n        var x = (minY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        x = (maxY - y1) / m + x1;\r\n        if (x > minX && x < maxX) return true;\r\n        return false;\r\n    },\r\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\r\n    aabbIntersectsSkeleton: function (bounds)\r\n    {\r\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\r\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\r\n    containsPoint: function (x, y)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\r\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\r\n    intersectsSegment: function (x1, y1, x2, y2)\r\n    {\r\n        var polygons = this.polygons;\r\n        for (var i = 0, n = polygons.length; i < n; i++)\r\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\r\n        return null;\r\n    },\r\n    /** Returns true if the polygon contains the point. */\r\n    polygonContainsPoint: function (polygon, x, y)\r\n    {\r\n        var nn = polygon.length;\r\n        var prevIndex = nn - 2;\r\n        var inside = false;\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var vertexY = polygon[ii + 1];\r\n            var prevY = polygon[prevIndex + 1];\r\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\r\n            {\r\n                var vertexX = polygon[ii];\r\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\r\n            }\r\n            prevIndex = ii;\r\n        }\r\n        return inside;\r\n    },\r\n    /** Returns true if the polygon contains the line segment. */\r\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\r\n    {\r\n        var nn = polygon.length;\r\n        var width12 = x1 - x2, height12 = y1 - y2;\r\n        var det1 = x1 * y2 - y1 * x2;\r\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\r\n        for (var ii = 0; ii < nn; ii += 2)\r\n        {\r\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\r\n            var det2 = x3 * y4 - y3 * x4;\r\n            var width34 = x3 - x4, height34 = y3 - y4;\r\n            var det3 = width12 * height34 - height12 * width34;\r\n            var x = (det1 * width34 - width12 * det2) / det3;\r\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\r\n            {\r\n                var y = (det1 * height34 - height12 * det2) / det3;\r\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\r\n            }\r\n            x3 = x4;\r\n            y3 = y4;\r\n        }\r\n        return false;\r\n    },\r\n    getPolygon: function (attachment)\r\n    {\r\n        var index = this.boundingBoxes.indexOf(attachment);\r\n        return index == -1 ? null : this.polygons[index];\r\n    },\r\n    getWidth: function ()\r\n    {\r\n        return this.maxX - this.minX;\r\n    },\r\n    getHeight: function ()\r\n    {\r\n        return this.maxY - this.minY;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonBounds;\r\n\r\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\r\nspine.SkeletonData = require('./SkeletonData');\r\nspine.BoneData = require('./BoneData');\r\nspine.IkConstraintData = require('./IkConstraintData');\r\nspine.SlotData = require('./SlotData');\r\nspine.Skin = require('./Skin');\r\nspine.EventData = require('./EventData');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.ColorTimeline = require('./ColorTimeline');\r\nspine.AttachmentTimeline = require('./AttachmentTimeline');\r\nspine.RotateTimeline = require('./RotateTimeline');\r\nspine.ScaleTimeline = require('./ScaleTimeline');\r\nspine.TranslateTimeline = require('./TranslateTimeline');\r\nspine.FlipXTimeline = require('./FlipXTimeline');\r\nspine.FlipYTimeline = require('./FlipYTimeline');\r\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\r\nspine.FfdTimeline = require('./FfdTimeline');\r\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\r\nspine.EventTimeline = require('./EventTimeline');\r\nspine.Event = require('./Event');\r\nspine.Animation = require('./Animation');\r\nspine.SkeletonJsonParser = function (attachmentLoader)\r\n{\r\n    this.attachmentLoader = attachmentLoader;\r\n};\r\nspine.SkeletonJsonParser.prototype = {\r\n    scale: 1,\r\n    readSkeletonData: function (root, name)\r\n    {\r\n        var skeletonData = new spine.SkeletonData();\r\n        skeletonData.name = name;\r\n\r\n        // Skeleton.\r\n        var skeletonMap = root[\"skeleton\"];\r\n        if (skeletonMap)\r\n        {\r\n            skeletonData.hash = skeletonMap[\"hash\"];\r\n            skeletonData.version = skeletonMap[\"spine\"];\r\n            skeletonData.width = skeletonMap[\"width\"] || 0;\r\n            skeletonData.height = skeletonMap[\"height\"] || 0;\r\n        }\r\n\r\n        // Bones.\r\n        var bones = root[\"bones\"];\r\n        for (var i = 0, n = bones.length; i < n; i++)\r\n        {\r\n            var boneMap = bones[i];\r\n            var parent = null;\r\n            if (boneMap[\"parent\"])\r\n            {\r\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\r\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\r\n            }\r\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\r\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\r\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\r\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\r\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\r\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\r\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\r\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\r\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\r\n            skeletonData.bones.push(boneData);\r\n        }\r\n\r\n        // IK constraints.\r\n        var ik = root[\"ik\"];\r\n        if (ik)\r\n        {\r\n            for (var i = 0, n = ik.length; i < n; i++)\r\n            {\r\n                var ikMap = ik[i];\r\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\r\n\r\n                var bones = ikMap[\"bones\"];\r\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\r\n                {\r\n                    var bone = skeletonData.findBone(bones[ii]);\r\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\r\n                    ikConstraintData.bones.push(bone);\r\n                }\r\n\r\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\r\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\r\n\r\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\r\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\r\n\r\n                skeletonData.ikConstraints.push(ikConstraintData);\r\n            }\r\n        }\r\n\r\n        // Slots.\r\n        var slots = root[\"slots\"];\r\n        for (var i = 0, n = slots.length; i < n; i++)\r\n        {\r\n            var slotMap = slots[i];\r\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\r\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\r\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\r\n\r\n            var color = slotMap[\"color\"];\r\n            if (color)\r\n            {\r\n                slotData.r = this.toColor(color, 0);\r\n                slotData.g = this.toColor(color, 1);\r\n                slotData.b = this.toColor(color, 2);\r\n                slotData.a = this.toColor(color, 3);\r\n            }\r\n\r\n            slotData.attachmentName = slotMap[\"attachment\"];\r\n\r\n\r\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\r\n\r\n            skeletonData.slots.push(slotData);\r\n        }\r\n\r\n        // Skins.\r\n        var skins = root[\"skins\"];\r\n        for (var skinName in skins)\r\n        {\r\n            if (!skins.hasOwnProperty(skinName)) continue;\r\n            var skinMap = skins[skinName];\r\n            var skin = new spine.Skin(skinName);\r\n            for (var slotName in skinMap)\r\n            {\r\n                if (!skinMap.hasOwnProperty(slotName)) continue;\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var slotEntry = skinMap[slotName];\r\n                for (var attachmentName in slotEntry)\r\n                {\r\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\r\n                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);\r\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\r\n                }\r\n            }\r\n            skeletonData.skins.push(skin);\r\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\r\n        }\r\n\r\n        // Events.\r\n        var events = root[\"events\"];\r\n        for (var eventName in events)\r\n        {\r\n            if (!events.hasOwnProperty(eventName)) continue;\r\n            var eventMap = events[eventName];\r\n            var eventData = new spine.EventData(eventName);\r\n            eventData.intValue = eventMap[\"int\"] || 0;\r\n            eventData.floatValue = eventMap[\"float\"] || 0;\r\n            eventData.stringValue = eventMap[\"string\"] || null;\r\n            skeletonData.events.push(eventData);\r\n        }\r\n\r\n        // Animations.\r\n        var animations = root[\"animations\"];\r\n        for (var animationName in animations)\r\n        {\r\n            if (!animations.hasOwnProperty(animationName)) continue;\r\n            this.readAnimation(animationName, animations[animationName], skeletonData);\r\n        }\r\n\r\n        return skeletonData;\r\n    },\r\n    readAttachment: function (skin, name, map)\r\n    {\r\n        name = map[\"name\"] || name;\r\n\r\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\r\n        var path = map[\"path\"] || name;\r\n\r\n        var scale = this.scale;\r\n        if (type == spine.AttachmentType.region)\r\n        {\r\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\r\n            if (!region) return null;\r\n            region.path = path;\r\n            region.x = (map[\"x\"] || 0) * scale;\r\n            region.y = (map[\"y\"] || 0) * scale;\r\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\r\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\r\n            region.rotation = map[\"rotation\"] || 0;\r\n            region.width = (map[\"width\"] || 0) * scale;\r\n            region.height = (map[\"height\"] || 0) * scale;\r\n\r\n            var color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                region.r = this.toColor(color, 0);\r\n                region.g = this.toColor(color, 1);\r\n                region.b = this.toColor(color, 2);\r\n                region.a = this.toColor(color, 3);\r\n            }\r\n\r\n            region.updateOffset();\r\n            return region;\r\n        } else if (type == spine.AttachmentType.mesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n            mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.skinnedmesh)\r\n        {\r\n            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);\r\n            if (!mesh) return null;\r\n            mesh.path = path;\r\n\r\n            var uvs = this.getFloatArray(map, \"uvs\", 1);\r\n            var vertices = this.getFloatArray(map, \"vertices\", 1);\r\n            var weights = [];\r\n            var bones = [];\r\n            for (var i = 0, n = vertices.length; i < n; )\r\n            {\r\n                var boneCount = vertices[i++] | 0;\r\n                bones[bones.length] = boneCount;\r\n                for (var nn = i + boneCount * 4; i < nn; )\r\n                {\r\n                    bones[bones.length] = vertices[i];\r\n                    weights[weights.length] = vertices[i + 1] * scale;\r\n                    weights[weights.length] = vertices[i + 2] * scale;\r\n                    weights[weights.length] = vertices[i + 3];\r\n                    i += 4;\r\n                }\r\n            }\r\n            mesh.bones = bones;\r\n            mesh.weights = weights;\r\n            mesh.triangles = this.getIntArray(map, \"triangles\");\r\n            mesh.regionUVs = uvs;\r\n            mesh.updateUVs();\r\n\r\n            color = map[\"color\"];\r\n            if (color)\r\n            {\r\n                mesh.r = this.toColor(color, 0);\r\n                mesh.g = this.toColor(color, 1);\r\n                mesh.b = this.toColor(color, 2);\r\n                mesh.a = this.toColor(color, 3);\r\n            }\r\n\r\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\r\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\r\n            mesh.width = (map[\"width\"] || 0) * scale;\r\n            mesh.height = (map[\"height\"] || 0) * scale;\r\n            return mesh;\r\n        } else if (type == spine.AttachmentType.boundingbox)\r\n        {\r\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\r\n            var vertices = map[\"vertices\"];\r\n            for (var i = 0, n = vertices.length; i < n; i++)\r\n                attachment.vertices.push(vertices[i] * scale);\r\n            return attachment;\r\n        }\r\n        throw \"Unknown attachment type: \" + type;\r\n    },\r\n    readAnimation: function (name, map, skeletonData)\r\n    {\r\n        var timelines = [];\r\n        var duration = 0;\r\n\r\n        var slots = map[\"slots\"];\r\n        for (var slotName in slots)\r\n        {\r\n            if (!slots.hasOwnProperty(slotName)) continue;\r\n            var slotMap = slots[slotName];\r\n            var slotIndex = skeletonData.findSlotIndex(slotName);\r\n\r\n            for (var timelineName in slotMap)\r\n            {\r\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\r\n                var values = slotMap[timelineName];\r\n                if (timelineName == \"color\")\r\n                {\r\n                    var timeline = new spine.ColorTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var color = valueMap[\"color\"];\r\n                        var r = this.toColor(color, 0);\r\n                        var g = this.toColor(color, 1);\r\n                        var b = this.toColor(color, 2);\r\n                        var a = this.toColor(color, 3);\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\r\n\r\n                } else if (timelineName == \"attachment\")\r\n                {\r\n                    var timeline = new spine.AttachmentTimeline(values.length);\r\n                    timeline.slotIndex = slotIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n\r\n                } else\r\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\r\n            }\r\n        }\r\n\r\n        var bones = map[\"bones\"];\r\n        for (var boneName in bones)\r\n        {\r\n            if (!bones.hasOwnProperty(boneName)) continue;\r\n            var boneIndex = skeletonData.findBoneIndex(boneName);\r\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\r\n            var boneMap = bones[boneName];\r\n\r\n            for (var timelineName in boneMap)\r\n            {\r\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\r\n                var values = boneMap[timelineName];\r\n                if (timelineName == \"rotate\")\r\n                {\r\n                    var timeline = new spine.RotateTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n\r\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\r\n                {\r\n                    var timeline;\r\n                    var timelineScale = 1;\r\n                    if (timelineName == \"scale\")\r\n                        timeline = new spine.ScaleTimeline(values.length);\r\n                    else\r\n                    {\r\n                        timeline = new spine.TranslateTimeline(values.length);\r\n                        timelineScale = this.scale;\r\n                    }\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\r\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n\r\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\r\n                {\r\n                    var x = timelineName == \"flipX\";\r\n                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);\r\n                    timeline.boneIndex = boneIndex;\r\n\r\n                    var field = x ? \"x\" : \"y\";\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[field] || false);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines.push(timeline);\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\r\n                } else\r\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\r\n            }\r\n        }\r\n\r\n        var ikMap = map[\"ik\"];\r\n        for (var ikConstraintName in ikMap)\r\n        {\r\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\r\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\r\n            var values = ikMap[ikConstraintName];\r\n            var timeline = new spine.IkConstraintTimeline(values.length);\r\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = values.length; i < n; i++)\r\n            {\r\n                var valueMap = values[i];\r\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\r\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\r\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\r\n                this.readCurve(timeline, frameIndex, valueMap);\r\n                frameIndex++;\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\r\n        }\r\n\r\n        var ffd = map[\"ffd\"];\r\n        for (var skinName in ffd)\r\n        {\r\n            var skin = skeletonData.findSkin(skinName);\r\n            var slotMap = ffd[skinName];\r\n            for (slotName in slotMap)\r\n            {\r\n                var slotIndex = skeletonData.findSlotIndex(slotName);\r\n                var meshMap = slotMap[slotName];\r\n                for (var meshName in meshMap)\r\n                {\r\n                    var values = meshMap[meshName];\r\n                    var timeline = new spine.FfdTimeline(values.length);\r\n                    var attachment = skin.getAttachment(slotIndex, meshName);\r\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\r\n                    timeline.slotIndex = slotIndex;\r\n                    timeline.attachment = attachment;\r\n\r\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\r\n                    var vertexCount;\r\n                    if (isMesh)\r\n                        vertexCount = attachment.vertices.length;\r\n                    else\r\n                        vertexCount = attachment.weights.length / 3 * 2;\r\n\r\n                    var frameIndex = 0;\r\n                    for (var i = 0, n = values.length; i < n; i++)\r\n                    {\r\n                        var valueMap = values[i];\r\n                        var vertices;\r\n                        if (!valueMap[\"vertices\"])\r\n                        {\r\n                            if (isMesh)\r\n                                vertices = attachment.vertices;\r\n                            else\r\n                            {\r\n                                vertices = [];\r\n                                for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            }\r\n                        } else {\r\n                            var verticesValue = valueMap[\"vertices\"];\r\n                            vertices = [];\r\n                            for (var j = 0; j < vertexCount; ++j) vertices.push(0); //initialize to 0\r\n                            var start = valueMap[\"offset\"] || 0;\r\n                            var nn = verticesValue.length;\r\n                            if (this.scale == 1)\r\n                            {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii];\r\n                            } else {\r\n                                for (var ii = 0; ii < nn; ii++)\r\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\r\n                            }\r\n                            if (isMesh)\r\n                            {\r\n                                var meshVertices = attachment.vertices;\r\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\r\n                                    vertices[ii] += meshVertices[ii];\r\n                            }\r\n                        }\r\n\r\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\r\n                        this.readCurve(timeline, frameIndex, valueMap);\r\n                        frameIndex++;\r\n                    }\r\n                    timelines[timelines.length] = timeline;\r\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n                }\r\n            }\r\n        }\r\n\r\n        var drawOrderValues = map[\"drawOrder\"];\r\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\r\n        if (drawOrderValues)\r\n        {\r\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\r\n            var slotCount = skeletonData.slots.length;\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\r\n            {\r\n                var drawOrderMap = drawOrderValues[i];\r\n                var drawOrder = null;\r\n                if (drawOrderMap[\"offsets\"])\r\n                {\r\n                    drawOrder = [];\r\n                    drawOrder.length = slotCount;\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        drawOrder[ii] = -1;\r\n                    var offsets = drawOrderMap[\"offsets\"];\r\n                    var unchanged = [];\r\n                    unchanged.length = slotCount - offsets.length;\r\n                    var originalIndex = 0, unchangedIndex = 0;\r\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\r\n                    {\r\n                        var offsetMap = offsets[ii];\r\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\r\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\r\n                        // Collect unchanged items.\r\n                        while (originalIndex != slotIndex)\r\n                            unchanged[unchangedIndex++] = originalIndex++;\r\n                        // Set changed items.\r\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\r\n                    }\r\n                    // Collect remaining unchanged items.\r\n                    while (originalIndex < slotCount)\r\n                        unchanged[unchangedIndex++] = originalIndex++;\r\n                    // Fill in unchanged items.\r\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\r\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\r\n                }\r\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        var events = map[\"events\"];\r\n        if (events)\r\n        {\r\n            var timeline = new spine.EventTimeline(events.length);\r\n            var frameIndex = 0;\r\n            for (var i = 0, n = events.length; i < n; i++)\r\n            {\r\n                var eventMap = events[i];\r\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\r\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\r\n                var event = new spine.Event(eventData);\r\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\r\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\r\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\r\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\r\n            }\r\n            timelines.push(timeline);\r\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\r\n        }\r\n\r\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\r\n    },\r\n    readCurve: function (timeline, frameIndex, valueMap)\r\n    {\r\n        var curve = valueMap[\"curve\"];\r\n        if (!curve)\r\n            timeline.curves.setLinear(frameIndex);\r\n        else if (curve == \"stepped\")\r\n            timeline.curves.setStepped(frameIndex);\r\n        else if (curve instanceof Array)\r\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\r\n    },\r\n    toColor: function (hexString, colorIndex)\r\n    {\r\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\r\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\r\n    },\r\n    getFloatArray: function (map, name, scale)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Float32Array(list.length);\r\n        var i = 0, n = list.length;\r\n        if (scale == 1)\r\n        {\r\n            for (; i < n; i++)\r\n                values[i] = list[i];\r\n        } else {\r\n            for (; i < n; i++)\r\n                values[i] = list[i] * scale;\r\n        }\r\n        return values;\r\n    },\r\n    getIntArray: function (map, name)\r\n    {\r\n        var list = map[name];\r\n        var values = new spine.Uint16Array(list.length);\r\n        for (var i = 0, n = list.length; i < n; i++)\r\n            values[i] = list[i] | 0;\r\n        return values;\r\n    }\r\n};\r\nmodule.exports = spine.SkeletonJsonParser;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Skin = function (name)\r\n{\r\n    this.name = name;\r\n    this.attachments = {};\r\n};\r\nspine.Skin.prototype = {\r\n    addAttachment: function (slotIndex, name, attachment)\r\n    {\r\n        this.attachments[slotIndex + \":\" + name] = attachment;\r\n    },\r\n    getAttachment: function (slotIndex, name)\r\n    {\r\n        return this.attachments[slotIndex + \":\" + name];\r\n    },\r\n    _attachAll: function (skeleton, oldSkin)\r\n    {\r\n        for (var key in oldSkin.attachments)\r\n        {\r\n            var colon = key.indexOf(\":\");\r\n            var slotIndex = parseInt(key.substring(0, colon));\r\n            var name = key.substring(colon + 1);\r\n            var slot = skeleton.slots[slotIndex];\r\n            if (slot.attachment && slot.attachment.name == name)\r\n            {\r\n                var attachment = this.getAttachment(slotIndex, name);\r\n                if (attachment) slot.setAttachment(attachment);\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Skin;\r\n\r\n","var spine = require('../SpineUtil') || {};\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.SkinnedMeshAttachment = function (name)\r\n{\r\n    this.name = name;\r\n};\r\nspine.SkinnedMeshAttachment.prototype = {\r\n    type: spine.AttachmentType.skinnedmesh,\r\n    bones: null,\r\n    weights: null,\r\n    uvs: null,\r\n    regionUVs: null,\r\n    triangles: null,\r\n    hullLength: 0,\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    path: null,\r\n    rendererObject: null,\r\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\r\n    regionOffsetX: 0, regionOffsetY: 0,\r\n    regionWidth: 0, regionHeight: 0,\r\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\r\n    edges: null,\r\n    width: 0, height: 0,\r\n    updateUVs: function (u, v, u2, v2, rotate)\r\n    {\r\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\r\n        var n = this.regionUVs.length;\r\n        if (!this.uvs || this.uvs.length != n)\r\n        {\r\n            this.uvs = new spine.Float32Array(n);\r\n        }\r\n        if (this.regionRotate)\r\n        {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\r\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\r\n            }\r\n        } else {\r\n            for (var i = 0; i < n; i += 2)\r\n            {\r\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\r\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\r\n            }\r\n        }\r\n    },\r\n    computeWorldVertices: function (x, y, slot, worldVertices)\r\n    {\r\n        var skeletonBones = slot.bone.skeleton.bones;\r\n        var weights = this.weights;\r\n        var bones = this.bones;\r\n\r\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\r\n        var wx, wy, bone, vx, vy, weight;\r\n        if (!slot.attachmentVertices.length)\r\n        {\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b];\r\n                    vy = weights[b + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        } else {\r\n            var ffd = slot.attachmentVertices;\r\n            for (; v < n; w += 2)\r\n            {\r\n                wx = 0;\r\n                wy = 0;\r\n                nn = bones[v++] + v;\r\n                for (; v < nn; v++, b += 3, f += 2)\r\n                {\r\n                    bone = skeletonBones[bones[v]];\r\n                    vx = weights[b] + ffd[f];\r\n                    vy = weights[b + 1] + ffd[f + 1];\r\n                    weight = weights[b + 2];\r\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\r\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\r\n                }\r\n                worldVertices[w] = wx + x;\r\n                worldVertices[w + 1] = wy + y;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.SkinnedMeshAttachment;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Slot = function (slotData, bone)\r\n{\r\n    this.data = slotData;\r\n    this.bone = bone;\r\n    this.setToSetupPose();\r\n};\r\nspine.Slot.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    _attachmentTime: 0,\r\n    attachment: null,\r\n    attachmentVertices: [],\r\n    setAttachment: function (attachment)\r\n    {\r\n        this.attachment = attachment;\r\n        this._attachmentTime = this.bone.skeleton.time;\r\n        this.attachmentVertices.length = 0;\r\n    },\r\n    setAttachmentTime: function (time)\r\n    {\r\n        this._attachmentTime = this.bone.skeleton.time - time;\r\n    },\r\n    getAttachmentTime: function ()\r\n    {\r\n        return this.bone.skeleton.time - this._attachmentTime;\r\n    },\r\n    setToSetupPose: function ()\r\n    {\r\n        var data = this.data;\r\n        this.r = data.r;\r\n        this.g = data.g;\r\n        this.b = data.b;\r\n        this.a = data.a;\r\n        this.blendMode = data.blendMode;\r\n\r\n        var slotDatas = this.bone.skeleton.data.slots;\r\n        for (var i = 0, n = slotDatas.length; i < n; i++)\r\n        {\r\n            if (slotDatas[i] == data)\r\n            {\r\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\r\n                break;\r\n            }\r\n        }\r\n    }\r\n};\r\nmodule.exports = spine.Slot;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.SlotData = function (name, boneData)\r\n{\r\n    this.name = name;\r\n    this.boneData = boneData;\r\n};\r\n\r\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\r\n    'multiply': PIXI.BLEND_MODES.MULTIPLY,\r\n    'screen': PIXI.BLEND_MODES.SCREEN,\r\n    'additive': PIXI.BLEND_MODES.ADD,\r\n    'normal': PIXI.BLEND_MODES.NORMAL\r\n};\r\n\r\nspine.SlotData.prototype = {\r\n    r: 1, g: 1, b: 1, a: 1,\r\n    attachmentName: null,\r\n    blendMode: PIXI.BLEND_MODES.NORMAL\r\n\r\n\r\n};\r\n\r\n\r\nmodule.exports = spine.SlotData;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.TrackEntry = function ()\r\n{};\r\nspine.TrackEntry.prototype = {\r\n    next: null, previous: null,\r\n    animation: null,\r\n    loop: false,\r\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\r\n    timeScale: 1,\r\n    mixTime: 0, mixDuration: 0, mix: 1,\r\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\r\n};\r\nmodule.exports = spine.TrackEntry;\r\n\r\n","var spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.Curves = require('./Curves');\r\nspine.TranslateTimeline = function (frameCount)\r\n{\r\n    this.curves = new spine.Curves(frameCount);\r\n    this.frames = []; // time, x, y, ...\r\n    this.frames.length = frameCount * 3;\r\n};\r\nspine.TranslateTimeline.prototype = {\r\n    boneIndex: 0,\r\n    getFrameCount: function ()\r\n    {\r\n        return this.frames.length / 3;\r\n    },\r\n    setFrame: function (frameIndex, time, x, y)\r\n    {\r\n        frameIndex *= 3;\r\n        this.frames[frameIndex] = time;\r\n        this.frames[frameIndex + 1] = x;\r\n        this.frames[frameIndex + 2] = y;\r\n    },\r\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\r\n    {\r\n        var frames = this.frames;\r\n        if (time < frames[0]) return; // Time is before first frame.\r\n\r\n        var bone = skeleton.bones[this.boneIndex];\r\n\r\n        if (time >= frames[frames.length - 3])\r\n        { // Time is after last frame.\r\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\r\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\r\n            return;\r\n        }\r\n\r\n        // Interpolate between the previous frame and the current frame.\r\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\r\n        var prevFrameX = frames[frameIndex - 2];\r\n        var prevFrameY = frames[frameIndex - 1];\r\n        var frameTime = frames[frameIndex];\r\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\r\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\r\n\r\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\r\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\r\n    }\r\n};\r\nmodule.exports = spine.TranslateTimeline;\r\n\r\n","/******************************************************************************\r\n * Spine Runtimes Software License\r\n * Version 2.1\r\n *\r\n * Copyright (c) 2013, Esoteric Software\r\n * All rights reserved.\r\n *\r\n * You are granted a perpetual, non-exclusive, non-sublicensable and\r\n * non-transferable license to install, execute and perform the Spine Runtimes\r\n * Software (the \"Software\") solely for internal use. Without the written\r\n * permission of Esoteric Software (typically granted by licensing Spine), you\r\n * may not (a) modify, translate, adapt or otherwise create derivative works,\r\n * improvements of the Software or develop new applications using the Software\r\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\r\n * trademark, patent or other intellectual property or proprietary rights\r\n * notices on or in the Software, including any copy thereof. Redistributions\r\n * in binary or source form must include this license and terms.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\r\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\r\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\r\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\r\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\r\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n *****************************************************************************/\r\nvar spine = require('../SpineUtil');\r\nspine.Animation = require('./Animation');\r\nspine.AnimationStateData = require('./AnimationStateData');\r\nspine.AnimationState = require('./AnimationState');\r\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\r\nspine.Atlas = require('./Atlas');\r\nspine.AtlasPage = require('./AtlasPage');\r\nspine.AtlasReader = require('./AtlasReader');\r\nspine.AtlasRegion = require('./AtlasRegion');\r\nspine.AttachmentTimeline = require('./AttachmentTimeline');\r\nspine.AttachmentType = require('./AttachmentType');\r\nspine.BoneData = require('./BoneData');\r\nspine.Bone = require('./Bone');\r\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\r\nspine.ColorTimeline = require('./ColorTimeline');\r\nspine.Curves = require('./Curves');\r\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\r\nspine.EventData = require('./EventData');\r\nspine.Event = require('./Event');\r\nspine.EventTimeline = require('./EventTimeline');\r\nspine.FfdTimeline = require('./FfdTimeline');\r\nspine.FlipXTimeline = require('./FlipXTimeline');\r\nspine.FlipYTimeline = require('./FlipYTimeline');\r\nspine.IkConstraintData = require('./IkConstraintData');\r\nspine.IkConstraint = require('./IkConstraint');\r\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\r\nspine.MeshAttachment = require('./MeshAttachment');\r\nspine.RegionAttachment = require('./RegionAttachment');\r\nspine.RotateTimeline = require('./RotateTimeline');\r\nspine.ScaleTimeline = require('./ScaleTimeline');\r\nspine.SkeletonBounds = require('./SkeletonBounds');\r\nspine.SkeletonData = require('./SkeletonData');\r\nspine.Skeleton = require('./Skeleton');\r\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\r\nspine.Skin = require('./Skin.js');\r\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\r\nspine.SlotData = require('./SlotData');\r\nspine.Slot = require('./Slot');\r\nspine.TrackEntry = require('./TrackEntry');\r\nspine.TranslateTimeline = require('./TranslateTimeline');\r\nmodule.exports = spine;\r\n","module.exports = {\r\n    radDeg: 180 / Math.PI,\r\n    degRad: Math.PI / 180,\r\n    temp: [],\r\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\r\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array\r\n};\r\n\r\n","var spine = require('../SpineRuntime');\r\nvar atlasParser = require('../loaders/atlasParser');\r\n\r\n/* Esoteric Software SPINE wrapper for pixi.js */\r\nspine.Bone.yDown = true;\r\n\r\n/**\r\n * A class that enables the you to import and run your spine animations in pixi.\r\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\r\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\r\n *\r\n * ```js\r\n * var spineAnimation = new PIXI.Spine(spineData);\r\n * ```\r\n *\r\n * @class\r\n * @extends Container\r\n * @memberof PIXI.spine\r\n * @param spineData {object} The spine data loaded from a spine atlas.\r\n */\r\nfunction Spine(spineData)\r\n{\r\n    PIXI.Container.call(this);\r\n\r\n    if (!spineData)\r\n    {\r\n        throw new Error('The spineData param is required.');\r\n    }\r\n\r\n    if ((typeof spineData) === \"string\")\r\n    {\r\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\r\n    }\r\n\r\n    /**\r\n     * The spineData object\r\n     *\r\n     * @member {object}\r\n     */\r\n    this.spineData = spineData;\r\n\r\n    /**\r\n     * A spine Skeleton object\r\n     *\r\n     * @member {object}\r\n     */\r\n    this.skeleton = new spine.Skeleton(spineData);\r\n    this.skeleton.updateWorldTransform();\r\n\r\n    /**\r\n     * A spine AnimationStateData object created from the spine data passed in the constructor\r\n     *\r\n     * @member {object}\r\n     */\r\n    this.stateData = new spine.AnimationStateData(spineData);\r\n\r\n    /**\r\n     * A spine AnimationState object created from the spine AnimationStateData object\r\n     *\r\n     * @member {object}\r\n     */\r\n    this.state = new spine.AnimationState(this.stateData);\r\n\r\n    /**\r\n     * An array of containers\r\n     *\r\n     * @member {Container[]}\r\n     */\r\n    this.slotContainers = [];\r\n\r\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\r\n    {\r\n        var slot = this.skeleton.slots[i];\r\n        var attachment = slot.attachment;\r\n        var slotContainer = new PIXI.Container();\r\n        this.slotContainers.push(slotContainer);\r\n        this.addChild(slotContainer);\r\n\r\n        if (attachment instanceof spine.RegionAttachment)\r\n        {\r\n            var spriteName = attachment.rendererObject.name;\r\n            var sprite = this.createSprite(slot, attachment);\r\n            slot.currentSprite = sprite;\r\n            slot.currentSpriteName = spriteName;\r\n            slotContainer.addChild(sprite);\r\n        }\r\n        else if (attachment instanceof spine.MeshAttachment)\r\n        {\r\n            var mesh = this.createMesh(slot, attachment);\r\n            slot.currentMesh = mesh;\r\n            slot.currentMeshName = attachment.name;\r\n            slotContainer.addChild(mesh);\r\n        }\r\n        else\r\n        {\r\n            continue;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Should the Spine object update its transforms\r\n     *\r\n     * @member {boolean}\r\n     */\r\n    this.autoUpdate = true;\r\n}\r\n\r\nSpine.fromAtlas = function(resourceName) {\r\n    var skeletonData = atlasParser.AnimCache[resourceName];\r\n\r\n    if (!skeletonData)\r\n    {\r\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\r\n    }\r\n\r\n    return new Spine(skeletonData);\r\n}\r\n\r\nSpine.prototype = Object.create(PIXI.Container.prototype);\r\nSpine.prototype.constructor = Spine;\r\nmodule.exports = Spine;\r\n\r\nObject.defineProperties(Spine.prototype, {\r\n    /**\r\n     * If this flag is set to true, the spine animation will be autoupdated every time\r\n     * the object id drawn. The down side of this approach is that the delta time is\r\n     * automatically calculated and you could miss out on cool effects like slow motion,\r\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\r\n     * autoupdate enabled but are harder to achieve.\r\n     *\r\n     * @member {boolean}\r\n     * @memberof Spine#\r\n     * @default true\r\n     */\r\n    autoUpdate: {\r\n        get: function ()\r\n        {\r\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Update the spine skeleton and its animations by delta time (dt)\r\n *\r\n * @param dt {number} Delta time. Time by which the animation should be updated\r\n */\r\nSpine.prototype.update = function (dt)\r\n{\r\n    this.state.update(dt);\r\n    this.state.apply(this.skeleton);\r\n    this.skeleton.updateWorldTransform();\r\n\r\n    var drawOrder = this.skeleton.drawOrder;\r\n    var slots = this.skeleton.slots;\r\n\r\n    for (var i = 0, n = drawOrder.length; i < n; i++)\r\n    {\r\n        this.children[i] = this.slotContainers[drawOrder[i]];\r\n    }\r\n\r\n    for (i = 0, n = slots.length; i < n; i++)\r\n    {\r\n        var slot = slots[i];\r\n        var attachment = slot.attachment;\r\n        var slotContainer = this.slotContainers[i];\r\n\r\n        if (!attachment)\r\n        {\r\n            slotContainer.visible = false;\r\n            continue;\r\n        }\r\n\r\n        var type = attachment.type;\r\n        if (type === spine.AttachmentType.region)\r\n        {\r\n            if (attachment.rendererObject)\r\n            {\r\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\r\n                {\r\n                    var spriteName = attachment.rendererObject.name;\r\n                    if (slot.currentSprite !== undefined)\r\n                    {\r\n                        slot.currentSprite.visible = false;\r\n                    }\r\n                    slot.sprites = slot.sprites || {};\r\n                    if (slot.sprites[spriteName] !== undefined)\r\n                    {\r\n                        slot.sprites[spriteName].visible = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        var sprite = this.createSprite(slot, attachment);\r\n                        slotContainer.addChild(sprite);\r\n                    }\r\n                    slot.currentSprite = slot.sprites[spriteName];\r\n                    slot.currentSpriteName = spriteName;\r\n                }\r\n            }\r\n\r\n            var bone = slot.bone;\r\n\r\n            slotContainer.position.x = bone.worldX + attachment.x * bone.m00 + attachment.y * bone.m01;\r\n            slotContainer.position.y = bone.worldY + attachment.x * bone.m10 + attachment.y * bone.m11;\r\n            slotContainer.scale.x = bone.worldScaleX;\r\n            slotContainer.scale.y = bone.worldScaleY;\r\n            slotContainer.rotation = -(slot.bone.worldRotation * spine.degRad);\r\n            if (bone.worldFlipX) {\r\n                slotContainer.scale.x = -slotContainer.scale.x;\r\n                slotContainer.rotation = -slotContainer.rotation;\r\n            }\r\n            if (bone.worldFlipY == spine.Bone.yDown) {\r\n                slotContainer.scale.y = -slotContainer.scale.y;\r\n                slotContainer.rotation = -slotContainer.rotation;\r\n            }\r\n            slot.currentSprite.blendMode = slot.blendMode;\r\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\r\n        }\r\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\r\n        {\r\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\r\n            {\r\n                var meshName = attachment.name;\r\n                if (slot.currentMesh !== undefined)\r\n                {\r\n                    slot.currentMesh.visible = false;\r\n                }\r\n\r\n                slot.meshes = slot.meshes || {};\r\n\r\n                if (slot.meshes[meshName] !== undefined)\r\n                {\r\n                    slot.meshes[meshName].visible = true;\r\n                }\r\n                else\r\n                {\r\n                    var mesh = this.createMesh(slot, attachment);\r\n                    slotContainer.addChild(mesh);\r\n                }\r\n\r\n                slot.currentMesh = slot.meshes[meshName];\r\n                slot.currentMeshName = meshName;\r\n            }\r\n\r\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\r\n\r\n        }\r\n        else\r\n        {\r\n            slotContainer.visible = false;\r\n            continue;\r\n        }\r\n        slotContainer.visible = true;\r\n\r\n        slotContainer.alpha = slot.a;\r\n    }\r\n};\r\n\r\n/**\r\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\r\n *\r\n * @private\r\n */\r\nSpine.prototype.autoUpdateTransform = function ()\r\n{\r\n    this.lastTime = this.lastTime || Date.now();\r\n    var timeDelta = (Date.now() - this.lastTime) * 0.001;\r\n    this.lastTime = Date.now();\r\n\r\n    this.update(timeDelta);\r\n\r\n    PIXI.Container.prototype.updateTransform.call(this);\r\n};\r\n\r\n/**\r\n * Create a new sprite to be used with spine.RegionAttachment\r\n *\r\n * @param slot {spine.Slot} The slot to which the attachment is parented\r\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\r\n * @private\r\n */\r\nSpine.prototype.createSprite = function (slot, attachment)\r\n{\r\n    var descriptor = attachment.rendererObject;\r\n    var baseTexture = descriptor.page.rendererObject;\r\n    var spriteRect = new PIXI.Rectangle(descriptor.x,\r\n                                        descriptor.y,\r\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\r\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\r\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\r\n    var sprite = new PIXI.Sprite(spriteTexture);\r\n\r\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\r\n    sprite.scale.x = attachment.width / descriptor.originalWidth * attachment.scaleX;\r\n    sprite.scale.y = attachment.height / descriptor.originalHeight * attachment.scaleY;\r\n    sprite.rotation = baseRotation - (attachment.rotation * spine.degRad);\r\n    sprite.anchor.x = (0.5 * descriptor.originalWidth - descriptor.offsetX) / descriptor.width;\r\n    sprite.anchor.y = 1.0 - ((0.5 * descriptor.originalHeight - descriptor.offsetY) / descriptor.height);\r\n    sprite.alpha = attachment.a;\r\n\r\n    slot.sprites = slot.sprites || {};\r\n    slot.sprites[descriptor.name] = sprite;\r\n    return sprite;\r\n};\r\n\r\n/**\r\n * Creates a Strip from the spine data\r\n * @param slot {spine.Slot} The slot to which the attachment is parented\r\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\r\n * @private\r\n */\r\nSpine.prototype.createMesh = function (slot, attachment)\r\n{\r\n    var descriptor = attachment.rendererObject;\r\n    var baseTexture = descriptor.page.rendererObject;\r\n    var texture = new PIXI.Texture(baseTexture);\r\n\r\n    var strip = new PIXI.mesh.Mesh(\r\n        texture,\r\n        new Float32Array(attachment.uvs.length),\r\n        new Float32Array(attachment.uvs),\r\n        new Uint16Array(attachment.triangles),\r\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\r\n\r\n    strip.canvasPadding = 1.5;\r\n\r\n    strip.alpha = attachment.a;\r\n\r\n    slot.meshes = slot.meshes || {};\r\n    slot.meshes[attachment.name] = strip;\r\n\r\n    return strip;\r\n};\r\n","/**\r\n * @file        Spine resource loader\r\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\r\n * @copyright   2013-2015 GoodBoyDigital\r\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace PIXI.loaders\r\n */\r\n\r\nvar atlasParser = require('./atlasParser');\r\n\r\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\r\nPIXI.loader.use(atlasParser());\r\n","var Resource = PIXI.loaders.Resource,\n    async = PIXI.utils.async,\n    spine = require('../SpineRuntime');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            // create a spine atlas using the loaded text\n            var spineAtlas = new spine.Atlas(this.xhr.responseText, baseUrl, res.crossOrigin);\n\n            // spine animation\n            var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n            var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n            resource.spineData = skeletonData;\n            resource.spineAtlas = spineAtlas;\n            if (atlasParser.enableCaching)\n                atlasParser.AnimCache[resource.name] = resource.spineData;\n\n            // Go through each spineAtlas.pages and wait for page.rendererObject (a baseTexture) to\n            // load. Once all loaded, then call the next function.\n            async.each(spineAtlas.pages, function (page, done) {\n                if (page.rendererObject.hasLoaded) {\n                    done();\n                }\n                else {\n                    page.rendererObject.once('loaded', done);\n                }\n            }, next);\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n","module.exports = {\n    atlasParser: require('./atlasParser'),\n    Loader: require('./Loader')\n};\n"],"sourceRoot":"./"}